<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>html</title>
    <link href="/smiling-sheep.github.io/2023/10/20/html/"/>
    <url>/smiling-sheep.github.io/2023/10/20/html/</url>
    
    <content type="html"><![CDATA[<p>html标签一般是成对出现的，叫做双标签，其中第一个标签叫做开始标签（开放标签），第二个标签叫做结束标签（闭合标签），结束标签的标签名前是有&#x2F;标注。</p><ul><li>单表签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs /">&lt;标签名 /&gt;<br><br></code></pre></td></tr></table></figure><ul><li><p>标签关系：嵌套关系（父子关系） 并列关系（兄弟关系）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>jin234324 <br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> 文字<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>第二段的内容ß<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>标签属性，有些标签是自带属性的</p><p>&lt;标签名 属性名1&#x3D;’属性值’  属性名2&#x3D;’属性值’&gt;标签体&lt;&#x2F;标签名&gt;</p><ul><li><p>标签的通用属性，即每个标签都会有的属性，通用属性是写在标签里的</p><p>id class style title</p></li><li><p>注意，有些自带属性是不能写在css样式中的，比如a链接的href属性，img的url属性，通用属性等…</p></li><li><p>有些标签会自带一些样式属性，不推荐使用，标签的样式要写在css样式中，这样才能实现结构与样式相分离</p></li></ul></li></ul><h3 id="html的基本结构："><a href="#html的基本结构：" class="headerlink" title="html的基本结构："></a>html的基本结构：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--head标签是网页的头部，里面是给浏览器看的是网页的设置信息，除了title标签展示的标题以外，其他内容是不可见的--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>网页的标题，用户保存网页时会使用这个标题作为，默认标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 页面的主体，里面的内容是给用户看的会在浏览器中展示出来--&gt;</span><br>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="003"><a href="#003" class="headerlink" title="003"></a>003</h2><h3 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h3><p>代码快速格式化：设置中搜索emmet.include在setings.json下的用户中添加：”editor.formatOnType”:true;</p><p>“editor.formatOnSave”:true;</p><p>即可每次保存是自动格式化代码</p><h3 id="lt-DOCTYPE-html-gt"><a href="#lt-DOCTYPE-html-gt" class="headerlink" title="&lt;! DOCTYPE html&gt;"></a>&lt;! DOCTYPE html&gt;</h3><p>文档声明标签，用来告诉浏览器使用html5的版本来显示网页</p><p>必须放在文档的最开头，在html便签的前面</p><h3 id=""><a href="#" class="headerlink" title=""></a><html></html></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;html  <span class="hljs-attribute">lang</span>=<span class="hljs-string">&#x27;zh-CN&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>lang语言来定义当前文档显示的语言，告诉人们当前网站是中文网站还是英文网站</p><p>en定义语言为英文，英文网站</p><p>zh-CN定义语言为中文，中文网站</p><h3 id="meta标签："><a href="#meta标签：" class="headerlink" title="meta标签："></a>meta标签：</h3><p>作用：meta标签通常是用来给网页设置关键词，描述，作者，修改时间等…..</p><p>在html中通常使用meta标签的charset属性来网页的字符集</p><p>写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&#x27;UTF-8&#x27;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="charset的常见值"><a href="#charset的常见值" class="headerlink" title="charset的常见值"></a>charset的常见值</h3><ul><li>GB2312中国字库，所有简体字，⼀些特殊符号 和少数的外语</li><li>GBK 是gb2312的扩展，包含了繁体字，有更多的字符</li><li>UTF-8 又称为 万国码 几乎包含了世界上所有国家需要用到文字，推荐使用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ie8 的专用标记 用来告诉ie8浏览器模拟哪个版本的ie浏览器炫染页面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  设置视口的大小，device-width 表示设备的宽度<br></code></pre></td></tr></table></figure><p>ASCII码</p><p>读作：as key码</p><p>一个编码，用来表示计算机输入的所有内容，最早把所有可以输入的内容全部转换成二进制数字保存，给电脑上的每一个键，每一个输入都编了一个二进制码，一共128个，起了名字叫做ASCII码</p><p>unicode编码</p><p>随着计算机的发展，128个不够用了，又在ascii码的基础上新增了世界上大部分国家的文字，即万国码（统一码），取名叫做unicode编码，前128个就是ascII码</p><p>随着web技术的发展，在浏览器中统一使用一种八位的unicode编码，我们叫做UTF-8</p><p>不同的编码，在不同的字符集里面，同一个序号的内容不一样GBK</p><h3 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h3><p>元素一般分为块级元素和行内元素两种</p><p>块级元素：h系标签 p div table ul li ou fome lable</p><ul><li><p>独占一行，可设置宽高内外边距等，如果块级元素没有设置宽度默认宽度是父元素的100%</p></li><li><p>是一个容器级元素，里面可以嵌套行内或者块级元素。</p></li><li><p>注意：文本级元素内里面不能放块级元素。p标签是用来存放文字的里面不能放块级元素特别是不能放div标签。同理，h系标签都是文字类的块级元素，里面不能放其他块级元素，（有几个特殊的块级元素里面不嵌套块级元素，h系，p，dt）</p></li><li><p>常见的文本级元素 p span b u i s strong em ins del</p></li></ul><p>行内元素：a span img</p><ul><li><p>一行可显示多个，默认是在页面中从左向右排列的，如果一行放不下会自动另起一行继续自左向右排列</p></li><li><p>直接设置宽高无效，靠内容撑开,可以设置行高line-height</p></li><li><p>行内元素只能容纳文本或其他行内元素</p></li><li><p>注意：1:a链接里不能放a链接</p><p>​2:特殊情况a标签里可以放块级元素，但是给a标签转化一下模式最安全</p></li><li><p>行内元素对margin仅设置左右方向有效，设置上下方向无效，对padding设置上下左右方向都有效，即会撑大空间</p></li></ul><p>行内块元素：</p><p>在行内元素中有几个特殊的标签 img input td 他们同时具有块级元素和行内元素的优点，有些资料称之为行内块元素</p><ul><li>可以和其他行内元素（行内块元素）在一行显示，但他们之间有空白缝隙</li><li>默认宽度是本身内容的宽度（行内元素的特点）</li><li>可设置宽高边距（块级元素的特点）</li></ul><p>元素显示模式的转化 例如：扩大a标签的触发范围 display：inline｜block｜inline- block；</p><hr><h2 id="004-常见的html标签"><a href="#004-常见的html标签" class="headerlink" title="004 常见的html标签"></a>004 常见的html标签</h2><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><p>html放弃的标签：因为这些早期标签只是为了单纯的修改文本的样式，没有语义，不符合html标签语义化的原则，所以被放弃替代</p><ul><li><p>b（blod）加粗文本，没有语义；</p></li><li><p>i（italic）将文本倾斜，没有语义   italic倾斜</p></li><li><p>u（underline）给文本添加下划线，没有语义    </p></li><li><p>s（strikethrough）给文本添加删除线，没有语义    strikethrough删除线</p><p>新增的文本格式化标签</p></li><li><p>strong 定义重要性强调文字，替代了b标签</p></li><li><p>em （emphasized）：定义强调性文字， 替代了i标签</p></li><li><p>ins （inseted）定义插入的文字，替代了u标签</p></li><li><p>del（deleted） 定义被删除的文字，替代了s标签</p></li></ul><h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><p>因为有些字符是被html保留的或者有特殊的作用，所以这些字符我们不能使其直接在页面中直接显示出来，需要使用相对应的字符实体</p><p>空格 &amp;nbsp；</p><p>小于号  &lt;   &amp;lt；less than</p><p>大于号 &gt;    &amp;gt； greater than</p><p>版权符号©️  &amp;copy； 复制 </p><h3 id="h系列标签-给页面设定标题"><a href="#h系列标签-给页面设定标题" class="headerlink" title="h系列标签  给页面设定标题"></a>h系列标签  给页面设定标题</h3><ul><li>有h1至h6 ；6个标签，表示1到6级标题</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题内容<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>特点：</p><ol><li>级别依次降低，重要性也依次降低</li><li>都会被加粗，字体从大到小，h1最大，h6最小</li><li>是文本级标签，但是没有嵌套关系</li><li>h系标签会独占一行</li><li>h系标签要慎用，特别是h1标签，一个页面最多只能出现一次，会影响seo</li></ol><p><strong>注意：</strong></p><p>文字类的元素内里面不能放块级元素。p标签是用来存放文字的里面不能放块级元素特别是不能放div标签。同理，h系标签都是文字类的块级元素，里面不能放其他块级元素</p><p>容器级的元素里面可以嵌套任意类型的标签</p><p>文本级的标签只能嵌套文字，图片，超链接</p><h3 id="p标签"><a href="#p标签" class="headerlink" title="p标签"></a>p标签</h3><p>作用：给文字添加段落语义，给文本分段</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs /">&lt;p&gt;xxxx&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>注意点：在浏览器中独占一行</p><p>p标签是一个用来存放文本的标签，里面不要放其他块级标签特别是div标签</p><h3 id="br"><a href="#br" class="headerlink" title="br"></a>br</h3><p>br标签是强制换行的标签</p><h3 id="hr标签"><a href="#hr标签" class="headerlink" title="hr标签"></a>hr标签</h3><p>分割线标签，在浏览中实现一条分割线</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;hr /&gt;</span><br></code></pre></td></tr></table></figure><p>注意点：在浏览器中独占一行</p><h3 id="div标签"><a href="#div标签" class="headerlink" title="div标签"></a>div标签</h3><p>div标签无语义块级元素，是用来给页面分区的，可以将页面分成一个个独立的区域，里面可以嵌套任意类型的标签</p><h3 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h3><p>span无语义行内元素，常用来将文本或文档的一部分独立出来，单独设置样式</p><p>span没有默认的样式，如果不给span标签设置样式的话，span标签内的文本和普通文本没有任何视觉上的差异</p><h3 id="a标签-href-target-title"><a href="#a标签-href-target-title" class="headerlink" title="a标签 href target title"></a>a标签 href target title</h3><ul><li><p>a标签作用：实现页面之间的跳转</p></li><li><p>格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;要跳转到的目标页面的地址&#x27;</span>&gt;</span>要展示给用户看的内容（可以是文字也可以是图片，视频等...）<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>a标签的href属性：</p><ul><li><p>a标签必须有一个href属性否则a标签不知道要跳转到什么地方</p></li><li><p>a标签指定的url地址前必须要带有http：&#x2F;&#x2F;或https：&#x2F;&#x2F;</p></li><li><p>a标签除了可以指定一个网络地址外还可以指定一个本地地址（绝对路径，相对路径）</p></li></ul></li><li><p>a标签的target属性</p><p>target： ⽬标 的意思，跳转后的⽹站是否在新标签⻚打开。 </p><p>属性值：</p><ul><li><p>a. _self :当前标签⻚跳转，也就是不打开新⻚⾯，a标签默认的target属性。 </p></li><li><p>b. _blank：打开⼀个新的⻚⾯，在新的⻚⾯进⾏跳转。</p></li></ul></li><li><p>a标签的title属性：</p><p>设置鼠标悬停时显示的提示文本</p></li></ul><p>扩展：base标签</p><p>base标签为⻚⾯上的所有链接规定默认地址或默认⽬标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs /">&lt;base href=&quot;&quot; target=&quot;_black&quot; /&gt;<br></code></pre></td></tr></table></figure><p>案例：集体设置 后 单独给某一个a链接设置</p><p>注意：base标签必须要写在head标签里</p><p>（ （base标签的href先不讲） 通常情况下，浏览器会从当前文档的 URL 中提取相应的元素来填写相对 URL 中的空白。</p><p>  使用 <base> 标签可以改变这一点。浏览器随后将不再使用当前文档的 URL，而使用指定的基本 URL 来解析所有的<strong>相对 URL</strong>。这其中包括 <a>、<img>、<link>、<form> 标签中的 URL。</p><p>![截屏2021-04-16 下午6.26.36](&#x2F;Users&#x2F;wei&#x2F;Desktop&#x2F;markdown&#x2F;截屏2021-04-16 下午6.26.36.png)</p><p>）</p><ul><li><p>使用a标签创建假链接：假链接就是点击后不会跳转的链接</p></li><li><p>假链接的格式：</p><ul><li><p>href：# （）点击后会回到页面的顶部</p></li><li><p>href：javascript:;</p></li></ul></li></ul><p>这两种格式的区别是 #号点击后会返回页面的顶部，而使用javascript不会回到页面的顶部</p><ul><li>锚点：</li></ul><p>要想通过a链接跳转到指定的位置，那么必须要告诉a标签一个独一无二的身份证号（id），这样a标签才能在页面中找到需要跳转的目标位置。</p><p>如何给html页面中的标签绑定一个独一无二的身份证号呢，在html中每一个标签都有一个id属性，这个属性就是用来给标签指定独一无二的身份证号的。</p><ul><li>锚点格式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs /">&lt;a href=&quot;#center&quot;&gt;跳转到中部&lt;/a&gt;<br>&lt;h1 id=&quot;center&quot;&gt;我是中部&lt;h1&gt;<br></code></pre></td></tr></table></figure><p>注意点：</p><p>1:我们通过a链接跳转到指定位置是没有过度动画的，是一下跳转到指定位置</p><p>2:a标签除了可以当前页面的指定位置以外，还可以跳转到其他页面的指定位置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">页面1:<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;其他页面的地址#center&quot;</span>&gt;</span>跳转到中部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>页面2:<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>我是中部<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3:a标签里不能嵌套a标签</p><p>4:a标签里可以嵌套块级标签但是转化一下a标签的显示模式会更加的安全</p><h3 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h3><p>img标签：常见属性 src width height alt title</p><ul><li>作用：告诉浏览器显示一张图片</li><li>img标签的常见属性 src width height alt title，必须具备两个属性是src和alt属性<ul><li><p>src属性是img标签的必备属性，是source的简写，属性值是图片的地址</p></li><li><p>alt属性是在图片加载失败的情况下展示的提示语句，或者为盲人提供文字信息,搜索引擎会根据alt中的提示文字来识别图片，如果图片不写alt则不会被搜索引擎所检索到</p></li><li><p>width,height属性用来设置图片显示宽度和高度</p></li><li><p>不给img标签设置宽高的情况下，显示图片的原始尺寸</p></li><li><p>同时给元素指定宽高，容易是图片发生变形。如果想给图片设置宽高尺寸，但是图片不变形的情况下，我们需要给img便签只设置宽度或者高度中的一个即可</p><p>（pc端一般不建议修改图片的大小，需要多大的图片就裁多大，移动端经常需要对图片进行缩放，大图缩小）</p></li><li><p>title属性是在图片加载成功后，鼠标在图片上悬停时显示的提示语句</p></li></ul></li></ul><h3 id="常见的图片格式"><a href="#常见的图片格式" class="headerlink" title="常见的图片格式"></a>常见的图片格式</h3><p>图片是网页的外在资源，网页中的图片需要单独请求</p><p>jpg：色彩多，不能保存通明背景的图片，不支持动图 。 一般用来显示照片</p><p>gif：存储颜色较少只有256种，可以支持简单的通明背景，支持动图。  一般是颜色单一的图片，动图</p><p>png：具有jpg和gif格式的优点，颜色多，支持复杂透明，不支持动图，一般是颜色丰富，复杂透明图片（专为网页而生）</p><p>psd：ps的专用格式，可以直接在上面获取图片，文字，尺寸等信息</p><p>webp：谷歌新推出的专门为表示网页中的图片的一种的格式，它具备其他图片格式的所有优点，颜色丰富，支持复杂透明，支持动图，文件小（谷歌的压缩算法比较先进），缺点：兼容性不好，ie老的浏览器不支持，但是在移动端，谷歌，火狐可以用，老得浏览器可能会有兼容性问题，一般轻易不用，得经过一些适配手段处理</p><p>base64不是图片格式，但是可以使用base64对图片进行编码，可以将图片转换为字符，然后通过字符的形式引入图片（base64就是对数据进行加密），bsae64处理图片用的场景并不多，一般都是需要和网页一起加载的图片（重要图片）才会使用base64，图片加载就不需要单独请求数据了，图片加载的快，有base64在线转码网站可以直接使用</p><p>图片格式的选择，效果一样用小的，效果不一样用效果好的，同时还要考虑一下大小</p><h3 id="相对地址绝对地址"><a href="#相对地址绝对地址" class="headerlink" title="相对地址绝对地址"></a>相对地址绝对地址</h3><ul><li>相对地址：（推荐）</li></ul><p>​        相对文件自己出发的地址就是相对地址</p><p>​相对路径最多到盘符，不能跨盘</p><ul><li><p>绝对地址：(不推荐使用)</p><ul><li><p>本地址：从盘符出发到目标文件的路径  例如：windows系统下的 c:\user\a\b\cc.png</p></li><li><p>网络文件：完整的网络地址 <a href="http://www.baidu.com/">http://www.baidu.com</a>   <a href="https://image.baidu.com/search/index">https://image.baidu.com/search/index</a></p></li></ul></li></ul><p>​             </p><p>​            同级目录 .&#x2F;</p><p>​            上级目录 ..&#x2F;</p><p>​            下级目录 images&#x2F;banner.jpg</p><p>​             <em><strong>注意：</strong></em></p><p>​         windows系统下的路径地址是这样的：   c:\user\a\b\cc.png</p><p>​         文件地址引用是不能使用,因为你的项目可能在除windows外的操作系统运行</p><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><ul><li><p>作用：是给一堆数据添加列表的语义，也就是告诉浏览器这一堆数据是一个整体</p></li><li><p>案例：163新闻网站等，看列表使用情况</p></li><li><p>html中列表标签的分类 </p><ul><li><p>无序列表 （最多）unordered list</p></li><li><p>有序列表（最少）order list</p></li><li><p>定义列表（其次）definition list</p></li></ul></li></ul><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul><li>无序列表的作用：给数据添加列表语义，并且数据没有先后顺序</li><li>无序列表的语法：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>需要显示级的条目内容<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>需要显示级的条目内容<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>需要显示级的条目内容<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>li其实是list item的缩写，列表条目的意思</p><p><em><strong>注意：</strong></em></p><p>​         1. ul标签是用来给一堆数据添加列表语义的，而不是用来给他们添加小圆点样式</p><p>​         2. ul标签和li标签是一个整体，通常是结合起来使用，不会单独使用ul标签或li标签</p><p>​        3. ul标签和li标签是一个组合，也就是说在ul标签中只能 用li标签，不能出现其他标签，li标签中可以放其他标</p><p>签来丰富页面，li标签中还可以包含ul标签</p><ul><li><em><strong>快速生成无序列表的方式</strong></em></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span>*<span class="hljs-number">3</span><br>生成一对<span class="hljs-selector-tag">ul</span>标签，然后在<span class="hljs-selector-tag">ul</span>中再生成<span class="hljs-number">3</span>对<span class="hljs-selector-tag">li</span>标签<br><span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span>*<span class="hljs-number">3</span>&gt;<span class="hljs-selector-tag">h2</span>+<span class="hljs-selector-tag">li</span>*<span class="hljs-number">2</span><br>....<br></code></pre></td></tr></table></figure><ul><li><p>案例：….</p></li><li><p>无序列表的应用场景：</p></li></ul><p>​      新闻列表，商品列表，导航条。（看其他网站的案例）163网站</p><h4 id="有序列表："><a href="#有序列表：" class="headerlink" title="有序列表："></a>有序列表：</h4><p>给一堆数据添加列表语义，并且这堆数据中所有数据有先后顺序之分，其他用法同无序列表一致</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;ol&gt;</span><br>  <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;l/i&gt;</span><br><span class="hljs-section">&lt;/ol&gt;</span><br></code></pre></td></tr></table></figure><h4 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h4><ul><li><p>格式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;dl&gt;</span><br><span class="hljs-section">&lt;dt&gt;</span><span class="hljs-section">&lt;/dt&gt;</span><br><span class="hljs-section">&lt;dd&gt;</span><span class="hljs-section">&lt;/dd&gt;</span><br><span class="hljs-section">&lt;dt&gt;</span><span class="hljs-section">&lt;/dt&gt;</span><br><span class="hljs-section">&lt;dd&gt;</span><span class="hljs-section">&lt;/dd&gt;</span><br><span class="hljs-section">&lt;/dl&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>定义列表的做用</p><ul><li><p>给一堆数据添加列表语义</p></li><li><p>dt是definition title的缩写，所以dt是用来定义列表中的标题，dd是definition description的缩写，所以dd是对dt标题的描述</p></li><li><p>dl：定义列表。 </p><p>dt：定义标题。 </p><p>dd：定义说明、解释。对前⾯最近这个dt（标题）的解释。 </p></li><li><p>先通过dt标签定义列表中的所有标题，再通过dd标签给每个dt标签添加描述信息</p></li></ul></li><li><p>定义列表的应用场景：</p><ul><li>做网站尾部的相关信息（案例：京东官网）</li><li>做图文混排</li></ul></li><li><p>定义列表的注意点：</p><ul><li>同无序列表和有序列表一样，dl和dt&#x2F;dd是一套组合标签，所以不能单独使用</li><li>在dl中只能有dt和dd标签，不能有其他标签，但可以在dt标签和dd标签中添加其他标签</li><li>一个dt标签可没有dd标签或多个dd标签，但推荐一个dt标签只有一个dd标签作为描述</li></ul></li></ul><h3 id="table标签"><a href="#table标签" class="headerlink" title="table标签"></a>table标签</h3><ul><li><p>作用：是给一堆数据添加表格语义</p></li><li><p>其实表格是一个种数据的展现形式，当数据量非常大时，表格被认为是一种最清晰的展现形式</p></li><li><p>表格的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs /">&lt;table&gt;<br>&lt;tr&gt;<br>&lt;td&gt;单元格中的内容&lt;/td&gt;<br>&lt;/tr&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><p>一个table标签就表示一个表格</p><p>一个tr标签是表格里面的一行</p><p>一个td标签是行里的一个单元格</p><p>（案例：看exsle表格，写表格2行3列看效果）</p></li><li><p>注意点：table，tr，td标签是一套组合标签不可单独使用</p></li><li><p>表格标签的属性（了解，表格的样式后期会通过css设置）</p><ul><li><p>table标签有一个border属性，这个属性是用来设置表格的边框的宽度，其默认值为0，所以展现不出来表框</p></li><li><p>宽度和高度属性： width height</p><p>可以给table标签和td标签使用</p><ul><li>表格的宽高默认是由表格内容撑开的，也可以通过给table标签添加宽高属性设置</li><li>如果给td标签设置宽高属性，可以修改当前单元格的宽高(但不会影响table表格的总体宽高??单元格宽高大的话会撑大整个表格)</li></ul></li><li><p>水平对齐和垂直对齐属性（align）</p><p> 1.水平对齐属性：align：left&#x2F;center&#x2F;right</p><ul><li><p>水平对齐可以给table标签tr，td标签使用</p></li><li><p>table标签使用align属性，可以控制表格在页面水平方向的展示</p><p>tr标签使用align属性，可以控制该行内所有单元格的内容在水平方向的对齐方式</p><p>td标签使用align属性，可以控制该单元格内容在水平方向的对齐方式</p><p><strong>注意</strong>：如果tr和td所对应的同一单元格都设置了align属性，则采用td的属性值</p></li></ul><p>2.垂直对齐属性：valign：top&#x2F;center&#x2F;bottom</p><ul><li>只能给tr和td标签使用</li><li>给tr标签使用valign属性时，可以控制当前行中所有单元格的内容在垂直方向的对齐方式</li><li>给td标签使用valign属性时，可以控制当前单元格内容在垂直方向的对齐方式</li></ul><p><strong>注意</strong>：如果tr和td所对应的同一单元格都设置了valign属性，则采用td的属性值</p></li><li><p>外边距和内边距 ，只能给table标签使用</p><p>1.外边距 cellspacing</p><ul><li>单元格边框和单元格边框之间的距离就是外边距</li><li>外边距的默认值是2px</li></ul><p>2.内边距 cellpadding</p><ul><li>单元格边框和内容之间的距离就是内边距</li><li>内边距的默认值是1px</li></ul></li></ul></li><li><p>（案例，了解）细线表格：</p><p>通过设置table标签的cellapcing&#x3D;‘0’不能实现，要通过先给table标签设置bgcolor，再给tr标签设置bgcolor后再给table标签设置cellspacing&#x3D;‘1px’</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&#x27;1px&#x27;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&#x27;black&#x27;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#x27;800px&#x27;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;200px&#x27;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>水果表格<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&#x27;#ededed&#x27;</span> &gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>标题5<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>标题6<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&#x27;#FFF&#x27;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>橘子<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>橙子<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>芒果<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&#x27;#FFF&#x27;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>橘子<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>橙子<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>芒果<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&#x27;#FFF&#x27;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>橘子<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>橙子<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>芒果<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <br>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&#x27;#FFF&#x27;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span> <br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>橘子<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>橙子<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>芒果<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>表格的其他标签</p><ul><li><p>表格标题</p><p>在html中captoion标签是专门用来给表格设置标题的，标题写在caption标签中后标题会始终相对于表格剧中</p><p> <strong>注意</strong>：caption标签要写在table标签中，紧挨着table标签后 </p></li><li><p>标题单元格标签</p><p>th标签是用来给表格的每一列设置列的标题的，th标签中的内容是会默认加粗，居中的</p><p>（在表格标签中一共有两种单元格标签，分别的td和th，td是用来存储数据的单元格，th是）</p></li></ul></li><li><p>表格的结构</p><ul><li>由于表格数据比较复杂， 为了加强语义和对表格数据的管理，我们把表格中的数据分为了4分类：</li></ul><p>1.表格的标题 caption</p><p>2.表格的表头信息 thead</p><p>3.表格的主体信息 tbody</p><p>4.表格的页尾信息 tfoot 指定表格的附加信息</p><ul><li><p>表格的完整结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs /">&lt;table&gt;<br>  &lt;caption&gt;表格的标题&lt;/caption&gt;<br>  &lt;thead&gt;<br>  &lt;tr&gt;<br>    &lt;th&gt;&lt;/th&gt;<br>    &lt;th&gt;&lt;/th&gt;<br>  &lt;/tr&gt;<br>  &lt;thead&gt;<br>  &lt;tbody&gt;<br>  &lt;tr&gt;<br>  &lt;td&gt;&lt;/td&gt;<br>  &lt;td&gt;&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;/tbody&gt;<br>  &lt;tfoot&gt;<br>  &lt;tr&gt;<br>  &lt;td&gt;&lt;/td&gt;<br>  &lt;td&gt;&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;/tfoot&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>注意：</strong></p><ul><li><p>tbody标签如果没有写的话，浏览器会自动添加上，tr是tbody的子元素，不是table的子元素，table的子元素是caption thead  tbody  tfoot</p></li><li><p>thead和tfoot有名默认的高度，不会随着表格高度的变化而变化，后期可以通过css设置修改</p></li><li><p>css的vertical-align可以设置td单元格内的元素垂直方向的对齐，不单单只是文字的在td标签上的对齐</p><p>（vertical-align一般只是作用在行内元素，文本，行内块元素在垂直方向的对齐方式，但是对于td标签或者通过display：table-cell转化td单元格的标签可以通过vertical-align属性设置单元格内的元素的垂直对齐方式，可以给一个块级元素转化为diaplay：table-cell为单元格元素，就可以使用vertical-align：top｜middle｜bottom来设置其里面元素在垂直方向的对齐方式了，但是这种方式很少使用）</p><p>块级元素在父元素中：</p><p>​水平居中：margin：0 auto；</p><p>​    垂直居中：将父元素转化为单元格并设置vertical-align：middle       定位</p><p>行内元素在父元素中：</p><p>​水平居中：text-align：center</p><p>​垂直居中：line-height等height     vertical-align:middle并将父元素转换为单元格</p></li></ul></li></ul></li><li><p>合并单元格</p><ul><li><p>水平方向合并单元格</p><p>1.水平方向合并单元格使用colspan属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&#x27;2&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>是将该单元格再水平方向上看作多个个单元格，会导致水平方向上后面的单元格有多出来，需要将多余的单元格删除<br></code></pre></td></tr></table></figure></li><li><p>垂直方向合并单元格使用rowspan</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">roespan</span>=<span class="hljs-string">&#x27;2&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>是将该单元格在垂直方向上看做多个单元格，会导致垂直方向上后面的单元格多出来，根据需求将多余的单元格删除即可<br></code></pre></td></tr></table></figure></li><li><p><strong>注意：</strong>合并单元格都是向下或向后合并，不会向前或向上合并。</p></li><li><p>thead和tfoot的单元格不能做垂直方向上的合并</p></li></ul></li><li><p>案例练习</p></li></ul><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h3><p>案例：珍爱网注册表单 <a href="https://www.zhenai.com/n/registerInfo">https://www.zhenai.com/n/registerInfo</a></p><p>作用：fome表单用于为用户创建表单收集用户信息，并将信息上传至服务器</p><p>fome表单内包含了很多表单元素，元素即使标签，所有的表单元素在浏览器中都有默认的外观和功能</p><p>格式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;form&gt;</span><br><span class="hljs-section">&lt;表单元素&gt;</span><span class="hljs-section">&lt;/表单元素&gt;</span><br><span class="hljs-section">&lt;/form&gt;</span><br></code></pre></td></tr></table></figure><p>（fieldset标签可以给表单设置一个边框，legend标签给表单设置标题）不用讲，了解即可，工作中用不到</p><h4 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h4><p><a href="https://www.cnblogs.com/archermeng/p/7537583.html">https://www.cnblogs.com/archermeng/p/7537583.html</a></p><p>input标签自带的type属性可以通过不同的属性值使输入字段拥有不同的表现形式。</p><p>明文输入框 密码输入框 单选框 多选框 普通按钮 图片按钮 重置按钮 提交按钮 隐藏域</p><ul><li><p>value</p><p>除了按钮类型的input标签外，其他的input标签都可以通过value属性来设置提交到服务器的值，name属性用来设置提交到服务器的键值名</p><p>按钮类型的input标签的value属性只是用来设置按钮的名字</p><p>可以通过给文本框和密码框类型的input设置vlue来设置<strong>默认值</strong></p></li><li><p>name</p></li><li><p>checked 单选框 多选框设置默认选中</p></li><li><p>selected 给下拉菜单设置默认选中</p></li><li><p>Placeholder  占位符 用来给输入框设置提示信息</p></li><li><p>autofocus 自动聚焦</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http:yaopai.com&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 文本输入框  明文输入框 --&gt;</span><br>    账号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 密码输入框 --&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 给输入框设置默认的值 --&gt;</span><br>    账号：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;默认值1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;默认值2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 单选框 </span><br><span class="hljs-comment">        注意：1:单选框在默认的情况下是不会互斥的，需要给每一个单选框设置一个name属性，摒并且属性值要相同，这样他们算是一组单选框才会发生互斥</span><br><span class="hljs-comment">            2:可以给单选框设置默认选择中的状态 checked=‘checked’</span><br><span class="hljs-comment">            在html中如果属性名和属性值一样可以只写属性名（不推荐）</span><br><span class="hljs-comment">    --&gt;</span><br>    你喜欢吃什么：<br>    苹果：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;food&#x27;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">‘checked’</span>&gt;</span><br>    香蕉：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;food&#x27;</span>&gt;</span><br>    大鸭梨：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;food&#x27;</span>&gt;</span><br>    芒果：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;food&#x27;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 多选框  默认选择中的状态 checked=‘checked’ 多选框可以默认选中多个选项--&gt;</span><br>    天上有什么：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">‘checked’</span>&gt;</span> 白云<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> 太阳<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">‘checked’</span>&gt;</span> 月亮<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> 星星 <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><br><br>   <span class="hljs-comment">&lt;!-- input可以设置为普通按钮  type=&quot;button&quot; 通过value属性给按钮设置标题 配合js做一些操作--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;普通按钮&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        input可以设置为图片按钮  type=&quot;image&quot;  src设置获取图片的路径 配合js进行一些操作   </span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/fengcai-main.png&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;122&#x27;)&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">       input重置按钮  重置按钮有默认的标题 可以通过value修改标题</span><br><span class="hljs-comment">        重置按钮的作用是将已经填写过的表单信息恢复到最初值</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;清空&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">       input提交按钮 作用是将表单元素输入的信息提交到服务器</span><br><span class="hljs-comment">       必须的条件：</span><br><span class="hljs-comment">       1：form表签的action属性z指定需要提交到的服务器地址</span><br><span class="hljs-comment">       2:给要提交的表单元素设置name属性</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- input隐藏域  隐藏域在页面上不显示，但是提交表单时会将隐藏域的信息悄悄地提交到服务器--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hidden66&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;hidden&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>h5中新增的input类型 了解即可，因为大多浏览器有兼容性问题 </p><p>datalist给输入框绑定带选列表 了解</p><p>邮箱 url date日期 颜色 数字 等</p><p>掌握：number search tel</p><h3 id="button按钮"><a href="#button按钮" class="headerlink" title="button按钮"></a>button按钮</h3><p>格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>展示出来的内容，可以是图片，文字<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>button按钮的标题是直接在标签体的位置书写的，不用value属性设置</p><p>取值：button｜reset｜submit（默认值）</p><h2 id="lable标签"><a href="#lable标签" class="headerlink" title="lable标签"></a>lable标签</h2><p>想要在点击输入框的对应文字时使输入框聚焦，需要将文字与输入框使用lable标签进行绑定</p><p>绑定方式：</p><pre><code class="hljs"> 1:给输入设置id属性</code></pre><p>​ 2:将文字使用lable标签包裹，被给lable标签设置for属性，属性值为输入框的id值</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;label <span class="hljs-attribute">for</span>=<span class="hljs-string">&quot;zw&quot;</span>&gt;你好&lt;/label&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;zw&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="如何给输入框绑定待选项列表"><a href="#如何给输入框绑定待选项列表" class="headerlink" title="如何给输入框绑定待选项列表"></a>如何给输入框绑定待选项列表</h3><p>（许多浏览器都不支持，所以仅了解，可以不讲）</p><p>格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;所对应的datalist标签的id名&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id名&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>待选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>待选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>待选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>待选项4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实现步骤： 1 写一个标签</p><p>​2 写一个datalist 列表</p><p>​3 给datalist 列表标签添加一个id </p><p>​4 给输入框添加一个list属性，将datalist 的id对应的属性值赋值给list属性即可</p><h2 id="Select-标签-下拉菜单"><a href="#Select-标签-下拉菜单" class="headerlink" title="Select 标签 下拉菜单"></a>Select 标签 下拉菜单</h2><ul><li><p>作用：定义下拉菜单</p></li><li><p>语法</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> <span class="hljs-type">name</span>=&quot;提交表单时提交键名&quot;&gt;<br>&lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=&quot;提交表单时提交的键值&quot;&gt;下拉菜单的选项展示出来&lt;/<span class="hljs-keyword">option</span>&gt;<br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>注意：下拉菜单是不能输入的，但是可以通过选项进行选择</li></ul><p>​可以通过给option标签通过selected&#x3D;”selected”设置默认选中</p><p>​下拉菜单选项分组：</p><p>​将要分为一组的option标签用optgroup标签包裹，并给optgroup标签设置label属性指定组名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> <span class="hljs-type">name</span>=&quot;提交表单时提交键名&quot;&gt;<br>&lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=&quot;提交表单时提交的键值&quot;&gt;下拉菜单的选项 页面展示出来的值&lt;/<span class="hljs-keyword">option</span>&gt;<br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;提交表单时提交键名&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;组名1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交表单时提交的键值&quot;</span>&gt;</span>下拉菜单的选项 页面展示出来的值<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交表单时提交的键值&quot;</span>&gt;</span>下拉菜单的选项 页面展示出来的值<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交表单时提交的键值&quot;</span>&gt;</span>下拉菜单的选项 页面展示出来的值<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;组名2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交表单时提交的键值&quot;</span>&gt;</span>下拉菜单的选项 页面展示出来的值<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交表单时提交的键值&quot;</span>&gt;</span>下拉菜单的选项 页面展示出来的值<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交表单时提交的键值&quot;</span>&gt;</span>下拉菜单的选项 页面展示出来的值<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="textarer-多行文本域"><a href="#textarer-多行文本域" class="headerlink" title="textarer 多行文本域"></a>textarer 多行文本域</h2><p>作用：input输入框只能输入单行文字，textarea定义一个多行输入框</p><p>语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;textarea&gt;</span><br><span class="hljs-section">&lt;/textarea&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li><p>textarear有默认的宽度和高度，里面的文字可以无限换行</p></li><li><p>可以通过rows和cols指定文本域显示的行数和列数，但而然可以无限输入</p></li><li><p>默认情况下可以通过手动缩放文本框，也可以通过css进行设置其是否可以拉伸</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">textarea</span>&#123;<br><span class="hljs-attribute">resize</span>:none;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="div和span"><a href="#div和span" class="headerlink" title="div和span"></a>div和span</h3><p>div：把标签中的内容作为⼀个块⼉来对待(division)。必须单独占据⼀⾏。 </p><p>div标签是⼀个容器级标签，⾥⾯什么都能放，甚⾄可以放div⾃⼰。 </p><p>span：是⼀个⽂本级的标签。 </p><p>就是说，span⾥⾯只能放置⽂字、图⽚、表单元素。 span⾥⾯不能放p、h、ul、dl、ol、div等标签。</p><h2 id="h5新增标签"><a href="#h5新增标签" class="headerlink" title="h5新增标签"></a>h5新增标签</h2><h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><p>作用：在页面引入视屏</p><p>格式1</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;音频文件的路径&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>格式2   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;video&gt;<br>  &lt;<span class="hljs-built_in">source</span> src=<span class="hljs-string">&quot;xxx.webm&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video/webm&quot;</span>&gt;&lt;/source&gt;<br> &lt;<span class="hljs-built_in">source</span> src=<span class="hljs-string">&quot;xxx.mp4&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;&lt;/source&gt;<br>  &lt;<span class="hljs-built_in">source</span> src=<span class="hljs-string">&quot;xxx.ogg&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video/ogg&quot;</span>&gt;&lt;/source&gt;<br>  （embed可以不讲）<br>    &lt;embed&gt;&lt;/embed&gt; 可以在<span class="hljs-built_in">source</span>标签的最后使用embed的标签来处理ie8的兼容性问题，当前面的<span class="hljs-built_in">source</span>中的文件都不支持的时候就会忽略<span class="hljs-built_in">source</span>使用该embed标签了<br>&lt;/video&gt;<br></code></pre></td></tr></table></figure><p>video标签自带的属性，在两种格式都适用</p><ul><li>src&#x3D;”..”   设置引入的视频地址</li><li>width </li><li>height  宽高属性同img标签一样，如果宽高不是按照原视频比例设置的会使视屏变形</li><li>autoplay&#x3D;”autoplay”  设置视频自动播放，在很多浏览器（chrom，火狐）视频和音频的自动播放禁用了（ie没有禁用自动播放，没有考虑用户体验的问题，可能会吓用户一跳），在第一次打开网页没有点击播放时就算设置了autoplay属性也不会自动播放，但是用户点击过播放后，再次进入网页就会自动播放了，解决视频自动播放的方式是同时设置muted&#x3D;”muted”，静音播放，音频需要使用js解决</li><li>controls&#x3D;”controls”  视频显示控制条 属性可以简写 音视频文件引入到网页默认是不让用户自己操作的，要通过controls属性显示控制条</li><li>poster&#x3D;”占位图地址”  视频在播放前的展位图</li><li>preload&#x3D;”preload”  设置视频提前加载 preload&#x3D;”none”   不预先加载视频，注意，如果设置了自动播放会忽略此属性</li><li>loop&#x3D;”loop” 视频循环播放 多用于广告视频</li><li>muted&#x3D;”muted” 视频静音</li></ul><p>video标签的第二种格式是为了解决浏览器的兼容性问题，目前video标签支持的有三种视频格式，没有哪个格式是所有浏览器中兼容的，（mp4 格式的兼容性相对好一些）所以通过source标签将这三种格式的视频都指定给浏览器。浏览器依次查找自己可以兼容的视频格式来播放</p><p>虽然video标签的第二种格式解决了视频在浏览器的兼容性问题，但是有一些浏览器还是不能兼容html5的标签，所以视频在那些浏览器中还是无法播放，我们可以通过js框架胡桃木lmedia来解决这个问题</p><h3 id="audio音频标签"><a href="#audio音频标签" class="headerlink" title="audio音频标签"></a>audio音频标签</h3><p>ie8不支持音频（视频？？）标签，且播放器在不同浏览器中显示的样子是不一样的，需要js来使样式统一</p><p>可以通过embed标签在页面中引入音视频文件，Ie8也支持embed标签，但是该标签不好用</p><p>同video标签一样也是因为音频格式在浏览器中的兼容性问题（不同的浏览器支持的音视频的格式不同），音频标签也有两种格式，video标签的属性除了width&#x2F;height&#x2F;poster外在audio标签上都可以使用且功能一样，mp3格式兼容性相对好一些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"> 格式1:<br>&lt;audio src=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;/audio&gt;<br><br>格式2:  通过第二种格式可以在不支持音频标签的浏览器中显示提示文字，音频标签会被忽略不显示，但是文字不会被忽略<br>&lt;audio&gt;<br> 您的浏览器不支持音频标签，请升级浏览器<br>  &lt;<span class="hljs-built_in">source</span> src=<span class="hljs-string">&quot;xxx.wav&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video/mav&quot;</span>&gt;&lt;/source&gt;<br> &lt;<span class="hljs-built_in">source</span> src=<span class="hljs-string">&quot;xxx.mp3&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video/mp3&quot;</span>&gt;&lt;/source&gt;<br>  &lt;<span class="hljs-built_in">source</span> src=<span class="hljs-string">&quot;xxx.ogg&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;video/ogg&quot;</span>&gt;&lt;/source&gt;<br>  &lt;embed&gt;&lt;/embed&gt; 可以在<span class="hljs-built_in">source</span>标签的最用使用embed的标签来处理ie8的兼容性问题，当前面的<span class="hljs-built_in">source</span>中的文件都不支持的时候就会忽略<span class="hljs-built_in">source</span>使用该embed标签了<br>&lt;/audio&gt;<br><br></code></pre></td></tr></table></figure><h4 id="内敛框架"><a href="#内敛框架" class="headerlink" title="内敛框架"></a>内敛框架</h4><p>iframe标签（使用场景不多）</p><p>作用：在当前网页中引入一个其他页面</p><p>frameborder 指定内敛框架的表框 取值0（没有边框）或者1 （有边框）</p><p>使用内敛框架实际就像一个标签一样，我们的页面还是正常书写，没有什么影响，但是内敛框引入的网页不会被搜索引擎检索到</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript</title>
    <link href="/smiling-sheep.github.io/2022/07/12/TypeScript/"/>
    <url>/smiling-sheep.github.io/2022/07/12/TypeScript/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是TypeScript"><a href="#1-什么是TypeScript" class="headerlink" title="1. 什么是TypeScript"></a>1. 什么是TypeScript</h1><p>​TypeScript入门教程： <a href="http://ts.xcatliu.com/basics/">http://ts.xcatliu.com/basics/</a></p><ul><li><p>TypeScript是一种添加了类型系统的 JavaScript，适用于任何规模的项目</p></li><li><p>TypeScript 是静态类型</p><blockquote><p>动态类型是指在运行时才会进行类型检查</p><p>静态类型是指编译阶段就能确定每个变量的类型</p></blockquote></li></ul><h1 id="2-安装、编译"><a href="#2-安装、编译" class="headerlink" title="2. 安装、编译"></a>2. 安装、编译</h1><ul><li><p>使用typescript编译</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nodejs">npm install -g typescript<br></code></pre></td></tr></table></figure></li><li><p>配置tsconfig.json</p><blockquote><p>该文件一定保存在项目根目录，是编译ts文件的编译选项</p></blockquote>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">tsc -h  <span class="hljs-regexp">//</span>查看帮助信息<br>tsc --init <span class="hljs-regexp">//</span>在根目录生成tsconfig.json<br></code></pre></td></tr></table></figure><p>  修改tsconfig.json</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;./dist&quot;</span>,   <span class="hljs-regexp">//</span>第<span class="hljs-number">52</span>行，编译后的js存储在dist文件夹<br></code></pre></td></tr></table></figure><p>  执行编译（即使编译出错也会生成js文件）</p><blockquote><p>！！！特别注意，后面不要指定文件</p></blockquote>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tsc     <span class="hljs-regexp">//</span>会编译所有ts文件为js文件 <br></code></pre></td></tr></table></figure></li><li><p>使用ts-node直接编译并执行，</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">npm i ts-<span class="hljs-keyword">node</span> <span class="hljs-title">-g</span><br>npm i @types/<span class="hljs-keyword">node</span> <span class="hljs-title">-g</span><br><br>//运行<br>ts-<span class="hljs-keyword">node</span> <span class="hljs-title">hello</span>.ts<br></code></pre></td></tr></table></figure></li></ul><h1 id="3-原始数据类型"><a href="#3-原始数据类型" class="headerlink" title="3. 原始数据类型"></a>3. 原始数据类型</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br>&#123;<br>    <span class="hljs-comment">// 字符串</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;5&quot;</span><br><br>    <span class="hljs-comment">//数值</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">6</span><br><br>    <span class="hljs-comment">//布尔值</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">flag</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">// null</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">userInfo</span>: <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//undefined</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">data</span>: <span class="hljs-literal">undefined</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-任意值"><a href="#4-任意值" class="headerlink" title="4. 任意值"></a>4. 任意值</h1><ul><li><p>任意值（Any）用来表示允许赋值为任意类型。</p></li><li><p>在任意值上访问任何属性都是允许的</p></li><li><p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">let <span class="hljs-keyword">a</span>: <span class="hljs-keyword">any</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">a</span> = <span class="hljs-string">&quot;b&quot;</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">a</span>.<span class="hljs-keyword">a</span>) <span class="hljs-comment"> //undefined</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="5-类型推论"><a href="#5-类型推论" class="headerlink" title="5. 类型推论"></a>5. 类型推论</h1><p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let a <span class="hljs-operator">=</span> <span class="hljs-string">&quot;7&quot;</span><br><span class="hljs-attribute">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span> //报错<br></code></pre></td></tr></table></figure><p>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">let</span> a;<br><span class="hljs-attribute">a</span> = <span class="hljs-number">7</span><br>a = <span class="hljs-string">&#x27;c&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="6-联合类型"><a href="#6-联合类型" class="headerlink" title="6. 联合类型"></a>6. 联合类型</h1><p>联合类型（Union Types）表示取值可以为多种类型中的一种。</p><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法</p><p>下方代码编译报错：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span>(something: string | number): number &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">something.length</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let myFavoriteNumber: string | <span class="hljs-built_in">number</span>;<br>myFavoriteNumber = <span class="hljs-string">&#x27;seven&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myFavoriteNumber.<span class="hljs-built_in">length</span>); <span class="hljs-comment">// 5</span><br>myFavoriteNumber = <span class="hljs-number">7</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myFavoriteNumber.<span class="hljs-built_in">length</span>); <span class="hljs-comment">// 编译时报错</span><br></code></pre></td></tr></table></figure><h1 id="7-对象的类型——接口"><a href="#7-对象的类型——接口" class="headerlink" title="7. 对象的类型——接口"></a>7. 对象的类型——接口</h1><p>在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。</p><p>用于对「对象的形状（Shape）」进行描述。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-punctuation">&#123;</span><br>   interface Cat<span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">       nickname:</span> string,<br><span class="hljs-symbol">       age:</span>number<br>   <span class="hljs-punctuation">&#125;</span><br><br>   let cat : C<span class="hljs-attr">at</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">       nickname:</span> <span class="hljs-string">&#x27;a&#x27;</span>,<br><span class="hljs-symbol">       age:</span> <span class="hljs-number">7</span><br>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>赋值的时候，变量的形状必须和接口的形状保持一致</p></li><li><p>定义的变量比接口少了一些属性是不允许的</p></li><li><p>多一些属性也是不允许的</p></li><li><p>可选属性</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Cat</span>&#123;<br>    nickname: <span class="hljs-built_in">string</span>,<br>    age:number,<br>    skin?: <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>只读属性</p><p>希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性：</p><p><strong>只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xquery">interface Person &#123;<br>    readonly<span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> number</span>;<br>   <span class="hljs-built_in"> name</span>:<span class="hljs-built_in"> string</span>;<br>    age?:<span class="hljs-built_in"> number</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> tom: Person = &#123;<br>   <span class="hljs-built_in"> id</span>: <span class="hljs-number">89757</span>,<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>,<br>    gender: <span class="hljs-string">&#x27;male&#x27;</span><br>&#125;;<br><br>tom<span class="hljs-built_in">.id</span> = <span class="hljs-number">9527</span>;<br></code></pre></td></tr></table></figure></li></ul><h1 id="8-数组类型"><a href="#8-数组类型" class="headerlink" title="8. 数组类型"></a>8. 数组类型</h1><p>在 TypeScript 中，数组类型有多种定义方式，比较灵活。</p><ul><li><p>使用「类型 + 方括号」来表示数组</p><p>数组的项中<strong>不允许</strong>出现其他的类型</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">let fibonacci: number<span class="hljs-comment">[]</span> = <span class="hljs-comment">[1, 1, 2, 3, 5]</span>;<br></code></pre></td></tr></table></figure></li><li><p>数组泛型</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&#123;<br>   <span class="hljs-keyword">let</span> userList : <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">string</span>&gt; = <span class="hljs-meta">[</span><span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-meta">]</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用接口表示数组</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&#123;<br>   <span class="hljs-keyword">interface</span> <span class="hljs-title">IUser</span> &#123;<br>       [<span class="hljs-meta">index:number</span>]: <span class="hljs-built_in">string</span><br>   &#125;<br>   <span class="hljs-keyword">let</span> userList :IUser  = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>any 在数组中的应用</p><p>一个比较常见的做法是，用 <code>any</code> 表示数组中允许出现任意类型</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>   let num: any[] = [<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="9-函数的类型"><a href="#9-函数的类型" class="headerlink" title="9. 函数的类型"></a>9. 函数的类型</h1><p>​一个函数有输入和输出，要在 TypeScript 中对其进行约束</p><h2 id="9-1-函数声明"><a href="#9-1-函数声明" class="headerlink" title="9.1 函数声明"></a>9.1 函数声明</h2><p>​需要把输入和输出都考虑到，其中函数声明的类型定义较简单</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>    <span class="hljs-comment">// 没有返回值</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x + y)<br>    &#125;<br>    <span class="hljs-title function_">fun1</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment">// 有返回值</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> x + y<br>    &#125;<br>    <span class="hljs-title function_">fun2</span>(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>输入多余的（或者少于要求的）参数，是不被允许的</p></blockquote><h2 id="9-2-函数表达式"><a href="#9-2-函数表达式" class="headerlink" title="9.2 函数表达式"></a>9.2 函数表达式</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>    <span class="hljs-comment">//myFun1通过类型推断为右边函数的类型</span><br>    <span class="hljs-keyword">let</span> myFun1 = <span class="hljs-keyword">function</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span>,y:<span class="hljs-built_in">number</span></span>):<span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> x + y<br>    &#125;<br><br>    <span class="hljs-comment">//手动定义myFun2的函数类型</span><br>    <span class="hljs-keyword">let</span> myFun2 : <span class="hljs-function">(<span class="hljs-params">x: <span class="hljs-built_in">string</span>,y:<span class="hljs-built_in">number</span></span>)=&gt;</span><span class="hljs-built_in">string</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span>,y:<span class="hljs-built_in">number</span></span>):<span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> x + y<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在 TypeScript 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p></blockquote><h2 id="9-3-用接口定义函数的形状"><a href="#9-3-用接口定义函数的形状" class="headerlink" title="9.3 用接口定义函数的形状"></a>9.3 用接口定义函数的形状</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SearchFunc</span> </span>&#123;<br>    (source: <span class="hljs-keyword">string</span>, subString: <span class="hljs-keyword">string</span>): <span class="hljs-keyword">boolean</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> mySearch: SearchFunc;<br>mySearch = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(source: <span class="hljs-keyword">string</span>, subString: <span class="hljs-keyword">string</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> source.search(subString) !== <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-4-可选参数"><a href="#9-4-可选参数" class="headerlink" title="9.4 可选参数"></a>9.4 可选参数</h2><p>与接口中的可选属性类似，我们用 <code>?</code> 表示可选的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br>    <span class="hljs-keyword">let</span> myFun = <span class="hljs-keyword">function</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span>,y?:<span class="hljs-built_in">number</span></span>):<span class="hljs-built_in">string</span>&#123;<br>        <span class="hljs-keyword">return</span> x + y<br>    &#125;<br>    <span class="hljs-title function_">myFun</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> 可选参数必须接在必需参数后面</p></blockquote><h2 id="9-5-参数默认值"><a href="#9-5-参数默认值" class="headerlink" title="9.5 参数默认值"></a>9.5 参数默认值</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildName</span>(<span class="hljs-params">firstName: <span class="hljs-keyword">string</span>, lastName: <span class="hljs-keyword">string</span> = <span class="hljs-string">&#x27;Cat&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> firstName + <span class="hljs-string">&#x27; &#x27;</span> + lastName;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="９-6-函数重载"><a href="#９-6-函数重载" class="headerlink" title="９.6 函数重载"></a>９.6 函数重载</h2><p>我们重复定义了多次函数 <code>reverse</code>，前几次都是函数定义，最后一次是函数实现</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&#123;<br>    <span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span>;<br>    <span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> string</span>;<br>    <span class="hljs-keyword">function</span><span class="hljs-built_in"> reverse</span>(x:<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span>):<span class="hljs-built_in"> number</span> |<span class="hljs-built_in"> string</span> | void &#123;<br>        <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> Number(x.toString().split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof x === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> x.split(<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-built_in">.reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="10-类型断言"><a href="#10-类型断言" class="headerlink" title="10. 类型断言"></a>10. 类型断言</h1><p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp">&#123;<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title">Cat</span>&#123;<br>        name: <span class="hljs-built_in">string</span>,<br>        run(): <span class="hljs-keyword">void</span><br>    &#125;<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title">Fish</span>&#123;<br>        name: <span class="hljs-built_in">string</span>,<br>        swim(): <span class="hljs-keyword">void</span><br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">getName</span>(<span class="hljs-params">animal: Cat | Fish</span>)</span>&#123;<br>    <br>    <span class="hljs-comment">//报错，因为只能访问Cat和Fish的共同属性</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> animal.swim === <span class="hljs-string">&#x27;function&#x27;</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型特有的属性或方法</p><p>此时可以使用类型断言，将 <code>animal</code> 断言成 <code>Fish</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cat</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>  <span class="hljs-title function_">run</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Fish</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>  <span class="hljs-title function_">swim</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">const</span> getAnimalName = <span class="hljs-keyword">function</span> (<span class="hljs-params">animal: Cat | Fish</span>): <span class="hljs-built_in">string</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (animal <span class="hljs-keyword">as</span> <span class="hljs-title class_">Cat</span>).<span class="hljs-property">run</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-comment">// animal.run() //报错</span><br>    (animal <span class="hljs-keyword">as</span> <span class="hljs-title class_">Cat</span>).<span class="hljs-title function_">run</span>()<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    (animal <span class="hljs-keyword">as</span> <span class="hljs-title class_">Fish</span>).<span class="hljs-title function_">swim</span>()<br>  &#125;<br>  <span class="hljs-keyword">return</span> animal.<span class="hljs-property">name</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">cat</span>: <span class="hljs-title class_">Cat</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lucy&#x27;</span>,<br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;run&#x27;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">fish</span>: <span class="hljs-title class_">Fish</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;nancy&#x27;</span>,<br>  <span class="hljs-title function_">swim</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;swim&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// let catname:string = getAnimalName(cat)</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">animalname</span>: <span class="hljs-built_in">string</span> = <span class="hljs-title function_">getAnimalName</span>(fish)<br></code></pre></td></tr></table></figure><h1 id="11-内置对象"><a href="#11-内置对象" class="headerlink" title="11. 内置对象"></a>11. 内置对象</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ----------------------------ECMAScript 的内置对象</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: <span class="hljs-title class_">Boolean</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-attr">e</span>: <span class="hljs-title class_">Error</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Error occurred&#x27;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-attr">d</span>: <span class="hljs-title class_">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">let</span> <span class="hljs-attr">r</span>: <span class="hljs-title class_">RegExp</span> = <span class="hljs-regexp">/[a-z]/</span>;<br><br><br><span class="hljs-comment">//-------------------------DOM 和 BOM 的内置对象</span><br><span class="hljs-comment">// DOM 和 BOM 提供的内置对象有：</span><br><br><span class="hljs-comment">// Document、HTMLElement、Event、NodeList 等。</span><br><br><span class="hljs-comment">// TypeScript 中会经常用到这些类型：</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">body</span>: <span class="hljs-title class_">HTMLElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">div</span>: <span class="hljs-title class_">HTMLElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">allDiv</span>: <span class="hljs-title class_">NodeList</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e: MouseEvent</span>) &#123;<br>  <span class="hljs-comment">// Do something</span><br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="12-类型别名"><a href="#12-类型别名" class="headerlink" title="12. 类型别名"></a>12. 类型别名</h1><p>类型别名用来给一个类型起个新名字</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">Name </span>= string;<br><span class="hljs-keyword">type</span> <span class="hljs-type">NameResolver </span>= () =&gt; string;<br><span class="hljs-keyword">type</span> <span class="hljs-type">NameOrResolver </span>= Name | NameResolver;<br><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(n: NameOrResolver): Name &#123;<br>    if (typeof n === &#x27;string&#x27;) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">n</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> n();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="13-字符串字面量类型"><a href="#13-字符串字面量类型" class="headerlink" title="13. 字符串字面量类型"></a>13. 字符串字面量类型</h1><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">type EventNames = <span class="hljs-string">&#x27;click&#x27;</span> | <span class="hljs-string">&#x27;scroll&#x27;</span> | <span class="hljs-string">&#x27;mousemove&#x27;</span>;<br><span class="hljs-keyword">function</span> handleEvent(ele: Element, event: EventNames) &#123;<br>    <span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something<br>&#125;<br><br>handleEvent(document.getElementById(<span class="hljs-string">&#x27;hello&#x27;</span>), <span class="hljs-string">&#x27;scroll&#x27;</span>);  <span class="hljs-regexp">//</span> 没问题<br>handleEvent(document.getElementById(<span class="hljs-string">&#x27;world&#x27;</span>), <span class="hljs-string">&#x27;dblclick&#x27;</span>); <span class="hljs-regexp">//</span> 报错，event 不能为 <span class="hljs-string">&#x27;dblclick&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="14-元组"><a href="#14-元组" class="headerlink" title="14. 元组"></a>14. 元组</h1><p>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">tom</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">25</span>];<br></code></pre></td></tr></table></figure><h1 id="15-枚举"><a href="#15-枚举" class="headerlink" title="15. 枚举"></a>15. 枚举</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#123;<br>    enum Direct &#123;Up,<span class="hljs-built_in">Right</span>,Down,<span class="hljs-built_in">Left</span>&#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Direct.Up); <span class="hljs-comment">//0</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Direct[<span class="hljs-number">0</span>]); <span class="hljs-comment">//&#x27;Up&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="16-类"><a href="#16-类" class="headerlink" title="16. 类"></a>16. 类</h1><h2 id="16-1-属性和方法"><a href="#16-1-属性和方法" class="headerlink" title="16.1 属性和方法"></a>16.1 属性和方法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> name：<span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`My name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;Jack&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">sayHi</span>()); <span class="hljs-comment">// My name is Jack</span><br></code></pre></td></tr></table></figure><h2 id="16-2-静态方法"><a href="#16-2-静态方法" class="headerlink" title="16.2 静态方法"></a>16.2 静态方法</h2><p>使用 <code>static</code> 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Animal &#123;<br>  static is<span class="hljs-constructor">Animal(<span class="hljs-params">a</span>)</span> &#123;<br>    return a instanceof Animal;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Animal(&#x27;Jack&#x27;)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Animal</span>.</span></span>is<span class="hljs-constructor">Animal(<span class="hljs-params">a</span>)</span>; <span class="hljs-comment">// true</span><br>a.is<span class="hljs-constructor">Animal(<span class="hljs-params">a</span>)</span>; <span class="hljs-comment">// TypeError: a.isAnimal is not a function</span><br></code></pre></td></tr></table></figure><h2 id="16-2-public-private-和-protected"><a href="#16-2-public-private-和-protected" class="headerlink" title="16.2 public private 和 protected"></a>16.2 public private 和 protected</h2><ul><li><p><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Animal &#123;<br>  <span class="hljs-built_in">public</span> <span class="hljs-type">name</span>;<br>  <span class="hljs-built_in">public</span> constructor(<span class="hljs-type">name</span>) &#123;<br>    this.name = <span class="hljs-type">name</span>;<br>  &#125;<br>&#125;<br><br>let a = <span class="hljs-built_in">new</span> Animal(<span class="hljs-string">&#x27;Jack&#x27;</span>);<br>console.log(a.name); // Jack<br>a.name = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br>console.log(a.name); // Tom<br></code></pre></td></tr></table></figure></li><li><p><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问</p><p>使用 <code>private</code> 修饰的属性或方法，在子类中也是不允许访问的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-keyword">private</span> name;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br>  <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;Jack&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">name</span>);<br>a.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Tom&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-keyword">protected</span> name;<br>  public constructor(name) &#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  constructor(name) &#123;<br>    <span class="hljs-keyword">super</span>(name);<br>    console.log(<span class="hljs-keyword">this</span>.name);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="17-类与接口"><a href="#17-类与接口" class="headerlink" title="17. 类与接口"></a>17. 类与接口</h1><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Alarm</span> </span>&#123;<br>    alert(): <span class="hljs-type">void</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Door</span> </span>&#123;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityDoor</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Door</span></span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Alarm</span></span> </span>&#123;<br>    alert() &#123;<br>        console.log(<span class="hljs-string">&#x27;SecurityDoor alert&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Alarm</span></span> </span>&#123;<br>    alert() &#123;<br>        console.log(<span class="hljs-string">&#x27;Car alert&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="18-泛型"><a href="#18-泛型" class="headerlink" title="18. 泛型"></a>18. 泛型</h1><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性</p><p>这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的类型</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> create<span class="hljs-constructor">Array(<span class="hljs-params">length</span>: <span class="hljs-params">number</span>, <span class="hljs-params">value</span>: <span class="hljs-params">any</span>)</span>: Array&lt;any&gt; &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-literal">[]</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        result<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = value;<br>    &#125;<br>    return result;<br>&#125;<br><br>create<span class="hljs-constructor">Array(3, &#x27;<span class="hljs-params">x</span>&#x27;)</span>; <span class="hljs-comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span><br></code></pre></td></tr></table></figure><p>我们预期的是，数组中每一项都应该是输入的 <code>value</code> 的类型。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">createArray&lt;T&gt;</span>(length: number, value: T): Array&lt;T&gt; &#123;<br>    let result: T[] = [];<br>    for (let i = 0; i &lt; length; i++) &#123;<br>        result[i] = value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">result</span>;<br>&#125;<br><br>createArray&lt;string&gt;(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;x&#x27;</span>); // [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>]<br><br>createArray&lt;number&gt;(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;x&#x27;</span>); // [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>]<br></code></pre></td></tr></table></figure><blockquote><p> 在函数名后添加了 <code>&lt;T&gt;</code>，其中 <code>T</code> 用来指代任意输入的类型，在后面的输入 <code>value: T</code> 和输出 <code>Array&lt;T&gt;</code> 中即可使用了。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery</title>
    <link href="/smiling-sheep.github.io/2022/06/24/jq/"/>
    <url>/smiling-sheep.github.io/2022/06/24/jq/</url>
    
    <content type="html"><![CDATA[<p>插件 库 和框架的区别</p><ul><li><p>插件： 实现某一个单一类的功能 swiper</p></li><li><p>库：封装了各种的功能和你需要的工具</p><p>(jquery最初就是封装了DOM操作的选择器，jquery比document.querySelector()和jquery比document.querySelectorAll()早了9年，最初的DOM操作获取元素只有 byId byName byTagName，jquery的产生大大提告了开发效率)</p></li><li><p>框架：有自己的完整的生态系统</p></li></ul><h1 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h1><h2 id="jq了解"><a href="#jq了解" class="headerlink" title="jq了解"></a>jq了解</h2><ul><li><p>前端方法库</p><p>主要封装了各种dom操作</p></li><li><p>优点：</p><ul><li>选择器</li><li>链式编程</li><li>隐式迭代</li></ul></li><li><p>特点：</p><ul><li>号称全兼容，但是jq 2.0以前版本是全兼容各种版本的ie浏览器，但是2.0以后逐步的不再兼容ie低版本的浏览器</li></ul></li><li><p>当你引入一个jquery.js或者jquery.min.js以后会向全局暴露两个变量名:   jQuery   和 $</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($);  <span class="hljs-comment">//函数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jQuery); <span class="hljs-comment">//函数</span><br></code></pre></td></tr></table></figure><p>学习jquery从调用这个$函数开始。  $()</p></li></ul><h2 id="jquery选择器"><a href="#jquery选择器" class="headerlink" title="jquery选择器"></a>jquery选择器</h2><ul><li><p><a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a></p></li><li><p>包含两个部分</p><ul><li><p>选择器</p><p>作用：对元素的获取</p><ul><li>基础选择器</li><li>特殊选择器</li></ul></li><li><p>筛选器</p><p>作用：对已经获取到的元素集合进行二次筛选</p></li></ul></li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><p>语法：$(选择器)         css里的选择器怎么写，这里就怎么写参数</p><p>返回值：满足条件的所有元素的集合，即将所有符合条件的元素放在一个伪数组里返回，我们管这个集合叫做 jquery元素集合</p><p>（id选择器除外，使用id选择器的话只选择第一次出现的符合条件的元素）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div01&quot;</span>&gt;</span><br>    我是div 1111<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div02&quot;</span>&gt;</span><br>        div 222222<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ul-box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log($);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(jQuery);</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>))</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div.container&#x27;</span>))</span><br><span class="language-javascript">        <span class="hljs-comment">// 找出li里的奇数为的li css选择器中的数值是从1开始的</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&gt;ul&gt;li:nth-child(odd)&#x27;</span>))</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="特殊选择器"><a href="#特殊选择器" class="headerlink" title="特殊选择器"></a>特殊选择器</h4><p> 是jq的语法，就不是css的语法了</p><p>语法：$(选择器)</p><p>作用：对你己经存在的选择器进行修饰</p><ul><li><p>:firsrt  </p></li><li><p>:last</p></li><li><p>:eq(索引数字)</p><p>按照索引的排列的第几个   数字从0开始</p></li><li><p>:even 索引为偶数</p></li><li><p>:odd  索引为奇数</p></li><li><p>……<a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div01&quot;</span>&gt;</span><br>    我是div 1111<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div02&quot;</span>&gt;</span><br>        div 222222<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ul-box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log($);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(jQuery);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// ----------------------------------------------基础选择器</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>))</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div.container&#x27;</span>))</span><br><span class="language-javascript">        <span class="hljs-comment">// 找出li里的奇数为的li css选择器中的数值是从1开始的</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&gt;ul&gt;li:nth-child(odd)&#x27;</span>))</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------------&#x27;</span>);</span><br><span class="language-javascript">      </span><br><span class="language-javascript">        <span class="hljs-comment">// ----------------------------------------------特殊选择器</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div:first&#x27;</span>));<span class="hljs-comment">//拿div里的第一个 </span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div:last&#x27;</span>));<span class="hljs-comment">//拿div里的最后一个</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div:eq(0)&#x27;</span>));<span class="hljs-comment">//拿div里的第一个 </span></span><br><span class="language-javascript">        <span class="hljs-comment">//js 拿所有li里的索引为奇数的li 计数从0开始</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log($(&#x27;li:odd&#x27;).css(&#123; background: &#x27;red&#x27; &#125;))</span></span><br><span class="language-javascript">        <span class="hljs-comment">// // css 拿所有li里面第奇数个元素 计数从1开始</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log($(&#x27;li:nth-child(odd)&#x27;).css(&#123; background: &#x27;blue&#x27; &#125;))</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//js 拿所有li里的索引为偶数的li 计数从0开始 0 2</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;li:even&#x27;</span>).<span class="hljs-title function_">css</span>(&#123; <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;red&#x27;</span> &#125;))</span><br><span class="language-javascript">        <span class="hljs-comment">// css 拿所有li里面第偶数个元素 计数从1开始</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;li:nth-child(even)&#x27;</span>).<span class="hljs-title function_">css</span>(&#123; <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;blue&#x27;</span> &#125;))</span><br><span class="language-javascript">      </span><br><span class="language-javascript">        <span class="hljs-comment">//获取可以使用按钮</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;button:enabled&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取不可使用的按钮</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;button:disabled&#x27;</span>));</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="筛选器"><a href="#筛选器" class="headerlink" title="筛选器"></a>筛选器</h3><p>作用：对jquery的元素集合（不是操作DOM了）进行二次筛选，直接进行链式编程就可以了</p><p>注意：只有jquery的元素集合可以使用，原生的DOM对象不能使用</p><h4 id="fisrt"><a href="#fisrt" class="headerlink" title="fisrt()"></a>fisrt()</h4><p>作用：元素集合里的第一个</p><h4 id="last"><a href="#last" class="headerlink" title="last()"></a>last()</h4><p>元素集合里的最后一个</p><h4 id="eq-索引"><a href="#eq-索引" class="headerlink" title="eq(索引)"></a>eq(索引)</h4><p>元素集合里指定索引的那一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//可以实现 对所有的li设置样式后，在对第一个单独设置样式    链式语法</span><br>$(<span class="hljs-string">&#x27;li&#x27;</span>).操作<span class="hljs-title function_">css</span>().<span class="hljs-title function_">fisrt</span>().操作<span class="hljs-title function_">css</span>()<br></code></pre></td></tr></table></figure><h4 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h4><p>当前索引的下一个元素</p><h4 id="nextAll"><a href="#nextAll" class="headerlink" title="nextAll()"></a>nextAll()</h4><p>语法：元素集合.nextAll()      获取当前元素后面的所有的兄弟元素</p><p>​           元素集合.nextAll(选择器)      获取当前元素后面的所有的兄弟元素指定选择器的那一个</p><h4 id="nextUntil"><a href="#nextUntil" class="headerlink" title="nextUntil()"></a>nextUntil()</h4><p>语法：元素集合.nextUntil()            获取当前元素后面的所有的兄弟元素</p><p>​          元素集合.nextUntil(选择器)  获取当前元素后面的所有的兄弟元素，直到选择器为止（不包含选择器元素）</p><h4 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h4><p>当前元素的上一个元素</p><h4 id="prevAll"><a href="#prevAll" class="headerlink" title="prevAll()"></a>prevAll()</h4><p>语法：元素集合.prevAll()       获取当前元素上面的所有的兄弟元素</p><p>​            元素集合.prevAll(选择器)      获取当前元素上面的所有的兄弟元素中指定选择器的那一个</p><h4 id="prevUntil"><a href="#prevUntil" class="headerlink" title="prevUntil()"></a>prevUntil()</h4><p>语法：元素集合.prevUntil()    获取到当前元素上面所有的兄弟元素</p><p>​            元素集合.prevUntil(选择器)    获取到当前元素上面所有的兄弟元素，直到选择器元素为止（不包含选择器元素）</p><h4 id="parent"><a href="#parent" class="headerlink" title="parent()"></a>parent()</h4><p>​获取到当前元素的父元素</p><h4 id="parents"><a href="#parents" class="headerlink" title="parents()"></a>parents()</h4><p>语法：元素集合.parents()     拿到结构父级的所有父元素</p><p>​            元素集合.parents(选择器)     拿到结构父级里面的所有父元素中符合选择器的那一个元素</p><h4 id="children"><a href="#children" class="headerlink" title="children()"></a>children()</h4><p>语法：元素集合.children()     拿到该元素的所有子元素</p><p>​           元素集合.children(选择器)     拿到该元素的所有子元素中符合选择器的那一个元素</p><h4 id="siblings"><a href="#siblings" class="headerlink" title="siblings()"></a>siblings()</h4><p>拿到该元素的所有的兄弟元素，自己除外</p><h4 id="find-选择器"><a href="#find-选择器" class="headerlink" title="find(选择器)"></a>find(选择器)</h4><p>找到该元素中所有后代元素里面符合选择器条件的元素</p><h4 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h4><p>获取到的就是该元素在其父元素里面的索引位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ul-box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell cell&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>5<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>999<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell cell&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">first</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">last</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>));<span class="hljs-comment">//索引为2的 </span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;------------------------&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//向下找</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">next</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">nextAll</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">nextAll</span>(<span class="hljs-string">&#x27;.cell&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">nextUntil</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">nextUntil</span>(<span class="hljs-string">&#x27;.cell&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;------------------------&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 向上找</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">prev</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">prevAll</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">prevAll</span>(<span class="hljs-string">&#x27;.cell&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">prevUntil</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">prevUntil</span>(<span class="hljs-string">&#x27;.cell&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;------------------------&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 父元素</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">parent</span>());</span><br><span class="language-javascript">        <span class="hljs-comment">// 没有document 文档，因为是文档节点，不是元素节点</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">parents</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;html&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;------------------------子元素&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 子元素</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">children</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;span&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;------------------------兄弟元素&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//兄弟元素</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">siblings</span>());</span><br><span class="language-javascript">        <span class="hljs-comment">// 其他</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;------------------------其他&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;span&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">index</span>());<span class="hljs-comment">//ul在其父元素里的索引为0</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">first</span>().<span class="hljs-title function_">index</span>());<span class="hljs-comment">//4</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">last</span>().<span class="hljs-title function_">index</span>());<span class="hljs-comment">//0</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="jQuery-操作文本的内容"><a href="#jQuery-操作文本的内容" class="headerlink" title="jQuery 操作文本的内容"></a>jQuery 操作文本的内容</h2><p>作用：操作元素内的文本和超文本</p><p>注意：属于jquery 的方法 只能jquery元素集合使用，原生的DOM不能调用</p><h3 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h3><p>语法：</p><ul><li>元素集合.html()     获取</li></ul><p>获取该元素的超文本内容，以字符串的形式返回</p><p>获取的时候为了保证html结构只能获取第一个元素的超文本内容</p><ul><li><p>元素集合.html(‘内容’)   设置</p><p>设置元素集合内元素的超文本内容</p><p>完全覆盖式的写入</p><p>隐式迭代：元素集合内有多少元素，就写入多少元素</p></li></ul><h3 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h3><p>语法：</p><ul><li><p>元素集合.text()</p><p>获取该元素的文本内容，以字符串的形式返回</p><p>因为是文本内容，不涉及html结构，所以拿到的是所有元素的文本的内容,以一个字符串的形式返回</p></li><li><p>元素集合.text(内容)</p><p>设置元素集合内元素的文本内容</p><p>完全覆盖式写入</p><p>隐式迭代：元素集合内有多少元素，就写入多少元素</p></li></ul><h3 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h3><p>语法：</p><ul><li><p>元素集合.val()</p><p>获取元素集合内元素的value值</p></li><li><p>元素集合.val(‘ 内容’)</p><p>设置元素集合内元素的value值，完全覆盖式的写入</p><p>隐式迭代：元素集合内有多少元素，就写入多少元素</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- &lt;button disabled&gt;提交&lt;/button&gt;&lt;button disabled&gt;提交&lt;/button&gt;&lt;button&gt;提交&lt;/button&gt; --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ul-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell cell&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>5<br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>999<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell cell&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;li-cell&quot;</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>        用户姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        年龄： <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        爱好： <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//----------------html()</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取内容 为了保证html结构只能获取第一个元素的超文本内容</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">html</span>());</span><br><span class="language-javascript">        <span class="hljs-comment">// 设置内容</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;a&gt;我是超链接&lt;/a&gt;&#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//---------------- text() 返回值是一个字符传是所有li里的文本内容</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">text</span>());</span><br><span class="language-javascript">        <span class="hljs-comment">// 设置内容 </span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;.ul-box&#x27;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;&lt;a&gt;我是超链接&lt;/a&gt;&#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// -----------------val()</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 只获取集合内第一个元素的value值</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">val</span>());</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;你好&#x27;</span>));</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="jQuery-操作元素类名"><a href="#jQuery-操作元素类名" class="headerlink" title="jQuery 操作元素类名"></a>jQuery 操作元素类名</h2><h3 id="addclass"><a href="#addclass" class="headerlink" title="addclass()"></a>addclass()</h3><p>添加元素类型</p><h3 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h3><p>删除元素类名</p><h3 id="hasClass"><a href="#hasClass" class="headerlink" title="hasClass()"></a>hasClass()</h3><p>判断元素有没有类名</p><h3 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h3><p>切换类名</p><p>如果原先有就删除，如果原先没有就添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--html--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div88<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div999<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div1111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>改变颜色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!--js--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;action&#x27;</span>));</span><br><span class="language-javascript">    </span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;action&#x27;</span>));</span><br><span class="language-javascript">    </span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&#x27;action&#x27;</span>));</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <br></code></pre></td></tr></table></figure><h2 id="jQuery-操作元素样式"><a href="#jQuery-操作元素样式" class="headerlink" title="jQuery 操作元素样式"></a>jQuery 操作元素样式</h2><p>只用一种方式 </p><h3 id="cass"><a href="#cass" class="headerlink" title=".cass()"></a>.cass()</h3><p>​    可读写</p><ul><li><p>格式1：获取   </p><p>元素集合.cass(‘width’)</p><p>获取元素的某一个样式值，不管是行内还是非行内样式都可以获取到</p></li><li><p>格式2: 元素集合.cass(‘样式名’,‘样式值’)</p><p>作用：设置元素的行内样式</p><p>隐式迭代：元素集合内有多少元素就设置多少元素的样式，设置的时候，如果你需要设置的单位是px 可以不写</p></li><li><p>格式2: 元素集合.cass({样式名1:式值1,样式名2:式值2,样式名3:式值3})</p><p>作用：批量设置元素样式</p><p> 隐式迭代：元素集合内有多少元素就设置多少元素的样式，设置的时候，如果你需要设置的单位是px 可以不写</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ------------------------------------------ css -------------&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.action</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ------------------------------------------ html -------------&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div88<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div999<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div1111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ------------------------------------------ js -------------&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 返回第一个第一个div的width</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;width&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-comment">// 可以设置集合内所有div的样式</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;border&#x27;</span>, <span class="hljs-string">&#x27;1px solid red&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">css</span>(&#123; <span class="hljs-attr">padding</span>: <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-attr">margin</span>: <span class="hljs-number">20</span> &#125;))</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="jQuery-基础绑定事件"><a href="#jQuery-基础绑定事件" class="headerlink" title="jQuery 基础绑定事件"></a>jQuery 基础绑定事件</h2><h3 id="on"><a href="#on" class="headerlink" title="on()"></a>on()</h3><ul><li>格式1：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">元素集合.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;事件类型&#x27;</span>，事件处理函数)<br></code></pre></td></tr></table></figure><p>​直接绑定事件，有隐式迭代</p><p>隐式迭代：元素集合内有多少元素，就给多少元素绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ------------------------------------------ html -------------&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div88<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div999<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div1111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ------------------------------------------ js -------------&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 给所有的div都绑定了事件</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>案例1:使用jq实现选项卡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span>&gt;<span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: bisque;</span><br><span class="language-css">            <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ol</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: blueviolet;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ol</span>&gt;<span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ol</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkcyan;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ol</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">139</span>, <span class="hljs-number">93</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ol</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">93</span>, <span class="hljs-number">139</span>, <span class="hljs-number">9</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.acrion</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: royalblue;</span><br><span class="language-css">            <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- tab选项 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;acrion&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 内容展示 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;acrion&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul&gt;li&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 事件处理函数里面的this是事件源，也就是DOM，不能直接使用jq的方法，要将DOM转为jq集合再使用jq的方法</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 将DOM转为jq集合的方式：  $(DOM) </span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 给被点击的元素添加点击事件，将该元素的兄弟元素的类名去除</span></span><br><span class="language-javascript">            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;acrion&#x27;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;acrion&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 将所有内容展示块上的选中样式都去除后，在集合里找指定索引（即当前点击的tab按钮的索引）的元素，给该元素添加选中显示的类名</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;ol&gt;li&#x27;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;acrion&#x27;</span>).<span class="hljs-title function_">eq</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">index</span>()).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;acrion&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>格式2:  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">元素集合.<span class="hljs-title function_">on</span>(事件类型，选择器(基本数据类型)，事件处理函数)  <br></code></pre></td></tr></table></figure></li></ul><p>第二个参数为基本数据类型的时候，是采用事件委托的绑定事件，把选择器元素委托给元素集合里面的元素</p><p>注意：选择器元素要是 元素集合内元素的后代元素，因为这样才能有事件传播</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: chocolate;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//----DOM事件委托的实现方式</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 我们DOM里的事件委托得这样，才能将想绑定在li上的事件委拖到ul上，这样才可以在点击li时，执行操作，点击ul时不执行操作</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 但是事件处理函数内的this依旧时事件源 ul</span></span><br><span class="language-javascript">        ul.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">nodeName</span> == <span class="hljs-string">&#x27;LI&#x27;</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击li&#x27;</span>, <span class="hljs-variable language_">this</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//-----jq 事件委托的实现</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 点击li时才触发绑定在ul上的事件处理函数，点击ul不触发，并且事件处理函数内的this为li，而不再时事件源ul，这样我们就可以轻松的获取到我们点击的是哪一个li</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;--点击li时才触发，点击ul不触发--&#x27;</span>, <span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>格式3     </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">元素集合.<span class="hljs-title function_">on</span>(事件类型，复杂数据类型，事件处理函数)<br>    <br></code></pre></td></tr></table></figure><pre><code class="hljs">  给元素集合内的所有元素绑定事件</code></pre></li></ul><p>​  第二个参数为复杂数据类型的时候，这个复杂数据类型是事件触发的时候，传递给事件处理函数里的参数</p><p>​ 在事件对象里面有一个叫做data的成员，就是你传递进来的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//------------html </span><br>&lt;ul&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li标签<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    &lt;/ul&gt;<br><span class="hljs-comment">//------------js</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;这个对象是实参&#x27;</span> &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 事件对象里有一个data属性，接受我们传递过来的参数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---&#x27;</span>, e.<span class="hljs-property">data</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><p>格式4  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">元素集合.<span class="hljs-title function_">on</span>(事件类型，选择器, 数据 ，事件处理函数)<br></code></pre></td></tr></table></figure><p>事件委托的形式，带上传递的参数</p></li></ul><p>​因为第二个参数是基本数据类型就决定了是事件委托，把选择器所属的事件委托给元素集合内元素，第三个参数则是传递的事件处理函数的参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       $(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-string">&#x27;我是参数了&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击li才触发，this为li&#x27;</span>, <span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>格式5 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">元素集合.<span class="hljs-title function_">on</span>(&#123;<br>  事件类型<span class="hljs-number">1</span>:事件处理函数，<br>  事件类型<span class="hljs-number">2</span>:事件处理函数，<br>  。。。<br>&#125;)<br></code></pre></td></tr></table></figure><p>一次性给元素集合绑定多种事件，但是不能传参及事件委托</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">on</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">click</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击事件&#x27;</span>);</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">mouseover</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;移入事件&#x27;</span>)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结：所有的事件绑定都有隐式迭代，在jq里只要不是获取，99%是方法，方法里有一种是返回值的（.html() 以字符串的形式返回html结构 或者.text() 返回文本内容  或者 .css(‘width’) 一个参数的时候返回样式值 ），剩下的全都是返回元素集合我们可以继续链式编程，还有设置类的如设置样式，设置类名，设置文本所有的设置全带隐式迭代，所有的获取大部分是不带隐式迭代的</p><h3 id="one"><a href="#one" class="headerlink" title="one()"></a>one()</h3><p>作用：用来绑定事件的方法，和on()方法的参数和使用形式一模一样，只不过绑定的事件只能执行一次</p>  <script>    //每一个li都只能执行一次 点击事件 和 移入事件        $('li').one({            click: function () {                console.log('点击事件');            },            mouseover: function () {                console.log('移入事件')            }        })    </script><h3 id="off"><a href="#off" class="headerlink" title="off()"></a>off()</h3><ul><li><p>作用：用来解除事件处理函数</p></li><li><p>格式1: 元素集合.off(事件类型)</p><p>解除元素身上该事件类型的所有事件处理函数</p></li><li><p>格式2: 元素集合.off(事件类型,事件处理函数)</p><p>解除元素身上该事件类型的某一个事件处理函数</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;事件fn1&#x27;</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;事件fn2&#x27;</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-comment">// 给元素集合绑定了两个click事件</span></span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fn1).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fn2)</span><br><span class="language-javascript">      <span class="hljs-comment">// 将所有的click事件类型的事件函数都解绑</span></span><br><span class="language-javascript">      <span class="hljs-comment">// $(&#x27;li&#x27;).off(&#x27;click&#x27;)</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 只解绑了click事件类型绑定事件处理函数fn1</span></span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fn1)</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-comment">//使用js来触发事件</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;click&#x27;</span>)</span><br><span class="language-javascript">      </span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="trigger"><a href="#trigger" class="headerlink" title="trigger()"></a>trigger()</h3><p>作用：用js代码的方式来触发事件</p><p>格式：元素集合.trigger(事件类型)</p><h2 id="jQuery-的事件函数"><a href="#jQuery-的事件函数" class="headerlink" title="jQuery 的事件函数"></a>jQuery 的事件函数</h2><p>jq给我们提供了一些简介的绑定事件的方式，把一些常用事件直接封装成了函数</p><h3 id="click"><a href="#click" class="headerlink" title="click()"></a>click()</h3><h3 id="mouseover"><a href="#mouseover" class="headerlink" title="mouseover()"></a>mouseover()</h3><p>。。。</p><p>这些方法可以直接使用，带有隐式迭代，可以快捷绑定事件</p><p>格式：元素集合.事件类型(事件处理函数)</p><p>​元素集合.事件类型(传入事件处理函数的参数，事件处理函数)</p><p>例：绑定点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">//--- 在事件对象里的data属性可以获取参数</span></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;参数&#x27;</span> &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;on()绑定点击事件&#x27;</span>, e);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-string">&#x27;给事件处理函数传的参数&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;click()快捷绑定点击事件&#x27;</span>, e);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="hove"><a href="#hove" class="headerlink" title="hove()"></a>hove()</h3><p>特殊事件：hove()  模仿悬停事件</p><p>格式：     元素集合.hover(移入事件的事件处理函数, 移出事件的事件处理函数)</p><p>​如果传两个参数，那么在移入，移出时会分别触发移入移出事件</p><p>​如果只传一个参数，那么移入和移出时会触发同一个函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; </span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;移入事件&#x27;</span>);</span><br><span class="language-javascript">       &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;移出事件&#x27;</span>);</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="jquery-的节点操作"><a href="#jquery-的节点操作" class="headerlink" title="jquery 的节点操作"></a>jquery 的节点操作</h2><p>原生js的节点操作：创建节点，删除节点，替换节点，克隆节点</p><p>jquery的节点操作：创建节点，删除节点，替换节点，克隆节点</p><ul><li>当$(选择器)  里面传递一个选择器的时候，就是获取元素</li><li>当$(DOM元素节点) 里面传递一个DOM元素节点的时候，就是转换成jquery元素集合</li><li>当$(html结构字符串)  里面传递一个html结构字符串的时候，就是创建元素节点</li></ul><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><ul><li>当$(html结构字符串)  里面传递一个html结构字符串的时候，就是创建元素节点</li></ul><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><h4 id="内部插入（父子关系的插入）"><a href="#内部插入（父子关系的插入）" class="headerlink" title="内部插入（父子关系的插入）"></a>内部插入（父子关系的插入）</h4><h5 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h5><p>格式：父元素.append(子元素)</p><p>把子元素插入到父元素内部，放到末尾的位置</p><pre><code class="hljs">    #####   appendTo()</code></pre><p>格式：子元素.appendTo(父元素)</p><p>把子元素插入到父元素的内部，放到末尾位置</p><p>注意：append()和appendTo()的作用是一样的，只不过主语不同，因为我们可以进行链式编程的操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 创建一个p标签</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> span = $(<span class="hljs-string">&#x27;&lt;span style=&quot;color:red&quot;&gt;我是一个span标签&lt;/span&gt;&#x27;</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(span)</span><br><span class="language-javascript">      <span class="hljs-comment">// 向div里面添加这个创建的p标签 后 再改变div的背景颜色</span></span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">append</span>(span).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;background-color&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// span.appendTo($(&#x27;div&#x27;)).css(&#x27;color&#x27;, &#x27;yellow&#x27;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="prepend"><a href="#prepend" class="headerlink" title="prepend()"></a>prepend()</h5><p>格式：父元素.prepend(子元素)</p><p>把子元素插入到父元素内部，放到最前面的位置</p><h5 id="prependTo"><a href="#prependTo" class="headerlink" title="prependTo()"></a>prependTo()</h5><p>格式：子元素.prependTo(父元素)</p><p>把子元素插入到父元素内部，放到最前面的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 创建一个p标签</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> span = $(<span class="hljs-string">&#x27;&lt;span style=&quot;color:red&quot;&gt;我是一个span标签&lt;/span&gt;&#x27;</span>)</span><br><span class="language-javascript">     <span class="hljs-comment">// 分析：span是一个jq创建的元素节点，但是是一个复杂数据类型的变量，存储的是一个地址，只要使用span，就是在使用堆里面的那个空间</span></span><br><span class="language-javascript">     <span class="hljs-comment">// 将span添加到后面，又添加到前面，最终出现在前面</span></span><br><span class="language-javascript">     $(<span class="hljs-string">&#x27;main&#x27;</span>).<span class="hljs-title function_">append</span>(span);</span><br><span class="language-javascript">     $(<span class="hljs-string">&#x27;main&#x27;</span>).<span class="hljs-title function_">prepend</span>(span)</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-comment">//注意这样没有办法实现前面一个，后面一个，如果想要前一个后一个，要复制一份再放</span></span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="外部插入-兄弟关系的插入"><a href="#外部插入-兄弟关系的插入" class="headerlink" title="外部插入(兄弟关系的插入)"></a>外部插入(兄弟关系的插入)</h4><ul><li>在后面插入兄弟元素</li></ul><h5 id="after"><a href="#after" class="headerlink" title="after()"></a>after()</h5><p>格式：存在元素.affter(插入元素)</p><p>把插入元素排在存在元素的后面，以兄弟关系出现</p><h5 id="insertAfter"><a href="#insertAfter" class="headerlink" title="insertAfter"></a>insertAfter</h5><p>格式：插入元素.insertAfter(存在元素)</p><p>把插入元素排在存在元素的后面，以兄弟关系出现</p><ul><li>在前面插入兄弟元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">//------创建元素</span></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> a = $(<span class="hljs-string">&#x27;&lt;a&gt;我是超链接&lt;/a&gt;&#x27;</span>)</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-comment">//------ 向main标签的后面添加元素</span></span><br><span class="language-javascript">  <span class="hljs-comment">// $(&#x27;main&#x27;).after(a)</span></span><br><span class="language-javascript">  a.<span class="hljs-title function_">insertAfter</span>($(<span class="hljs-string">&#x27;main&#x27;</span>))</span><br><span class="language-javascript">  </span><br><span class="language-javascript">    <span class="hljs-comment">// ---- main标签的前面添加元素</span></span><br><span class="language-javascript">  <span class="hljs-comment">// $(&#x27;main&#x27;).before(a)</span></span><br><span class="language-javascript">     a.<span class="hljs-title function_">insertBefore</span>($(<span class="hljs-string">&#x27;main&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="before"><a href="#before" class="headerlink" title="before()"></a>before()</h5><p>格式：存在元素.before(插入元素)</p><p>把插入元素排在存在元素的前面，以兄弟关系出现</p><h5 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore()"></a>insertBefore()</h5><p>格式：插入元素.insertBefore(存在元素)</p><p>把插入元素排在存在元素的前面，以兄弟关系出现</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>格式： 元素集合.remove()</p><p>把自己从自己的父元素中删除</p><p>删除只有自己删自己，没有从父元素中删除子元素，因为jq的选择器太强大了</p><h4 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h4><p>格式：元素集合.empty()</p><p>把自己变成空标签，把所有的后代节点全部移除</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">   </span><br><span class="language-javascript">    <span class="hljs-comment">// $(&#x27;main&#x27;).remove();</span></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;main&#x27;</span>).<span class="hljs-title function_">empty</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><ul><li><p>replaceWith()</p><p>​格式：被换下来的节点.replace(换上的节点)</p><p> 将所有匹配的元素替换成指定的HTML或DOM元素</p></li><li><p>replaceAll 用匹配的元素替换掉所有 selector匹配到的元素</p></li></ul><p>​       格式：换上的节点.replace(被换下来的节点)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: beige;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        我是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是div里面的p0001<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        我是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是div里面的p0001<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 创建元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> p = $(<span class="hljs-string">&#x27;&lt;p&gt;我是新来的&lt;/p&gt;&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p)</span><br><span class="language-javascript">        <span class="hljs-comment">// 将元素替换到页面中的元素</span></span><br><span class="language-javascript">        <span class="hljs-comment">// $(&#x27;div&gt;p&#x27;).replaceWith(p)</span></span><br><span class="language-javascript">        p.<span class="hljs-title function_">replaceAll</span>($(<span class="hljs-string">&#x27;div&gt;p&#x27;</span>))</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><ul><li><p>clone()</p><p>格式：元素集合.clone()</p><ul><li><p>必然携带所有的节点过来</p></li><li><p>第一参数表示是否克隆节点本身的事件 默认值是false ，选填true</p><p>​第一个参数为默认为false，只clone元素，不clone元素上的事件，第一个参数为true则会clone事件</p></li><li><p>第二个参数默认是跟随第一个，表示 是否克隆元素后代节点的事件，选填</p></li></ul><p>注意：当第一个参数是false 的时候，第二个参数没有意义</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: beige;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        我是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是div里面的p0001<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        我是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是div里面的p0001<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了div&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&gt;p&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了p&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">//-1- 将div及div内的子元素都克隆后，添加在body中  不克隆事件</span></span><br><span class="language-javascript">        <span class="hljs-comment">// $(&#x27;div&#x27;).clone().appendTo($(&#x27;body&#x27;))</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//-2- 如果不想讲div内的子元素也被clone,可以先将div及内容clone后再清空后再添加到页面中</span></span><br><span class="language-javascript">        <span class="hljs-comment">// $(&#x27;div&#x27;).clone().empty().appendTo($(&#x27;body&#x27;))</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//-3-  将div及div内的子元素都克隆后，添加在body中  克隆div和p标签上的事件</span></span><br><span class="language-javascript">        <span class="hljs-comment">// $(&#x27;div&#x27;).clone(true).appendTo($(&#x27;body&#x27;))</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//-4- 将div及div内的子元素都克隆后，添加在body中，第二个参数为false是，clone div的事件，但是不clone p 标签的事件</span></span><br><span class="language-javascript">        <span class="hljs-comment">// $(&#x27;div&#x27;).clone(true, false).appendTo($(&#x27;body&#x27;))</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 当不clone div的事件的时候，也不能clone p标签的事件</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">clone</span>(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&#x27;body&#x27;</span>))</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h3><p>DOM中操作属性的方式</p><p>​原生属性  id class src。</p><p>​自定义属性  getAttribute()</p><p>​H5 自定义属性  dataset </p><p>JQuery 有三种操作属性的方式</p><ul><li><p>attr()和removeAttr()</p><ul><li><p>attr()</p><ul><li>获取格式：元素集合.attr(属性名)</li></ul><p>获取元素的该属性，主要用来获取标签的属性，包括一些自定义属性</p><ul><li>设置格式: 元素集合.attr(属性名,属性值)</li></ul><p> 设置元素的属性不论设置的是什么类型的值，都会变成字符串得到的都是字符串</p></li><li><p>removeAttr()</p><p>语法：元素集合.removeAttr(属性名)</p><p>删除元素身上的属性</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: beige;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;div01&quot;</span> <span class="hljs-attr">data-index</span>=<span class="hljs-string">&quot;12345&quot;</span>&gt;</span><br>        我是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是div里面的p0001<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取元素原生属性</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;获取原生属性&#x27;</span>, $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;class&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取元素自定义属性</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>));</span><br><span class="language-javascript">        <span class="hljs-comment">// 设置元素的属性</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;.div01&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;div002&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 设置元素的属性不论设置的是什么类型的值，都会变成字符串得到的都是字符串</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---&#x27;</span>, <span class="hljs-keyword">typeof</span> $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;class&#x27;</span>))</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 点击按钮时选中复选框</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> ($(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;checked&#x27;</span>)) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&#x27;checked&#x27;</span>, <span class="hljs-literal">true</span>)</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;checked&#x27;</span>, <span class="hljs-literal">true</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// ---- 删除元素的原生属性</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&#x27;class&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// ---- 删除元素的自定义属性</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">removeAttr</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script&gt;</span><br><span class="hljs-comment">        $(&#x27;div&#x27;).click(function () &#123;</span><br><span class="hljs-comment">            console.log(&#x27;点击了div&#x27;)</span><br><span class="hljs-comment">        &#125;)</span><br><span class="hljs-comment">        $(&#x27;div&gt;p&#x27;).click(function () &#123;</span><br><span class="hljs-comment">            console.log(&#x27;点击了p&#x27;)</span><br><span class="hljs-comment">        &#125;)</span><br><span class="hljs-comment">        //-1- 将div及div内的子元素都克隆后，添加在body中  不克隆事件</span><br><span class="hljs-comment">        // $(&#x27;div&#x27;).clone().appendTo($(&#x27;body&#x27;))</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        //-2- 如果不想讲div内的子元素也被clone,可以先将div及内容clone后再清空后再添加到页面中</span><br><span class="hljs-comment">        // $(&#x27;div&#x27;).clone().empty().appendTo($(&#x27;body&#x27;))</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        //-3-  将div及div内的子元素都克隆后，添加在body中  克隆div和p标签上的事件</span><br><span class="hljs-comment">        // $(&#x27;div&#x27;).clone(true).appendTo($(&#x27;body&#x27;))</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        //-4- 将div及div内的子元素都克隆后，添加在body中，第二个参数为false是，clone div的事件，但是不clone p 标签的事件</span><br><span class="hljs-comment">        // $(&#x27;div&#x27;).clone(true, false).appendTo($(&#x27;body&#x27;))</span><br><span class="hljs-comment">        // 当不clone div的事件的时候，也不能clone p标签的事件</span><br><span class="hljs-comment">        $(&#x27;div&#x27;).clone(false, true).appendTo($(&#x27;body&#x27;))</span><br><span class="hljs-comment">    &lt;/script&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="获取元素的尺寸"><a href="#获取元素的尺寸" class="headerlink" title="获取元素的尺寸"></a>获取元素的尺寸</h3><p>获取元素的尺寸的方式 有三套，这三套方法不论元素是否隐藏都可以获取到</p><h4 id="width-和height"><a href="#width-和height" class="headerlink" title="width()和height()"></a>width()和height()</h4><p>格式：元素集合.width()    元素集合.height()</p><p>获取元素 内容 区域的尺寸 </p><p> box-sizeing：border-box的时候 也是只获取内容区域的尺寸</p><h4 id="innerWidth-和-innerHeight"><a href="#innerWidth-和-innerHeight" class="headerlink" title="innerWidth() 和 innerHeight()"></a>innerWidth() 和 innerHeight()</h4><p>格式：元素集合.innerWidth()    元素集合.innerHeight()</p><p>获取元素 内容+padding 区域的尺寸 </p><h4 id="outerWidth-和-outerHeight"><a href="#outerWidth-和-outerHeight" class="headerlink" title="outerWidth() 和 outerHeight()"></a>outerWidth() 和 outerHeight()</h4><p>格式：元素集合.outerWidth()    元素集合.outerHeight()</p><p>获取元素 内容+padding+border 区域的尺寸 </p><h4 id="outerWidth-true-和-outerHeight-true"><a href="#outerWidth-true-和-outerHeight-true" class="headerlink" title="outerWidth(true) 和 outerHeight(true)"></a>outerWidth(true) 和 outerHeight(true)</h4><p>格式：元素集合.outerWidth()    元素集合.outerHeight()</p><p>获取元素 内容+padding+border+margin 区域的尺寸 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">          <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">          <span class="hljs-attribute">background-color</span>: beige;</span><br><span class="language-css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="language-css">          <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">          <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// DOM 操作 获取元素的可见框的尺寸 当元素隐藏则为0</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;111&#x27;</span>, div.<span class="hljs-property">offsetWidth</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// jq</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;222&#x27;</span>, $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">width</span>());<span class="hljs-comment">//240</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;222&#x27;</span>, $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">innerWidth</span>());<span class="hljs-comment">//280</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;222&#x27;</span>, $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">outerWidth</span>());<span class="hljs-comment">//300</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;222&#x27;</span>, $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">outerWidth</span>(<span class="hljs-literal">true</span>));<span class="hljs-comment">//360</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="获取元素的位置"><a href="#获取元素的位置" class="headerlink" title="获取元素的位置"></a>获取元素的位置</h3><h4 id="offset"><a href="#offset" class="headerlink" title="offset()"></a>offset()</h4><p>是一个读写的方法</p><ul><li>读取：元素集合.offset()</li></ul><p>返回值为一个对象。里面是相对页面左上角的绝对坐标</p><p>注意：读取出来的是一个对象，你需要值的时候，需要点语法获取[]访问对象里的属性，不能继续链式编程了，到头了</p><ul><li><p>设置. </p><p>元素集合.offset({top:XXX,left:XXX})</p><p>注意：设置的时候如果 父元素和子元素都要动，需要考虑先后顺序，顺序不同效果不同</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.outer</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.inner</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">163</span>, <span class="hljs-number">165</span>, <span class="hljs-number">42</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">2000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: bisque;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;p&gt;&lt;/p&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取元素相对页面左上角的绝对坐标</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div.outer&#x27;</span>).<span class="hljs-title function_">offset</span>());</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div.inner&#x27;</span>).<span class="hljs-title function_">offset</span>());</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 设置元素相对页面左上角的位置</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 设置的时候如果 父元素和子元素都要动，需要考虑先后顺序，顺序不同效果不同</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 先移动父元素后移动子元素</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div.outer&#x27;</span>).<span class="hljs-title function_">offset</span>(&#123; <span class="hljs-attr">top</span>: <span class="hljs-number">50</span>, <span class="hljs-attr">left</span>: <span class="hljs-number">50</span> &#125;));</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div.inner&#x27;</span>).<span class="hljs-title function_">offset</span>(&#123; <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">left</span>: <span class="hljs-number">0</span> &#125;));</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 先移动子元素后移动父元素  ，先移动子元素，子元素到达指定位置后，再移动父元素，父元素会带着子元素再一起动</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div.inner&#x27;</span>).<span class="hljs-title function_">offset</span>(&#123; <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">left</span>: <span class="hljs-number">0</span> &#125;));</span><br><span class="language-javascript">        <span class="hljs-comment">// console.log($(&#x27;div.outer&#x27;).offset(&#123; top: 50, left: 50 &#125;));</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><p>是一个只读的方法</p><p>格式：元素集合.position()</p><p>返回值：一个对象，里面包含</p><p> 获取匹配元素相对父元素的偏移，就是元素的定位关系</p><p>如果设置的偏移量是right和bottom 会自动计算成left和top</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.outer</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.inner</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">70px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">163</span>, <span class="hljs-number">165</span>, <span class="hljs-number">42</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">2000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: bisque;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;p&gt;&lt;/p&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取元素距离相对定位元素的距离 </span></span><br><span class="language-javascript">        <span class="hljs-comment">// 元素没有设置了定位的父元素则相对于body进行定位</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div.outer&#x27;</span>).<span class="hljs-title function_">position</span>());<span class="hljs-comment">//&#123;top: 8, left: 8&#125;</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&#x27;div.inner&#x27;</span>).<span class="hljs-title function_">position</span>());<span class="hljs-comment">// &#123; top: 60, left: 70 &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jq基础动画"><a href="#jq基础动画" class="headerlink" title="jq基础动画"></a>jq基础动画</h3><ul><li><p>show() 显示</p></li><li><p>Hide() 隐藏</p></li><li><p>toggle 切换  本身显示就隐藏，本身隐藏就显示</p><p>上面三个方法操作的是 display：none或者block</p><p>格式一样，方法名(运动时间，运动曲线，运动结束时触发的回调函数)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是被操作的元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">first</span>().<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">show</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;显示结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">hide</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;隐藏结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">toggle</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;切换结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="jq的折叠动画"><a href="#jq的折叠动画" class="headerlink" title="jq的折叠动画"></a>jq的折叠动画</h3><ul><li><p>slideDown() 下拉显示</p></li><li><p>slideUp() 上拉隐藏</p></li><li><p>slideToggle()</p><p>切换显示和隐藏</p><p>三个方法都是一样的参数</p><p>格式：方法名(运动时间，运动曲线，运动结束时触发的回调函数)</p></li></ul><h3 id="jq的停止动画"><a href="#jq的停止动画" class="headerlink" title="jq的停止动画"></a>jq的停止动画</h3><p>因为给一个元素设置了动画以后，如果快速触发，会停不下来，直到你所有触发都执行完毕为止</p><p>jq提供了两个临时停下动画的方法</p><ul><li><p>stop()</p><p>格式：元素集合.stop()</p><p>当代码执行到这一句的时候，不管运动到什么程度，立即停下来，运动到什么位置就停止在什么位置</p></li><li><p>finish()</p><p>格式：元素集合.finish()</p><p>当代码执行到这句的时候，不管运动到什么程度，直接到运动结束的位置</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html">//----------------- 普通的从下面开始折叠显示和隐藏 <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>stop<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>finish<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是被操作的元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">first</span>().<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">slideDown</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;显示结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">slideUp</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;隐藏结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 多次点击 切换，所有的点击的都会执行，无法中途停止</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//-1-</span></span><br><span class="language-javascript">            <span class="hljs-comment">//  $(&#x27;div&#x27;).slideToggle(3000, &#x27;linear&#x27;, function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     console.log(&#x27;切换结束&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//-2- 防止多次点击 写节流阀</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">            flag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">slideToggle</span>(<span class="hljs-number">3000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;切换结束&#x27;</span>);</span><br><span class="language-javascript">                flag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// --3--实现点击时 停止的效果，让div之前的动画停止在原地，按照最新的动画进行执行</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;div&#x27;).stop().slideToggle(3000, &#x27;linear&#x27;, function () &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     console.log(&#x27;切换结束&#x27;);</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// stop按钮</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">stop</span>()</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// finish按钮</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">4</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">finish</span>()</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html">//----------------- 从上面开始折叠显示和隐藏 <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: blueviolet;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">   &lt;!-- 在折叠显示的时候，才新增一个父元素 设置相对定位，让里面的子元素设置绝对定位，且定位使用<span class="hljs-attribute">bottom</span> --&gt;</span><br><span class="language-css">        <span class="hljs-selector-class">.box</span>&gt;<span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在折叠显示的时候，才新增一个父元素 设置相对定位，让里面的子元素设置绝对定位，且定位使用bottom --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是被操作的元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 如何使用 从上面折叠 </span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">first</span>().<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;.box&gt;div&#x27;</span>).<span class="hljs-title function_">slideDown</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;显示结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;.box&gt;div&#x27;</span>).<span class="hljs-title function_">slideUp</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;隐藏结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;.box&gt;div&#x27;</span>).<span class="hljs-title function_">slideToggle</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;切换结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jq的渐隐渐显动画"><a href="#jq的渐隐渐显动画" class="headerlink" title="jq的渐隐渐显动画"></a>jq的渐隐渐显动画</h3><p>通过操作元素的opacity 达到效果</p><ul><li><p>fadeIn()   显示   opacity 从0～1</p></li><li><p>fadeOut()   隐藏   opacity 从1～0</p></li><li><p>fadeToggle()  切换</p><p>格式：方法名(运动时间，运动曲线，动画结束时触发的回调函数)</p></li><li><p>fadeTo() 运动到指定的透明度</p><p>格式：fadeTo(时间，指定的透明度，运动曲线，回调函数)</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>to<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是被操作的元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">first</span>().<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">fadeIn</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;显示结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;隐藏-结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">fadeToggle</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;切换-结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">fadeTo</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;到指定的透明度-结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">     </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jq综合动画"><a href="#jq综合动画" class="headerlink" title="jq综合动画"></a>jq综合动画</h3><p>可以按照你的设定去进行运动</p><ul><li><p>animate()</p><p>格式：animate({书写要运动的属性},时间，运动曲线，回调函数)</p><p>注意：颜色相关的属性，运动不了，css的2d和3d动画效果运动不了</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>animate<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是被操作的元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">first</span>().<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">animate</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-comment">//运动不了</span></span><br><span class="language-javascript">                <span class="hljs-attr">borderRadius</span>: <span class="hljs-string">&#x27;50%&#x27;</span></span><br><span class="language-javascript">            &#125;, <span class="hljs-string">&#x27;linear&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;运动结束&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：筋斗云选项卡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#dedede</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* flex-grow: 1; */</span></span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-comment">/* border: 1px solid red; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">3px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">3px</span> solid red;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-comment">/* 过渡 */</span></span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: <span class="hljs-number">100ms</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 将span设置 为 不作为事件目标 */</span></span><br><span class="language-css">            <span class="hljs-attribute">pointer-events</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 滑块 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 给所有的li添加鼠标移入事件</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">mousemove</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//获取鼠标移入的li的索引</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> index = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">index</span>()</span><br><span class="language-javascript">            <span class="hljs-comment">// 让滑块span 移动到指定的位置</span></span><br><span class="language-javascript">            <span class="hljs-comment">//-1- 没有动画  但是可以配合css过渡</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 将鼠标移入的li里的text显示在span上</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">css</span>(&#123; <span class="hljs-attr">left</span>: <span class="hljs-number">100</span> * index + <span class="hljs-string">&#x27;px&#x27;</span> &#125;).<span class="hljs-title function_">text</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">text</span>())</span><br><span class="language-javascript">            <span class="hljs-comment">// 但是li上如果绑定点击事件，点击事件无法被触发，因为span挡着li，我们没法点在li上</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// -2 不推荐了，麻烦且效果不好- </span></span><br><span class="language-javascript">            <span class="hljs-comment">// 当从第一个，到2快速到3的时候，可能还没有到2  将动画停止，我能鼠标到3了,再从停止的位置花费50ms到3</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;span&#x27;).stop().animate(&#123; left: 100 * index &#125;, 100)</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&#x27;span&#x27;).text($(this).text())</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 但是li上如果绑定点击事件，点击事件无法被触发，因为span挡着li，我们没法点在li上，解决方式，给span设置css属性，让span不会作为事件目标</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击了li--&#x27;</span>, <span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 点击li时显示对应的内容块</span></span><br><span class="language-javascript">          。。。。。</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：树装菜单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 让二级菜单先隐藏 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ol</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;+&#x27;</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.action</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;-&#x27;</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第一级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> 第二级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> 第二级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> 第二级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第一级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> 第二级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> 第二级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> 第二级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第一级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> 第二级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> 第二级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> 第二级菜单<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul&gt;li&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 给被点击的切换action类名，</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 给被点击的li切换action类名，兄弟元素的移除action</span></span><br><span class="language-javascript">            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&#x27;action&#x27;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&#x27;action&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 被点击的这个li里的ol,折叠显示 或隐藏</span></span><br><span class="language-javascript">            <span class="hljs-comment">// </span></span><br><span class="language-javascript">            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;ol&#x27;</span>).<span class="hljs-title function_">slideToggle</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;ol&#x27;</span>).<span class="hljs-title function_">slideUp</span>()</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​案例：手风琴</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-css">          ul总为640</span></span><br><span class="hljs-comment"><span class="language-css">          状态展开一个：520 40 40 40</span></span><br><span class="hljs-comment"><span class="language-css">          合起来： 160 160 160 160</span></span><br><span class="hljs-comment"><span class="language-css">        </span></span><br><span class="hljs-comment"><span class="language-css">        */</span></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">640px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">346px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">640</span>/<span class="hljs-number">4</span>)px;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">520px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">520px</span>;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/WechatIMG219的副本.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/WechatIMG220的副本.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/WechatIMG223的副本.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/WechatIMG222的副本.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">mouseover</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 注意要先停一下之前的动画，再开始新的动画，否则会有问题</span></span><br><span class="language-javascript">            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">stop</span>().<span class="hljs-title function_">animate</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">width</span>: <span class="hljs-number">520</span>,</span><br><span class="language-javascript">            &#125;).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">stop</span>().<span class="hljs-title function_">animate</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">width</span>: <span class="hljs-number">40</span></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">mouseout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 鼠标移出的时候，所有都为折叠时的状态</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;li&#x27;</span>).<span class="hljs-title function_">stop</span>().<span class="hljs-title function_">animate</span>(&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">160</span> &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-css">          ul总为640</span></span><br><span class="hljs-comment"><span class="language-css">          状态展开一个：520 40 40 40</span></span><br><span class="hljs-comment"><span class="language-css">          合起来： 160 160 160 160</span></span><br><span class="hljs-comment"><span class="language-css">        </span></span><br><span class="hljs-comment"><span class="language-css">        */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/WechatIMG219的副本.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/WechatIMG220的副本.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/WechatIMG223的副本.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/WechatIMG222的副本.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;ul&gt;li&#x27;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 鼠标移入每一个li的时候，让跟随图片显示</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&gt;img&#x27;</span>).<span class="hljs-title function_">fadeIn</span>(<span class="hljs-number">100</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 设置跟随图片的src值为 hover的img上的地址</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&gt;img&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;img&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>))</span><br><span class="language-javascript">        &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 鼠标移出每一个li的时候，让跟随图片隐藏</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&gt;img&#x27;</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">100</span>)</span><br><span class="language-javascript">        &#125;).<span class="hljs-title function_">mousemove</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">            不能使用offset</span></span><br><span class="hljs-comment"><span class="language-javascript">            e.offsetX和e.offsetX</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">                返回光标距离 触发事件的元素 的左上角的位置</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">                **注意的是光标触发事件的元素（不是事件源，而是实际在身上点击的）**</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">                如果不想按照里面的光标触发元素的左上角来计算坐标，而是按照事件来计算坐标，</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">                处理方式：给里面的元素添加css样式 pointer- events：none；</span></span><br><span class="hljs-comment"><span class="language-javascript">            </span></span><br><span class="hljs-comment"><span class="language-javascript">            */</span></span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(e.pageX, e.pageY);</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;div&gt;img&#x27;</span>).<span class="hljs-title function_">offset</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">left</span>: e.<span class="hljs-property">pageX</span> + <span class="hljs-number">10</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">top</span>: e.<span class="hljs-property">pageY</span> + <span class="hljs-number">10</span></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jq实现深拷贝"><a href="#jq实现深拷贝" class="headerlink" title="jq实现深拷贝"></a>jq实现深拷贝</h3><p>jq里面提供一个进行深拷贝的方法 $.extend()</p><ul><li>格式：$.extend(目标对象1，对象2，对象3，……)</li></ul><p>从第二个参数开始的每一个对象的数据拷贝到第一个对象里，默认是一个浅拷贝</p><ul><li>格式：$.extend(true,目标对象1，对象2，对象3，……)</li></ul><p>把从第三个参数开始的每一个对象的数据拷贝到第二个对象里，由第一个参数 控制是否是深拷贝</p><p>注意：如果你要进行深拷贝，不管是深拷贝还是浅拷贝，至少要传递两个参数，传递一个参数的时候，不是进行拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj1 = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张思瑞&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>            <span class="hljs-attr">hobby</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br>&#125;<br><span class="hljs-keyword">let</span> newObj = &#123;&#125;;<br><br>jQuery.<span class="hljs-title function_">extend</span>(<span class="hljs-literal">true</span>, newObj, obj1)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;*****11&#x27;</span>, newObj, obj1);<br>newObj.<span class="hljs-property">hobby</span>.<span class="hljs-property">a</span> = <span class="hljs-string">&#x27;666&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;*****22&#x27;</span>, newObj, obj1);<br></code></pre></td></tr></table></figure><h2 id="jq发送ajax请求"><a href="#jq发送ajax请求" class="headerlink" title="jq发送ajax请求"></a>jq发送ajax请求</h2><h3 id="jq发送一get请求"><a href="#jq发送一get请求" class="headerlink" title="jq发送一get请求"></a>jq发送一get请求</h3><p>jQuery提供一个函数，叫做 $.get()</p><p>jQuery引入以后，会提供两个变量 $  jQuery，这两个都是函数数据类型</p><p>把这个函数当做一个对象，向他的身上添加了一些成员，我们管这种方法叫做jquery的全句方法，不需要依赖选择器，不需要元素集合，直接调用就行</p><p>专门用来发送get请求</p><p>格式：$.get(地址，传递给后端的数据，回调函数，期望返回的数据类型)</p><p>​地址：请求地址。（你可以自主拼接参数，不推荐）</p><p>​                     如果在地址的后面拼接了参数数据，则数据参数就不用再设置了，直接写成功的回调函数</p><p>​数据：给后端的数据，可以写 ‘key&#x3D;value&amp;key&#x3D;value’，也可以以对象的形式写 {key:value,key2:value}</p><p>​回调：请求成功后的回调，请求成功以后会触发</p><p>​期望返回的数据类型：是不是执行解析响应题的操作</p><p>​‘string’ 不解析           ‘json’ 会执行一步 JSON.parse()</p><h2 id="jq发送一个post请求"><a href="#jq发送一个post请求" class="headerlink" title="jq发送一个post请求"></a>jq发送一个post请求</h2><p>jQuery提供一个全局放法 $.post(),这个方法是专门用来发送 post请求的</p><p>发送post请求格式：$.post(地址，携带给后端的数据，回调函数，期望后端返回的数据类型)</p><p>四个参数的意义和$.get()一模一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// post请求的参数不能在地址后面拼接  </span><br><span class="hljs-comment">//参数可以为字符串的形式</span><br>$.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;地址&#x27;</span>, <span class="hljs-string">&#x27;a=100&amp;b=200&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;, <span class="hljs-string">&#x27;string&#x27;</span>);<span class="hljs-comment">//不解析返回值</span><br><br><span class="hljs-comment">//参数可以为对象的形式</span><br>$.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;地址2&#x27;</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> &#125;, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;, <span class="hljs-string">&#x27;json&#x27;</span>);<span class="hljs-comment">//解析返回值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>javascript</title>
    <link href="/smiling-sheep.github.io/2022/06/17/javaScript/"/>
    <url>/smiling-sheep.github.io/2022/06/17/javaScript/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">解决小数运算的精确问题的方法</code></pre><p>l逻辑运算符的短路讲不讲 . 短路和运算符的优先级有冲突。。。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-attribute">3</span>-<span class="hljs-number">2</span> || a++   //<span class="hljs-number">1</span>  a为<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>ASCII 码  发音 as key码</p><p>一个编码，用来表示计算机输入的所有内容，最早把所有的可以输入的内容全部转换成二进制保存，给电脑上的每一个键，每一个输入都编了一个二进制码，一共128个，起了个名字叫做ASCII码</p><p>unicode编码</p><p>随之计算机的发展，128个ASCII码不够用，万国码（统一码）取名叫做unicode编码，里面前128个就是ASCII码，顺序添加了世界上大部分国家的文字，随着web技术的发展，在浏览器中统一使用一种八进制的unicode编码，我们叫做UTF-8</p><h1 id="js-备课"><a href="#js-备课" class="headerlink" title="js 备课"></a>js 备课</h1><ul><li><p>计算机语言 ：机器语言 汇编语言 高级语言</p></li><li><p>机器语言 ：计算机执行的二进制命令，都是0和1表示的。计算机最终执行的都是机器语言</p></li><li><p>汇编语言和机器语言一样实质上是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆  即用助记符代替机器指令的操作码（如：ADD表示加法）</p></li><li><p>高级语言：更接近自然语言，更符合人类的习惯，更容易理解和修改，高级语言经过编译器编译后，可以得到目标程序。   如 高级语言：js java php  c++</p></li><li><p>机器语言，汇编语言，高级语言的区别:语言越高级越接近自然语言，越远离硬件，效率也越低</p></li><li><p>机器语言，汇编语言，高级语言的联系：高级语言要经过编译程序翻译成汇编代码，汇编语言要经过汇编得到机器语言，计算机才能执行</p><p>即机器语言是给机器看的，高级语言是给人看的，汇编语言，介于两者之间是一个中间转换的产物</p></li><li><p>计算只能识别机器语言需要使用翻译器将高级语言翻译成二进制语言，目前有两种翻译类型，根据翻译的方式和时间节点不同分为了编译和解释</p><ul><li><p>编译语言 编译器在代码执行之前先把代码翻译成计算机可以理解的文件，比如EXE文件。这个EXE文件只需要一次编译就可以运行了， 除非修改代码，否则都不需要重新编译，所以编译型语言的程序执行效率高。（编译生成中间代码文件）</p><p>由于编译型语言在运行前进行了编译，编译器对有所得代码都进行了检查，这样就不会产生一些低级错误，比如使用了不存在的名字</p></li><li><p>解释型语言不需要在代码执行之前编辑，而是在运行过程中才翻译，解释器在代码运行时及时解释，并立即执行。解释一行执行一行，这样的解释型语言每执行一次就要翻译一次，效率比较低。</p><p>（当编译器在以解释的方式运行被称为解释器）</p></li></ul><p>js属于解释型语言，这就表示每句代码在运行时，系统才知道这句代码有没有错误，换句话说，</p></li><li><p>js与java没有关系</p></li><li><p>js是编程语言，html是标记语言</p><ul><li>编程语言有强的逻辑性和行为能力，是主动的，编程语言向计算机发出指令，命令计算机执行操作</li><li>标记语言是被动的，被计算机读取。不会像计算机发出指令，常用作格式化和链接</li></ul></li><li><p>计算机的组成</p><ul><li><p>硬件 ：输出设备，输入设备，cpu，硬盘，内存，主板</p><ul><li>cpu 是处理数据和运算</li><li>硬盘和内存用来存储数据（二进制数据）。硬盘是永久储存，内存是暂时储存数据</li><li>​</li></ul><p></p></li><li><p>软件:</p><ul><li>系统软件</li><li>应用软件</li></ul></li></ul></li><li><p>数据存储</p><ul><li>计算机内部使用二进制0和1表示数据</li><li>所有的数据，包括图片，视频等都是以二进制的数据的形式存储在硬盘中的</li><li>所有程序，包括操作系统，本质都是各种数据，以二进制的形式存储在硬盘中，我们平时所说的安装程序软件都是将程序文件复制到硬盘中</li></ul></li><li><p>数据存储单位：</p><p>最小的单位是位bit，1字节&#x3D;8bit，千字节：1kB&#x3D;1024B；1MB&#x3D;1024B，1GB&#x3D;1024MB，1TB&#x3D;1024GB</p></li><li><p>程序运行</p><ul><li><p>打开某个程序时，先将程序从硬盘中加载到内存中，cpu执行内存中的代码，这样做的原因是因为cpu运行速度太快了，而从硬盘中直接读取数据的速度很慢很浪费cpu的性能，所以才使用读取速度更快的内存来保存运行时的数据</p></li><li><p>内存使用的是电，硬盘是机械</p></li></ul></li><li><p>js是运行在客户端的脚本语言，脚本语言不需要编译。运行过程中js解析器（js引擎）逐行解析并执行</p></li><li><p>产生js的最初目的是进行表单的动态校验</p></li><li><p>浏览器分为两部分，渲染引擎和js引擎</p><ul><li>渲染引擎俗称内核，用来解析html和css。谷歌浏览器现在是blink内核，老版本的是webkit内核</li><li>js引擎：负责读取网页中的js代码，对其处理后运行。比如谷歌浏览器的v8引擎，是js引擎中运行最快的<ul><li>fireFox spiderMonkey</li><li>Ie   jscript&#x2F;Chakra</li><li>safari   javaScriptCore</li><li>chrome  v8</li><li>carakan  carakan</li></ul></li><li>浏览器本身并不执行js代码，通过js引擎来执行代码，js引擎在执行代码时逐行解析每一句源码（转换成机器语言），然后由计算机去执行。所以js语言归位脚本语言，会逐行解析执行</li></ul></li></ul><ul><li><p>js的简史</p><p>javascript是由网景公司发明的，最初起名为livescript，后来由于sun公司（发明了java）的介入更名为javascript，后来微软公司在最新的IE3浏览器中引入了自己对javascript的实现jscript，由于市面上存在两个版本的javascript，一个网景的javascript一个微软的jScript，为了确保在不同的浏览器上运行的javascript的标准一致，所以几个公司共同制定了js的标准，命名为ECMAScript</p></li><li><p>js是网景，后来和sun公司（sun公司开发的java）合作改名为javascript，想借用其名气</p></li></ul><ul><li><p>一个完整的javascript的组成</p><ul><li>ECMAScript    js语法</li><li>DOM  页面文档对象模型</li><li>BOM  浏览器对象模型  通过bom可以对浏览器窗口进行操作</li></ul></li><li><p>js引入方式</p><ul><li><p>行内式的js 直接写在开始标签内部</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> onclick=<span class="hljs-string">&quot;alert(&#x27;123&#x27;)&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>可以将少量js代码写在html标签的事件属性中（以on开头的属性）</p><p>在html中我们推荐使用双引号，在js中我嫩推荐使用单引号，注意引号多层嵌套使用的方式</p><p>结构与行为耦合，不便于维护，不推荐使用行内js，只在特殊情况下使用</p></li></ul><ul><li><p>可以将js代码写在a标签的href属性中，这样当点击超链接的时候，就会执行js代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hreft</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;让你点你就点&#x27;)；&quot;</span>&gt;</span>点一下试试<span class="hljs-tag">&lt;&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>内嵌式的js</p><p>在页面中使用script标签，在标签的标签体中直接写js代码</p><script teyp="text/javascript"> console.log('哼哼唧唧')</script><p>多在练习时使用此方式</p></li><li><p>外部js  推荐使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">teyp</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;new.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将js代码写在外部的js文件中，然后再通过script标签引入，这样可以在不同的文件中使用相同的js代码，也可以利用浏览器的缓存机制 </p><p>采用引入外部js文件时的script标签中不可以在写js代码了，即便写了浏览器也会自动忽略</p><p>如果需要可以另建一个script标签写</p></li></ul></li></ul><h3 id="script标签放的位置"><a href="#script标签放的位置" class="headerlink" title="script标签放的位置"></a>script标签放的位置</h3><p>有的将script标签放在head标签里，有的放在body闭合标签的前面</p><p>js执行的特点：加载后马上执行</p><p>将script标签放在head标签内，浏览器看到js文件会先下载完所有的js文件再解析其他的html。且一次只能加载两个js文件，这样会影响后面html的渲染造成页面内容呈现的滞后</p><p>且在js文件中可能会有对页面中元素的操作，但是html文件还没有解析</p><p>所以推荐将js文件放在页面body闭合标签之前，这样才能保证js加载前页面已经完成了DOM树的渲染</p><p>script标签放在body标签的闭合标签后面也可以加载执行，但是这是不规范的写法，不推荐</p><h2 id="js中的注释"><a href="#js中的注释" class="headerlink" title="js中的注释"></a>js中的注释</h2><ul><li><p>单行注释 &#x2F;&#x2F;被注释的内容  </p></li><li><p>多行注释  &#x2F;* 被注释的内容 多行  *&#x2F; 快捷键 alt+shift+A</p></li></ul><p>alt+shift+鼠标选择多个</p><p>control+shift+左右健 按单词的边界选中 </p><h2 id="js输入输出语句"><a href="#js输入输出语句" class="headerlink" title="js输入输出语句"></a>js输入输出语句</h2><ul><li><p>alert(123);  在浏览器中弹出提示框 只要不是纯数字都用引号括起来，单引号双引号都可以</p></li><li><p>prompt(‘提示信息’);   浏览器弹出输入框，用户可以输入，返回值就是用户输入的内容，且不论用户输入的是什么内容，返回结果都是一个字符串,用户点击取消返回值为null</p></li><li><p>confirm(‘需要用户确认的信息’) 弹出一个确认消息对话框，有确认和取消两个按钮，用户点击后会分别返回布尔值true和false</p><p>alert，comfirm ，prompt弹出框会阻断程序的继续执行，因为js是单线程的，弹出框弹出后，如果用户没有点击按钮表示弹出层没有结束，直到用户操作之后，才会继续向下执行代码</p></li><li><p>console.log(在浏览器控制台打印的输出信息);</p></li><li><p>document.write() 可以向页面的body中字写入一个内容</p><p>直接把内容书写在页面上，所以可以解析html标签</p></li></ul><h2 id="js的书写规则"><a href="#js的书写规则" class="headerlink" title="js的书写规则"></a>js的书写规则</h2><ul><li><p>js中是严格区分大小写的  在html中没有严格区分 在html中&#96;&#96;&#96; <a>a标签</A>&#96;&#96;可以正常显示，单是js中不可以</p></li><li><p>js中的每一条语句后面以；结尾</p><p>如果不写分号，浏览器会自动添加，但是会消耗一些系统化资源，有时候也会加错分号，所以我们必须写分号</p></li><li><p>js中会忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化</p></li></ul><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>作用：字面量都是一些不可改变的值，是用于表达一个固定值的表示法，又叫做常量</p><p>通俗的讲字面量就是所见即所得，当我们看到字面的时候就会知道他是什么类型的数据，值是多少</p><p>比如说：数字字面量：1，2，3</p><p>​字符串字面量：”你好吗”</p><p>​布尔值字面量：true false</p><p>字面量都是可以直接使用的，但是我们一半都不会直接使用字面量</p><h3 id="语句和表达式"><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h3><p>js程序执行单位为行，也就是一行一行的执行，一般情况下，每一行就是一个语句</p><p>语句是为了完成某种任务而进行的操作，比如<code>var a=1+3;</code>就是一行赋值语句，这条语句先用var命令声明了变量a，然后再将1+3的运算结果赋值给变量a</p><p>1+3叫做表达式，是一个为了得到返回值的计算式，语句和表达式的区别语句是为了执行某种操作，一般情况下不需要返回值；表达式式为了得到返回值，一定会返回一个值。凡是js中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边预期是一个值，因此可以放置各种表达式；</p><p>语句以分号结尾，一个分号就是一个语句结束，多个语句可以写在一行如<code> var a=1+3;var b=&#39;abc&#39;;</code></p><p>分号前面可以没有任何内容，js引擎将其视为空语句<code>;;;</code>,这表示3个空语句，表达式不需要分号结尾，一但在表达式的后面添加分号，则js引擎就将表达式视为语句，这样就产生了一些没有意义的语句。如1&#x3D;3；’abc’;这两行语句只是单纯的产生一个值，并没有任何实际的意义</p><h3 id="表达式-返回值"><a href="#表达式-返回值" class="headerlink" title="表达式 返回值"></a>表达式 返回值</h3><ul><li><p>表达式是由数字，变量，运算符所组成的式子</p></li><li><p>表达式最终都会有一个结果，这个结果就是返回值</p></li><li><p>在js中，我们是将左边表达式计算出的结果返回给右边</p><p><code>var userName=1+1;</code></p></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量就是在内存中开辟一块存储空间用来存放数据，变量在程序运行中保存一个中间值使用</p><p>通俗的将变量就像个存储东西盒子，变量可以用来存储字面量，而且变量的值是可以直接改变的</p><p>变量可以更加方便我们使用字面量，所以在开发中我们都是通过变量去保存一个字面量，而很少使用字面量</p><p>（可以通过变量对字面量进行描述，即给变量起名时就可以知道是干啥用的）</p><ul><li><p>声明变量 使用关键字 var 变量名;</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pony"><span class="hljs-comment">//声明单个变量</span><br><span class="hljs-keyword">var</span> <span class="hljs-meta">box</span>;  声明了一个名为<span class="hljs-meta">box</span>的变量本质是在内存中为<span class="hljs-meta">box</span>变量开辟一块存储空间<br><span class="hljs-comment">//声明多个变量只使用一个var关键字，多个变量之间使用英文逗号,分隔</span><br><span class="hljs-keyword">var</span> box1,box2,box3;<br></code></pre></td></tr></table></figure></li><li><p>关键字：系统规定有特殊意义的字，我们不能再使用关键字和保留字声明变量</p><p>​    保留字：系统现在没有用上但是留作日后再用的字，等同于关键字</p><p>标识符：我们为变量，函数，属性，参数等所起的名就是标识符（标识符不能使用关键字或保留字命名，表示要有意义）</p></li><li><p>变量的命名规则，必须遵守，不遵守会报错</p><ul><li>由字母（a-zA-Z），数字（0-9），下划线，美元符号$符号组成</li><li>不能以数字开头</li><li>严格区分大小写 即 box 和 Box是俩个不同的变量</li><li>不能使用关键字和保留字 如var</li></ul></li></ul><ul><li><p>变量命名规范，建议遵循，因为大家都这样nj</p><ul><li><p>由多个单词组成的变量名采用驼峰命名法，即第一个单词的首字母小写后面单词的首字母要大写myNameIsApple </p></li><li><p>不要使用中文命名</p></li><li><p>见名知意</p></li></ul><p>变量名虽然是任意起的，但是要尽量通俗易懂有意义，即userName passWord</p><p>可以通过变量对字面量进行描述，即给变量起名时就可以知道是干啥用的</p></li><li><p>尽量不要使用name命名，name虽然不是关键字但是在许多系统中都有特殊的作用（这是扩展）</p><p>name在没有声明且没赋值的情况下使用不报错，返回结果为空</p><ul><li>window是js的全局对象，有一个天生自带的name属性，作用是：在iframe标签和name属性合作进行跨域的，特点是：被固定为字符串类型了，不管 你给name属性赋值为什么数据类型，他都会自动转换成字符串</li></ul></li><li><p>变量赋值   使用赋值符号&#x3D;<br><code>box=123;   表示将=右边的值放入到box变量中</code></p></li><li><p>变量的初始化  就是声明一个变量并赋值，声明和赋值同时进行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> box=<span class="hljs-number">123</span>;  声明变量box，并给box变量赋值为<span class="hljs-number">123</span>；<br><span class="hljs-keyword">var</span> box1=<span class="hljs-number">123</span>, 同时      mkk<br>同时定义多个变量，有的赋值，有的不赋值<br><span class="hljs-keyword">var</span> n1=<span class="hljs-number">100</span>，n2,n3=<span class="hljs-number">300</span>  <span class="hljs-comment">//逗号表示这一句话没有结束，没有符号的换行或者分号表示这句话结束了</span><br>等价于<br><span class="hljs-keyword">var</span> n1=<span class="hljs-number">100</span>,<br>    n2,<br>    n3=<span class="hljs-number">300</span><br></code></pre></td></tr></table></figure></li><li><p>我们通过变量名获取变量</p></li><li><p>变量声明与赋值的特殊情况</p><ul><li>只声明不赋值，使用变量，返回结果是undefined</li><li>不声明直接赋值  使用变量可以正常使用，不会报错,弱类型，不推荐这样使用，建议先定义后使用</li><li>不声明不赋值直接使用变量的情况下，会报错</li></ul></li><li><p>更新变量 </p><p>新赋的值会覆盖原来的值,原来的值就没办法 获取了</p><p><code>box=456; box变量的最终结果是456，原来的123已经被覆盖掉了 </code> </p><p>作业：两个变量交换值</p></li><li><p>当使用输出语法的时候，只要不用引号，就表示输出一个变量</p><p>console.log(box1)</p></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数字 文字 （汉字，英文，日文）</p><p>ji中数据也是有分类，不同的数据类型所占的内存空间大小不同，且可执行的操作不同，比如数字类型的数据可以进行比较运算，字符串类型的数字可以进行字符串的链接</p><ul><li><p>js的是弱类型的语言，我们在声明变量时并没有指定变量的类型，变量的类型由所赋给他的值的类型决定</p></li><li><p>基本数据类型</p><ul><li>数字类型 Number 包含整形值和浮点型值</li><li>字符串类型 String </li><li>未定义类型 Undefined  undefined</li><li>空类型 Null null</li><li>布尔类型 Boolean     true false</li></ul></li><li><p>复杂数据类型（地址数据类型&#x2F;引用数据类型）</p><p>Object</p><p>​Function</p><p>​Array</p></li></ul><h2 id="typeof-检测数据类型"><a href="#typeof-检测数据类型" class="headerlink" title="typeof 检测数据类型"></a>typeof 检测数据类型</h2><p>使用typeof 运算符来判断给定变量或数据的数据类型,返回结果是操作数的数据类型名称，是一个字符串类型的结果</p><ul><li><p>有两种格式</p><ul><li><p>typeOf 要检测的数据   （空格） 只能检测紧跟着的一个变量</p></li><li><p>typeof(要检测的数据)  先运算小括号里的结果，然后再使用typeof 去检测结果的数据类型</p></li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">需求：想要计算<span class="hljs-number">100</span>+<span class="hljs-number">200</span> 的结果的数据类型<br><span class="hljs-keyword">var</span> a=<span class="hljs-number">100</span>,b=<span class="hljs-number">200</span>;<br><span class="hljs-keyword">var</span> res=<span class="hljs-built_in">typeof</span> a+b; <span class="hljs-comment">//先匀速typeof a ，然后用返回值去和b进行加法运算</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res)<br><span class="hljs-keyword">var</span> res2=<span class="hljs-built_in">typeof</span>(a+b); <span class="hljs-comment">//先运算a+b的值，然后再用typeog去检测300的数据类型</span><br></code></pre></td></tr></table></figure><ul><li><p>typeof的返回值</p><ul><li><p>返回值是一个字符串</p></li><li><p>当两个及以上typeof 连用的时候，一定得到string</p></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> res3=<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">typeof</span> b;<br><span class="hljs-comment">//从右向左进行运算 ，先检测b的数据类型，再检测右侧检测后的返回值的数据类型</span><br></code></pre></td></tr></table></figure><ul><li><p>只能准确的检测基本数据类型 </p><ul><li><p>数值 Numbe                 console.log(typeof 122)</p></li><li><p>字符串 String           </p></li><li><p>布尔值 Boolean</p></li><li><p>undefined undefined</p></li><li><p>null Objet                     *</p></li></ul></li></ul></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-number">12</span>);  <span class="hljs-comment">//&quot;number&quot;</span><br></code></pre></td></tr></table></figure><h3 id="数据类型总结："><a href="#数据类型总结：" class="headerlink" title="数据类型总结："></a>数据类型总结：</h3><ul><li>简单数据类型 null ，</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a=<span class="hljs-literal">null</span>;<br><span class="hljs-built_in">typeOf</span>(a)   <span class="hljs-comment">//返回结果是object</span><br></code></pre></td></tr></table></figure><p>如果一个变量打算以后存储为对象，暂时没有想好放啥，就可以先将变量赋值为null</p><ul><li><p>简单数据类型即基本数据类型或者值类型，复杂类型又叫做引用类型</p><ul><li>值类型：基本数据类型在存储时变量中存储的是值本身，因此叫做值类型</li></ul><p>string number boolean undefined null</p><ul><li>引用数据类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型</li></ul><p>通过new关键字创建的对象（系统对象，自定义对象），如Object，Array，Date等</p></li></ul><h3 id="数值型Number"><a href="#数值型Number" class="headerlink" title="数值型Number"></a>数值型Number</h3><ul><li><p>一切十进制表示的数字</p></li><li><p>一切浮点数（小数）</p></li><li><p>其他进制表示的数字 16 8 2进制</p></li><li><p>科学计数法</p><p>比较大的数字使用科学计数法表示 2e5     2*10的5次方</p></li><li><p>NaN   </p><p>not a Number 非数字</p></li></ul><ul><li><p>数字型</p><p>包含整形值和浮点形值。2 和2.3</p></li><li><p>数字型进制</p><ul><li><p>十进制  </p><ul><li>0～9 逢10进1</li></ul></li><li><p>二进制  </p><ul><li>0和1  逢2进1</li><li>js中2进制的数字在前面加0b     0b100</li></ul></li><li><p>八进制  </p><ul><li>0～7 逢8进1 </li><li>在js中表示八进制在数字前加0       </li><li>010 转换为十进制就是8</li></ul></li><li><p>十六进制 </p></li><li><p>0～9 a~f   </p><ul><li><p>在js中表示十六进制在数字前加0x</p></li><li><p>常见的颜色取值#dddddd就是十六进制</p><p>var a&#x3D;0xff a变量存储的是一个十六进制的ff</p></li></ul></li></ul><p>在控制台输出的都是转为十进制的数值</p></li><li><p>数字型的范围.</p><p>js中数值的最大值和最小值</p><p>Number.MAX_VALUE </p><p>Number.MIN_VALUE </p></li><li><p>数字型的三个特殊值. </p><p>Infinity 正无穷 </p><p>-Infinity 负无穷</p><p>NaN   待代表一个非数字</p><p>​NaN不和任何数相等，包含它自身  NaN&#x3D;&#x3D;NaN  返回false</p><p>isNaN现在不讲</p><ul><li><p>isNaN(参数) 这个函数用来判断参数是否为非数字，如果是非数字的数据返回true，是数字的话返回false</p></li><li><p>isNaN(参数) 参数要先通过Number()进行数据转换再判断</p></li></ul></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><p>在js中使用引号包围的文本就是字符串，引号可以是双引号也可以是单引号，反引号</p><p>因为在html中的标签属性值使用的是双引号，所以我们推荐在js中的字符串使用单引号</p></li><li><p>字符串嵌套的原则是：外单内双，或外双内单</p></li><li><p>字符串是一段文本内容，是一个字符一个字符链接起来的内容</p><p>当引号包围的是纯数字是，也不是数值类型，而是字符串类型 ‘123’ 是1，2，3三个字符的链接在一起</p></li></ul><ul><li><p>在字符串里空格也是占位的    ”hello word“ 11个字符的链接</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;123&#x27;</span>,b=<span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a,b) 不同的数据类型在控制台打印出来的颜色是不同的<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>字符串转义字符</p><p>在字符串中有些字符是没有办法直接使用的，需要使用转义字符，转义字符是以\开头的字符</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\\</span> 在衣字符串内输入<span class="hljs-string">\前要使用转义字符转义一下</span><br><span class="hljs-string">\n</span> 在字符串中换行  n是值newline<br><span class="hljs-string">\t</span> tab缩进<br><span class="hljs-string">\b</span> 空格 blank<br></code></pre></td></tr></table></figure></li><li><p>字符串拼接</p><p>字符串拼接使用+</p><p>字符串与任何类型的数据拼接时，都是将其他类型的数据先转为字符串，再进行拼接，返回一个拼接后的新字符串</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>+<span class="hljs-string">&#x27;小明&#x27;</span>)  <span class="hljs-comment">// 你好小明</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>+<span class="hljs-number">12</span>) <span class="hljs-comment">//你好12</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>+<span class="hljs-literal">true</span>)<span class="hljs-comment">//你好true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;100&#x27;</span>+<span class="hljs-number">100</span>)   <span class="hljs-comment">//100100</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">100</span>+<span class="hljs-number">100</span>)<span class="hljs-comment">//200</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">100</span>+<span class="hljs-literal">true</span>);     *<span class="hljs-comment">//101</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">100</span>+<span class="hljs-literal">false</span>);     *<span class="hljs-comment">//100</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">100</span>+<span class="hljs-literal">null</span>) <span class="hljs-comment">//100</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">100</span>+undefinde) <span class="hljs-comment">//NaN</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">10</span>+<span class="hljs-number">10</span>+<span class="hljs-string">&#x27;20&#x27;</span>);  <span class="hljs-comment">//2020</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;10&#x27;</span>+<span class="hljs-number">10</span>+<span class="hljs-number">20</span>);<span class="hljs-comment">//101020</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">10</span>+<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">//10加上一个空的字符串 返回一个字符串 &#x27;10&#x27;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-number">2</span>*<span class="hljs-number">3</span>);<span class="hljs-comment">//&#x27;306&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>加号+，两端都是数值或者布尔值的时候则执行相加的操作</strong></p><p> <strong>加号+，两端只要有一个是字符串就执行字符串拼接的操作</strong></p><ul><li><p>字符串与变量拼接</p><p><strong>变量不能写在引号内</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> userName=<span class="hljs-string">&#x27;小明&#x27;</span>；<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>+userName)；<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>+userName+<span class="hljs-string">&#x27;,你吃饭了吗&#x27;</span>)；<br></code></pre></td></tr></table></figure><p>经常遇到字符串与变量拼接，因为变量可以动态改变里面的值</p></li><li><p>字符串的长度。</p><ul><li><p>字符串的长度就是字符串里面字符的个数 包含空格</p></li><li><p>使用字符串的length属性获取</p></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> userName=<span class="hljs-string">&#x27;小明&#x27;</span>；<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(userName.<span class="hljs-built_in">length</span>)； <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><ul><li><p>布尔数据类型有两个值，true 和 false true为真在计算机存储是为1   false为假在计算机存储是为0</p></li><li><p>布尔值在运算过程中的意义：主要用来做判断</p><ul><li><p>a&gt;b 如果得到true 表示这个表达式成立 真的</p></li><li><p>a&gt;b 如果得到false 表示这个表达式不成立 假的</p></li></ul></li></ul><p>布尔值有字符串相加，进行字符串的拼接</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">true</span>+<span class="hljs-string">&quot;你好&quot;</span>) <span class="hljs-comment">//true你好</span><br><br></code></pre></td></tr></table></figure><p>布尔值和数值进行运算时,true为1，false为0</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">true</span>+<span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">false</span>+<span class="hljs-number">1</span>) <span class="hljs-comment">//0</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">false</span><span class="hljs-number">-1</span>) <span class="hljs-comment">//-1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">true</span><span class="hljs-number">-1</span>) <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>undefined表示未定义</p><p>变量被声明但是没有被赋值，变量会有一个默认值就是undefined，表示未知数据类型即未定义类型</p><p>即这里本该有一个值，但是没有，就是undefined</p><p>undefined与字符串相加，任何类型的数据与字符串相加都是执行字符串拼接的操作</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">undefined</span>+<span class="hljs-string">&#x27;你好&#x27;</span>) <span class="hljs-comment">//undefined你好</span><br></code></pre></td></tr></table></figure><p> undefined与数值相加最后结果是NaN。 undefined 转为数字时为NaN</p><p><code>console.log(undefined+11)  //NaN</code></p><p>undefined与布尔值相加</p><p><code>console.log(undefined+true)  //NaN</code></p><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>null表示空值，即该处现在的值为空，即这里有一个空值</p><p>一个变量声明后赋值为null，表示变量里面存储的值是空的</p><p>var b&#x3D;null；</p><p>null要赋值为null才能得到空值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">true</span>+<span class="hljs-literal">null</span>)  <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>+<span class="hljs-literal">null</span>)  <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>null转为数字时为0</p><p>在最初的js中只设置了null来表示“无”，但是null在转为数值的时候会自动转为0，这样很不容易发现错误，因此又设计了undefined，区别是 null表示真正的空值，转为数值是为0，undefined表示 此处无定义的原始值，转为数值是为NaN</p><h3 id="字面量-1"><a href="#字面量-1" class="headerlink" title="字面量"></a>字面量</h3><p>作用：字面量是用于表达一个固定值的表示法，又叫做常量</p><p>通俗的讲字面量就是所见即所得，当我们看到字面的时候就会知道他是什么类型的数据，值是多少</p><p>比如说：数字字面量：1，2，3</p><p>​字符串字面量：”你好吗”</p><p>​布尔值字面量：true false</p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>js是弱类型的语言，变量没有数据类型的限制，可以随时赋任何类型的值。变量的类型只有在运行时才知道。</p><p>虽然变量的类型是不确定的，但是各种运算符对运算子的数据类型是有要求的，当运算符发现运算子的类型与预期的不符，就会自动转换运算子的类型。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;66&quot;</span>-<span class="hljs-string">&quot;2&quot;</span>   减法运算符预期左右两侧的都是数字类型，发现不是，就会将他们自动转换为数值类型<br></code></pre></td></tr></table></figure><ul><li><p>转换分为：强制转换 自动转换</p><ul><li>强制转换是使用Number(),String()，Boolean(),这三个函数将各种类型的值分别转为数值，字符串，布尔值</li><li>自动转换，比如<code>&quot;123&quot;+123</code>数值与字符串相加，js是自动发生的数据转换，用户是不可见的</li></ul><h3 id="常见的三种方式转化："><a href="#常见的三种方式转化：" class="headerlink" title="常见的三种方式转化："></a>常见的三种方式转化：</h3></li></ul><h4 id="转为字符串类型"><a href="#转为字符串类型" class="headerlink" title="转为字符串类型"></a>转为字符串类型</h4><ul><li><p>你要转换的数据.toString()   <code> var userName=17; console.log(userName.toString())</code> </p><ul><li><p>undefined和null不能转换</p><p>（在js中.表示的）</p></li></ul></li><li><p>String(你要转换的数据) 强制转换 <code>String(234)</code></p><ul><li>任何数据类型都可以转换</li></ul></li><li><p>使用加号拼接字符串。 （自动转换）”你好”+234</p></li></ul><h4 id="转为数值类型-（重点）"><a href="#转为数值类型-（重点）" class="headerlink" title="转为数值类型 （重点）"></a>转为数值类型 （重点）</h4><ul><li><p>Number()   Number()函数可以将任意类型的值转换为数值类型</p><p>格式：Number(你要转换的数据)； 返回转换好的数据</p><p>特点：</p><ul><li>会把你要转换的内容当作一个整体来看待</li><li>能转换成数字结果，就转换成数字结果</li><li>不能转换成数字结果就返回NaN ，NaN也是数值类型，表示非数字</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>);<span class="hljs-comment">//0</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">undefined</span>);<span class="hljs-comment">//NaN</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">true</span>);<span class="hljs-comment">//1</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">NaN</span>);<span class="hljs-comment">//NaN</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>paseInt(string)函数  解析一个字符串，返回一个整数</p><p>（先看参数字符串的首个字符是否是数字，如果是数字就对该字符串进行解析，直到到达数字的末端为止然后以数值的形式返回数字）</p><ul><li>只有字符串的一个数字会被返回 <code>parseInt(&#39;12dr5&#39;) //12</code></li><li>如果字符串的第一个字符不能被转换为数值，则返回NaN <code>parseInt(&#39;dr5&#39;) //NaN</code></li><li>开头和结尾的空格是允许的   <code>parseInt(&#39; 88 99&#39;)</code></li></ul><p>（千）语法：parseInt(你要转换的数据)，返回转换好的数据</p><p>特点：把你要转换的任何内容一位一位的看，如果第一位不能转换为数字，那么直接返回NaN</p><p>如果第一位可以转换为数字，就继续向后看第二位，第一位保留，以此类推直到一个不能转换成合法数字的位置为止</p><p>案例：一个数字，只保留三位小数，就是从小数点后数三位，剩下的不要，使用paseInt()方法，能取整，首先将数字扩大1000倍，然后再取整，取整后，再缩小1000倍（不考虑四舍五入的情况）</p><p>作业：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 把一个四位数字，拆成一位一位的，即通过计算得到4个变量</span><br>var num=<span class="hljs-number">2345</span>;<br><span class="hljs-comment">// 方法1</span><br>var a=parse<span class="hljs-constructor">Int(<span class="hljs-params">num</span><span class="hljs-operator">/</span>1000)</span>;<span class="hljs-comment">//得到千位的数字</span><br>var b=parse<span class="hljs-constructor">Int((<span class="hljs-params">num</span>-<span class="hljs-params">a</span><span class="hljs-operator">*</span>1000)</span>/<span class="hljs-number">100</span>)<span class="hljs-comment">//num-a*1000得到百位数再除以100后取整，得到百位的上数字</span><br>var c=parse<span class="hljs-constructor">Int((<span class="hljs-params">num</span>-<span class="hljs-params">a</span><span class="hljs-operator">*</span>1000-<span class="hljs-params">b</span><span class="hljs-operator">*</span>100)</span>/<span class="hljs-number">10</span>)<span class="hljs-comment">//得到十位的上数字</span><br>var d=parse<span class="hljs-constructor">Int((<span class="hljs-params">num</span>-<span class="hljs-params">a</span><span class="hljs-operator">*</span>1000-<span class="hljs-params">b</span><span class="hljs-operator">*</span>100-<span class="hljs-params">c</span><span class="hljs-operator">*</span>10)</span>)<span class="hljs-comment">//得到个位上的数字</span><br>console.log(num,a,b,c,d);<br><span class="hljs-comment">// 方法2</span><br>var a2=parse<span class="hljs-constructor">Int(<span class="hljs-params">num</span><span class="hljs-operator">/</span>1000)</span>;<span class="hljs-comment">//得到千位的数字</span><br>var b2=parse<span class="hljs-constructor">Int(<span class="hljs-params">num</span>%1000<span class="hljs-operator">/</span>100)</span><span class="hljs-comment">//num和1000取余，剩下的就是不能整除1000的部分，再除以100，取整得到百位的数字</span><br>var c2=parse<span class="hljs-constructor">Int(<span class="hljs-params">num</span>%100<span class="hljs-operator">/</span>10)</span><span class="hljs-comment">//得到十位的数字</span><br>var d2=parse<span class="hljs-constructor">Int(<span class="hljs-params">num</span>%10)</span><span class="hljs-comment">//得到个位的数字</span><br>console.log(num,a2,b2,c2,d2);<br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog">给定一个随机秒数，换算成多少天多少小时多少分钟多少秒<br>结果为xx天xx小时xx分钟xx秒<br><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">time</span>=<span class="hljs-number">1234567</span>;<span class="hljs-comment">//要进行计算的总s数</span><br><span class="hljs-comment">// 一天有多少秒 ：24*60*60 一小时有60*60秒 一分钟有60秒</span><br><span class="hljs-comment">// 得到天数</span><br><span class="hljs-keyword">var</span> d=parseInt(<span class="hljs-keyword">time</span>/(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>));  <span class="hljs-comment">//用变量除以一天的总秒数，然后取整，得到一共有多少天</span><br><span class="hljs-comment">// 得到小时</span><br><span class="hljs-keyword">var</span> h=parseInt(<span class="hljs-keyword">time</span>%(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>)/(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>));<span class="hljs-comment">//用取余的方式去掉整天的秒数后，在计算</span><br><span class="hljs-comment">//得到分钟</span><br><span class="hljs-keyword">var</span> s=parseInt(<span class="hljs-keyword">time</span>%(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>)/<span class="hljs-number">60</span>);<span class="hljs-comment">//用取余的方式去掉整天和整小时的秒数后小时后，再计算</span><br><span class="hljs-comment">// 得到秒钟即得到不够一分钟的秒数</span><br><span class="hljs-keyword">var</span> m=<span class="hljs-keyword">time</span>%<span class="hljs-number">60</span>;<span class="hljs-comment">//直接取余60，得到不够一分钟的秒数</span><br>console<span class="hljs-variable">.log</span>(<span class="hljs-keyword">time</span>+<span class="hljs-string">&quot;s为：&quot;</span>+d+<span class="hljs-string">&quot;天&quot;</span>+h+<span class="hljs-string">&quot;小时&quot;</span>+s+<span class="hljs-string">&quot;分钟&quot;</span>+m+<span class="hljs-string">&quot;秒&quot;</span>)<span class="hljs-comment">//1234567s为：14天6小时56分钟7秒</span><br></code></pre></td></tr></table></figure></li><li><p>parseFloat(string)函数  解析一个字符串，返回一个浮点数</p><p>&#96;&#96;&#96;parseInt(‘234.4’)  &#x2F;&#x2F;234&#96;</p><p><code>parseFloat(&#39;234.4&#39;)  //234.4</code></p><p>(千)和parseInt()的解析模式一样，只不过多认识一个小数点</p></li><li><p>除了加法运算符有可能会将运算子转换为字符串，其他非加法的数学运算符都会把运算子自动转为数值</p><p>减 乘 除 取余，和Number的解析规则一样将数据看作一个整体解析</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&#x27;5&#x27;</span> - <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-comment">// 3</span><br><span class="hljs-string">&#x27;5&#x27;</span> * <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-comment">// 10</span><br><span class="hljs-literal">true</span> - <span class="hljs-number">1</span>  <span class="hljs-comment">// 0</span><br><span class="hljs-literal">false</span> - <span class="hljs-number">1</span> <span class="hljs-comment">// -1</span><br><span class="hljs-string">&#x27;1&#x27;</span> - <span class="hljs-number">1</span>   <span class="hljs-comment">// 0</span><br><span class="hljs-string">&#x27;5&#x27;</span> * []    <span class="hljs-comment">// 0</span><br><span class="hljs-literal">false</span> / <span class="hljs-string">&#x27;5&#x27;</span> <span class="hljs-comment">// 0</span><br><span class="hljs-string">&#x27;abc&#x27;</span> - <span class="hljs-number">1</span>   <span class="hljs-comment">// NaN</span><br><span class="hljs-literal">null</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// 1</span><br><span class="hljs-literal">undefined</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><ul><li><p>一元运算符也会把运算子转成数值（扩展？？）</p><p>取正负值 ，和Number的解析规则一样  （千）</p><p>格式：+变量  -变量</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">+<span class="hljs-string">&#x27;abc&#x27;</span> <span class="hljs-regexp">//</span> NaN<br>-<span class="hljs-string">&#x27;abc&#x27;</span> <span class="hljs-regexp">//</span> NaN<br>+true <span class="hljs-regexp">//</span> <span class="hljs-number">1</span><br>-false <span class="hljs-regexp">//</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>注意：null转为数值时为0 undefined转为数值是为NaN</strong></p><h4 id="转为布尔类型"><a href="#转为布尔类型" class="headerlink" title="转为布尔类型"></a>转为布尔类型</h4><p>Boolean(参数 你要转换的数据) 函数可以将任意类型的值转为布尔值</p><p>它的转换规则是：</p><ul><li><p>代表空，否定的值会被转换为false  ；undefined ，null，  NaN， 0，  “”(空字符串)</p></li><li><p>其他的值都会被转换为true</p></li><li><p>true和false这两个布尔值不会发生变化</p></li><li><p>!取反 返回数据所对应的布尔值的取反后的布尔值</p></li><li><p>双取反 返回数据所对应的布尔值</p></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>做算术运算时的符号</p><p>运算符的运算子个数不同分为：一元运算符 ，二元运算符，三元运算符</p><p>运算符的分类：赋值运算符，算术运算符，比较运算符，逻辑运算符，递增递减运算符，三元运算符</p><p>书写规范：除了一元运算符外，运算符左右两侧要有空格</p><p>一元运算符：一个运算符只有一个匀运算子就能运算</p><ul><li><p>取正运算符 +</p><ul><li>取负运算符 -</li><li>取反运算符 !</li><li>自增运算符 ++</li><li>自减运算符 –</li></ul></li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul><li><p>+ — * &#x2F; %(取余，返回除法的余数)</p></li><li><p>+运算符有两个含义 字符串拼接，数学运算</p></li><li><p>%取余的主要用途是判断一个数是否可以被整除，余数为0就是可以被整除</p><p>被除数&#x2F;除数&#x3D;商…余数，得到不能被整除的部分</p><p>3%10 得到3 ；10%3 得到1</p></li><li><p>** 取幂 a**b就是a的b次方</p></li><li><p>浮点数在运算里会有精确度的问题,这是因为小数本身就很小了在准换为二进制时容易出现误差</p></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(<span class="hljs-number">0</span>.<span class="hljs-number">1</span>+<span class="hljs-number">0</span>.<span class="hljs-number">2</span>); //<span class="hljs-number">0</span>.<span class="hljs-number">300000000004</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">1</span>+<span class="hljs-number">0</span>.<span class="hljs-number">2</span>==<span class="hljs-number">0</span>.<span class="hljs-number">3</span>; //false<br></code></pre></td></tr></table></figure><p><strong>不要判断两个浮点数是否相等</strong></p><p>算术运算的顺序，先乘除后加减，如果有括号先算括号里的</p><h3 id="自增和自减运算符"><a href="#自增和自减运算符" class="headerlink" title="自增和自减运算符"></a>自增和自减运算符</h3><ul><li>自增自减运算符只有一个运算子是一元运算符</li><li>自增自减运算符必须和变量配和 使用</li><li>自增自减运算符是仅有的可以改变变量值的运算符，其他的运算符都不会改变变量的值</li></ul><h4 id="自增运算符"><a href="#自增运算符" class="headerlink" title="自增运算符"></a>自增运算符</h4><p>之前我们想要给一个变量加1时要 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var a</span>=1;<br><span class="hljs-attribute">a</span>=a+1;<br></code></pre></td></tr></table></figure><p>有了自增运算符我们可以 ++a或a++。最终a都是2 他们等同于a&#x3D;a+1;</p><p>自增运算符放在变量的前面叫做前置自增运算符（++变量），放在变量的后面叫做后置自增运算符（变量++）</p><p><strong>前置自增和后置自增单独运行时的结果是一样的，但前置或后置自增运算符和其他变量或数字一起参与运算时所起的效果就不同了</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-attribute">console</span>.log(++a + <span class="hljs-number">2</span>); //<span class="hljs-number">4</span> a为<span class="hljs-number">2</span><br><span class="hljs-attribute">console</span>.log(a++ + <span class="hljs-number">2</span>); //<span class="hljs-number">3</span> a为<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>前置自增是，变量先自增返回自增后的变量再参与运算（先己后人）</p><p>后置自增是，变量先返回原值参与运算，再自增（先人后己）</p><p>练习</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(++a + b++);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a++ + ++b);<br><br><br><span class="hljs-keyword">var</span> n=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">var</span> res=n++ + ++n + ++n +n++<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res);<span class="hljs-comment">//28 n此时为9</span><br>.....<br>....多练<br></code></pre></td></tr></table></figure><p><strong>推荐在开发时使用后置自增（自减），并且代码独占一行。a++或1–</strong></p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>是两个数据进行比较时所用的运算符，比较后会返回一个布尔值（true或false）作为结果</p><p>小于&lt;   左边小于右边，返回true，左边不小于右边返回false</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(<span class="hljs-number">10</span>&lt;<span class="hljs-number">20</span>);<br><span class="hljs-attribute">console</span>.log(<span class="hljs-number">10</span>&lt;<span class="hljs-number">10</span>);<br><span class="hljs-attribute">console</span>.log(<span class="hljs-number">10</span>&lt;<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>大于&gt;;&lt;&#x3D;;&gt;&#x3D;;&#x3D;&#x3D;(等于);!&#x3D;（不等于）;&#x3D;&#x3D;&#x3D;（全等）;!&#x3D;&#x3D;(不全等)；</p><ul><li><p>&#x3D;&#x3D; 等于会转换数据类型，将其他数据类型转换为数值 ，只要求值相等,不管数据类型是否一样</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">true</span>==<span class="hljs-number">1</span> //<span class="hljs-literal">true</span><br><span class="hljs-attr">&#x27;2&#x27;</span>==<span class="hljs-number">1</span> //<span class="hljs-literal">false</span><br><span class="hljs-attr">&#x27;1&#x27;</span>==<span class="hljs-number">1</span> //<span class="hljs-literal">true</span><br><span class="hljs-attr">&#x27;&#x27;</span>==<span class="hljs-number">0</span> //<span class="hljs-literal">true</span><br><span class="hljs-attr">null</span>==undefined //<span class="hljs-literal">true</span><br><span class="hljs-attr">null</span>===undefined //<span class="hljs-literal">false</span><br><span class="hljs-attr">NaN</span>==NaN //<span class="hljs-literal">false</span><br><span class="hljs-attr">NaN</span>===NaN //<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;&#x3D; 全等要求数值和数据类型都一致</p></li><li><p>!&#x3D;&#x3D; 不全等，比较两边的数据是不是不等，值和数据类型都要比较，当数据类型不一样的时候，返回false</p><p><code>console.log(1!==&#39;1&#39;);  //false</code></p></li><li><p>&#x3D; 赋值运算符，将右边的值赋值给左边</p></li></ul><h3 id="逻辑运算符-或且非"><a href="#逻辑运算符-或且非" class="headerlink" title="逻辑运算符 或且非"></a>逻辑运算符 或且非</h3><p>逻辑运算符对数据进行逻辑运算</p><p>（阮一峰：</p><p>布尔运算符用于将表达式转为布尔值，一共包含四个运算符。</p><ul><li>取反运算符：<code>!</code></li><li>且运算符：<code>&amp;&amp;</code></li><li>或运算符：<code>||</code></li><li>三元运算符：<code>?:</code></li></ul><p>）</p><h4 id="取反运算符"><a href="#取反运算符" class="headerlink" title="取反运算符"></a>取反运算符</h4><ul><li>符号是！ （非），用来取一个布尔值的相反值</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">!<span class="hljs-literal">true</span> <span class="hljs-comment">//false</span><br>!<span class="hljs-literal">false</span> <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li><p>对于非布尔值，取反运算符会将其转为布尔值取反</p></li><li><p>将表示否定或空的值取反操作后为true</p></li></ul><p>​undefined</p><p>​null</p><p>​false</p><p>​0 </p><p>​NaN</p><p>​“” 空字符串</p><ul><li><p>其他的值取反后都为false</p></li><li><p>!! 两个取反操作等于将其转为对应的布尔值</p></li></ul><h4 id="且运算符"><a href="#且运算符" class="headerlink" title="且运算符"></a>且运算符</h4><p>&amp;&amp; 简称与，和的意思</p><p>语法：表达式1 &amp;&amp; 表达式2</p><ul><li><p>且运算符在左右两侧都是布尔值时的规则：</p><p>两侧都为true才返回true，否则返回false；即只要有一侧是false则返回false</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">true</span><br><span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-literal">false</span><br><span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">false</span>==<span class="hljs-literal">false</span> <span class="hljs-comment">//true</span><br><span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">2</span>&lt;<span class="hljs-number">4</span> <span class="hljs-comment">//true</span><br><span class="hljs-number">3</span>&lt;<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">2</span>&lt;<span class="hljs-number">4</span> <span class="hljs-comment">//false</span><br><br></code></pre></td></tr></table></figure></li><li><p>左右两侧不是直接的布尔值，的规则：（数字，字符串，表达式参与运算）</p><p>如果第一个运算子的布尔值是true则返回直接返回第二个运算子的值（注意是值，不是隐性转换后的布尔值）</p><p>（如果第一个表达式的值为真，则返回表达式2）</p><p>如果第一个运算子的布尔值是false则直接返回第一个运算子的值（不是隐性转换后的布尔值），且不在对第二个运算子求值（短路）</p><p>（如果第一个表达式的值为假，则返回表达式1）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>-<span class="hljs-number">1</span> &amp;&amp; &#x27;<span class="hljs-number">2</span>&#x27; //&#x27;<span class="hljs-number">2</span>&#x27;<br><span class="hljs-attribute">3</span>-<span class="hljs-number">3</span> &amp;&amp; &#x27;<span class="hljs-number">2</span>&#x27; //<span class="hljs-number">0</span><br><br><span class="hljs-attribute">var</span> x=<span class="hljs-number">1</span>;<br><span class="hljs-attribute">3</span>-<span class="hljs-number">3</span> &amp;&amp; x++  //<span class="hljs-number">0</span> 此时X为<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为<code>false</code>，则直接返回它的值<code>0</code>，而不再对第二个运算子求值，所以变量<code>x</code>的值没变。</p><p>这种跳过第二个运算子的机制被称为段路，即只通过第一个运算子的值，控制是否运行第二个表达式的机制就是短路</p><p>短路：当有多个表达式（值），左边表达式的值可以确定结果时，不在继续运算右边表达式的值了（bz）</p><p>且运算符可以多个连用，这时返回第一个布尔值为<code>false</code>的表达式的值。如果所有表达式的布尔值都为<code>true</code>，则返回最后一个表达式的值。（如果有空值或表示为否定的值，返回第一个表示 空值或表示为否定的值。没有的话则返回最后一个表达式的值）</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sas">true <span class="hljs-variable">&amp;&amp;</span> <span class="hljs-string">&#x27;foo&#x27;</span> <span class="hljs-variable">&amp;&amp;</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-variable">&amp;&amp;</span> 4 <span class="hljs-variable">&amp;&amp;</span> <span class="hljs-string">&#x27;foo&#x27;</span> <span class="hljs-variable">&amp;&amp;</span> true<br>// <span class="hljs-string">&#x27;&#x27;</span><br><br>1 <span class="hljs-variable">&amp;&amp;</span> 2 <span class="hljs-variable">&amp;&amp;</span> 3<br>// 3<br></code></pre></td></tr></table></figure><p>上面代码中，例一里面，第一个布尔值为<code>false</code>的表达式为第三个表达式，所以得到一个空字符串。例二里面，所有表达式的布尔值都是<code>true</code>，所以返回最后一个表达式的值<code>3</code>。</p></li></ul><h4 id="或运算符"><a href="#或运算符" class="headerlink" title="或运算符"></a>或运算符</h4><p>符号为：|| </p><ul><li><p>或运算符在左右两侧都是布尔值时的规则：</p><p>两边都是false时才返回false，即只要有一个为true则返回true</p></li><li><p>左右两侧不是直接的布尔值，的规则：</p><ul><li>如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不在对第二个运算子求值（短路）</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-attribute">3</span>-<span class="hljs-number">2</span> || a++  //<span class="hljs-number">1</span>   a此时为<span class="hljs-number">10</span> ，第二个运算子没有求值 造成短路了<br><span class="hljs-attribute">3</span>-<span class="hljs-number">2</span> || (a=a*<span class="hljs-number">100</span>) //<span class="hljs-number">1</span> a此时为<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>如果第一个运算子的布尔值为false，则返回第二个运算子的值(运算后的值)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-attribute">3</span>-<span class="hljs-number">3</span> || a*<span class="hljs-number">10</span> //<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>扩展：不讲</p><p>或运算符可以多个连用，这时返回第一个布尔值为<code>true</code>的表达式的值。如果所有表达式都为<code>false</code>，则返回最后一个表达式的值。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">false</span> || <span class="hljs-number">0</span> || <span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-number">4</span> || <span class="hljs-string">&#x27;foo&#x27;</span> || <span class="hljs-literal">true</span><br><span class="hljs-comment">// 4</span><br><br><span class="hljs-literal">false</span> || <span class="hljs-number">0</span> || <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">// &#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><p>&#x3D;  直接将右边的值赋值给左边</p></li><li><p>+&#x3D;  -&#x3D;    变量自身加减一个数后再赋值给自身，在自身的基础上进行叠加，是加法和赋值的合作</p></li><li><p>*&#x3D;   &#x2F;&#x3D;    %&#x3D;  变量乘 ，除，取余 后再赋值给自身</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">a</span>=10;<br>a += 10;   等同于 <span class="hljs-attribute">a</span>=a+10;<br>a -= 10;  等同于 <span class="hljs-attribute">a</span>=a-10;<br>a *= 10;  等同于 <span class="hljs-attribute">a</span>=a*10;<br>    a+=<span class="hljs-string">&quot;10&quot;</span>;         <span class="hljs-attribute">a</span>=a+&quot;10&quot;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>优先级由高到低:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">.点运算符 []方括号运算符 <span class="hljs-keyword">new</span><br>（）小括号<br><br> 一元运算符   ++  --  ！  一元运算符里的逻辑非优先级很高<br><br>算术运算符  先* <span class="hljs-regexp">/ %后+ -   (* /</span> %的优先级是一样的，从左向右计算)<br><br>关系运算符  &gt; &gt;= &lt; &lt;= <br><br>相等运算符  == != === !==<br><br>逻辑运算符  先&amp;&amp; 后||   逻辑与比逻辑或优先级高<br><br>三元运算符<br><br>赋值运算符 = += -= *= /= %=<br><br>逗号运算赋 ,<br><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-------------------练习</span><br><span class="hljs-keyword">var</span> value=<span class="hljs-string">&quot;3&quot;</span>;<br><span class="hljs-keyword">var</span> index=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">var</span> flag=value==index?<span class="hljs-number">1</span>:<span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag);   <span class="hljs-comment">//1</span><br><br> <span class="hljs-comment">//-------</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span>||<span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-literal">false</span>);<span class="hljs-comment">//true  &amp;&amp;比||的优先级高</span><br><br><span class="hljs-comment">//-------</span><br><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>*<span class="hljs-number">3</span>%<span class="hljs-number">4</span>);<span class="hljs-comment">//3</span><br><br><span class="hljs-comment">//-------</span><br><br> <span class="hljs-keyword">var</span> num=<span class="hljs-number">1</span>;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(--num&amp;&amp;<span class="hljs-number">7</span>);<span class="hljs-comment">//0</span><br><br><span class="hljs-comment">//-------</span><br><br> <span class="hljs-keyword">var</span> num2=<span class="hljs-number">0</span>;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(++num &amp;&amp; <span class="hljs-number">7</span>);<span class="hljs-comment">//7</span><br><br><span class="hljs-comment">//-------</span><br><br> <span class="hljs-keyword">var</span> flag=<span class="hljs-literal">false</span>;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> flag);<span class="hljs-comment">//&#x27;boolean&#x27;</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> flag?<span class="hljs-string">&#x27;2&#x27;</span>:<span class="hljs-number">1</span>);<span class="hljs-comment">//&#x27;2&#x27;</span><br><br><span class="hljs-comment">//-------</span><br><br> <span class="hljs-keyword">var</span> box=<span class="hljs-number">3</span>;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box+<span class="hljs-number">4</span>&gt;<span class="hljs-number">6</span>);<span class="hljs-comment">//true</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box*<span class="hljs-number">2</span>&gt;<span class="hljs-number">5</span>);<span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//-------</span><br><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">0</span> ? <span class="hljs-number">3</span> : <span class="hljs-number">2</span>);<span class="hljs-comment">//2</span><br><br><span class="hljs-comment">//--------</span><br> <span class="hljs-keyword">var</span> val;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Value is&#x27;</span>+(val != <span class="hljs-string">&#x27;0&#x27;</span>)?<span class="hljs-string">&#x27;define&#x27;</span>:<span class="hljs-string">&#x27;undefined&#x27;</span>);<span class="hljs-comment">//&#x27;define&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>流程控制就是控制我们所写的代码按照什么的结构顺序执行，代码执行的顺序对最后返回的结果起着很关键的作用</p><h3 id="流程控制分为3类："><a href="#流程控制分为3类：" class="headerlink" title="流程控制分为3类："></a>流程控制分为3类：</h3><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><p>​就是按照代码书写的先后顺序依次执行</p><h4 id="分支结构："><a href="#分支结构：" class="headerlink" title="分支结构："></a>分支结构：</h4><p>是根据不同的条件，代码按不同的路径执行，返回相对应的结果</p><h5 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h5><p>​（1）if语句的格式  书写规范，（）两端要有空格</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">if (条件表达式) </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">当条件表达式成立时所执行的代码</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><p>if语句是当条件成立（条件表达式为true）时执行大括号内的代码，条件不成立（false）则不执行{}里的语句</p><p>案例：输入成绩，根据不同的成绩，弹出不同的提示框</p><p>​（2）if else语句，即双份支语句</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(条件表达式)</span></span>&#123;<br>当条件表达式成立时所执行的代码<span class="hljs-number">1</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>当条件表达式不成立时所执行的代码<span class="hljs-number">2</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>if else语句是当条件成立时执行代码1，否则执行else后面大括号内的代码2</p><p>代码1和代码2必然且只能有一个被执行，即2选一</p><p>案例</p><p>​（3）  if else if 多分支语句</p><p>多分支语句是利用多个不同的条件选择不同的路径执行，最后返回不同的结果，是多选一，最多只能执行一个</p><p>格式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(条件表达式<span class="hljs-number">1</span>)</span></span>&#123;<br>代码<span class="hljs-number">1</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">if</span>(条件表达式<span class="hljs-number">2</span>)&#123;<br>代码<span class="hljs-number">2</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">if</span>(条件表达式<span class="hljs-number">3</span>)&#123;<br>代码<span class="hljs-number">3</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br> 上面条件都不成立时执行代码<span class="hljs-number">4</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行路径是：若条件1成立则执行代码1，后离开该语句，后面的就不执行了</p><p> 若条件1不成立，条件2成立，则执行代码2，后离开该语句</p><p>若条件1不成立，条件2也不成立，条件3成立，则执行代码3，后离开该语句</p><p>若条件1，条件2，条件3都不成立，则执行代码4，后离开该语句</p><p>即从第一个条件开始，哪一个条件满足，就执行哪一个{}里面的代码，前面的满足了，后面的就不在执行了，所有条件都不满足时则执行else里的代码，若干个{}必然会有一个执行</p><p>注意：</p><p>​else if可以有任意多个</p><p>​ else if之间有空格，else后面不能有括号</p><p>​if else if多分支语句的本质是多选一，只能有一条语句被执行</p><p>案例：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 判断一个数是奇数还是偶数，数字%2取余，偶数返回值为0，即为false，返回值不为0，则为奇数即为true</span><br><span class="hljs-keyword">var</span> n=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>)&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;奇数&#x27;</span>)<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;偶数&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//判断一个数字是不是在某个范围</span><br><span class="hljs-comment">// 判断n是不是在15和20之间  15 &lt;= n &lt;=20</span><br><span class="hljs-comment">//先比较15&lt;=n 返回结果要么是true，要么是false，再和20比较，一定是小于20的，即返回true</span><br><span class="hljs-keyword">var</span> n=<span class="hljs-number">17</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">15</span> &lt;= n &lt;=<span class="hljs-number">20</span>)&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这样写总是会被执行&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// 正确写法是</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">15</span>&lt;=n&amp;&amp;n&lt;=<span class="hljs-number">20</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是逻辑运算符，做了一个交集判断，两个两件必须同时满足&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade">作业：用户输入一个年份，判断是否是闰年，是则输出是闰年<br>提示：<br>判断闰年的条件<br>普通闰年：公历年份是<span class="hljs-number">4</span>的倍数，且不是<span class="hljs-number">100</span>的倍数的，为闰年（如<span class="hljs-number">2004</span>年、<span class="hljs-number">2020</span>年等就是闰年）。<br>世纪闰年：公历年份是整百数的，必须是<span class="hljs-number">400</span>的倍数才是闰年（如<span class="hljs-number">1900</span>年不是闰年，<span class="hljs-number">2000</span>年是闰年）。<br>判断条件：年份可以被<span class="hljs-number">4</span>整除且整百年份不能被<span class="hljs-number">100</span>整除或者整百年份可以被<span class="hljs-number">400</span>整除<br>条件<span class="hljs-number">1</span>%&amp;&amp;条件<span class="hljs-number">2</span>｜｜条件<span class="hljs-number">3</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">year</span>%<span class="hljs-number">4</span>===<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">year</span>%<span class="hljs-number">100</span>!==<span class="hljs-number">0</span> || <span class="hljs-built_in">year</span>%<span class="hljs-number">400</span>===<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我是闰年&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">猜数字 0到10之间的数字7<br><br>成绩   判断学生成绩是否及格<br></code></pre></td></tr></table></figure><p>(4) 三元表达式 </p><p>格式：<code>条件？表达式1：表达式2;</code></p><p>三元表达式就是一个简化了的if else语句</p><p>执行路径：条件成立时执行表达式1，条件不成立执行表达式2. （表达式都是有返回值的）</p><p>var a&#x3D;39;</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var age</span>=39;<br><span class="hljs-attribute">var result</span>=age&gt;20?<span class="hljs-string">&#x27;你已经中年了&#x27;</span>：<span class="hljs-string">&#x27;你还年轻着呢&#x27;</span>;<br></code></pre></td></tr></table></figure><h5 id="switch语句-switch-开关-转换-case-选项"><a href="#switch语句-switch-开关-转换-case-选项" class="headerlink" title="switch语句   switch 开关 转换   case 选项"></a>switch语句   switch 开关 转换   case 选项</h5><p>switch语句也是多分支语句，也是多选一</p><ul><li>格式：</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">switch</span> (表达式) &#123;   <span class="hljs-comment">//在实际开发中我们常用变量作为表达式</span><br><span class="hljs-keyword">case</span> value1:<br>执行语句<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> value2:<br>    执行语句<span class="hljs-number">2</span>；<br>    <span class="hljs-keyword">break</span>；<br>   <span class="hljs-keyword">case</span> value3:<br>    执行语句<span class="hljs-number">3</span>；<br>    <span class="hljs-keyword">break</span>；<br>    ....<br>   <span class="hljs-keyword">default</span>:<br>    所有的<span class="hljs-keyword">case</span>值都不满足的时候执行最后的语句；<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>执行路径：根据switch后表达式的返回值与case后的值相匹配，如果匹配上就执行该case后面的语句，遇见break则退出该switch语句，如果和所有case后的值都没有匹配上，就执行default后的语句</p><p>在执行case后的执行语句后遇到break后会退出该switch语句，如果没有遇到break则会不管下一个case是不是满足就继续执行下一个case后的语句，直到遇到break为止，或者到switch结束</p><ul><li><p>break的穿透，是从第一个满足条件的case开始进行穿透,直到遇到break为止，或者到switch结束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> n=<span class="hljs-number">7</span>;<br><span class="hljs-keyword">switch</span>(n)&#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;31天&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;30天&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;28天&#x27;</span>);<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>switch语句的表达式匹配的是case后面特定的值，且必须是全等才能匹配上，switch语句，只能判断准确的某一个字面量值，不能判断范围</p></li><li><p>default可以写也可以不写，作用类似于if语句里的else，当所有条件都不成立的时候，执行default</p></li><li><p>switch语句与if语句的区别，使用时如何选择（用自己的语言再总结一下）</p><ul><li>一般情况下他两是可以相互替换的</li><li>switch语句通常处理case值比较明确的情况，if else语句更加灵活，常用于范围判断</li><li>switch语句是先进行条件判断后直接执行到匹配的程序语句里去。效率更高，if else语句会依次判断所有的条件，直到条件成立，效率低</li><li>当分支比较少时，if else语句的执行效率比switch语句高</li><li>当分支比较多时，switch语句的执行效率比较高，而且结构更清晰</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//判断学生成绩及格与否</span><br><span class="hljs-keyword">var</span> score=+<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入学生成绩&#x27;</span>);<br><span class="hljs-keyword">switch</span>(<span class="hljs-built_in">parseInt</span>(score/<span class="hljs-number">10</span>))&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;学生成绩合格&#x27;</span>);<br>      <span class="hljs-keyword">break</span>;<br>  <span class="hljs-attr">default</span>:<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;学生成绩不合格&#x27;</span>);<br>      <span class="hljs-keyword">break</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>分支：根据条件来决定是不是执行某一段代码</p><p>循环：根据条件来决定一段代码重复执行几次</p><ul><li>循环成立的条件：<ul><li>初始值，作为循环的开始</li><li>条件判断：决定要不要继续循环</li><li>重复执行的代码</li><li>改变初始值，为了让循环结束</li></ul></li></ul><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><p>变量初始化就是用var 声明一个变量，这个变量通常用作于计数器</p><p>条件表达式就是用来判断循环是继续执行还是终止的条件</p><p>操作表达式 就是每一次循环最后执行的代码，经常是对计数器进行更新操作（递增或者递减）</p><p>循环体 被重复执行的代码就是循环体</p><p>格式： while…时候</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">n</span>=1；//声明一个变量，这个变量通常用作于计数器<br><span class="hljs-keyword">while</span>(条件表达式)&#123;<br>循环体<br><span class="hljs-attribute">n</span>=n+1；<br>&#125;<br></code></pre></td></tr></table></figure><p>wile循环是在当条件成立的前提下执行循环体的代码，直到条件表达式是不成立时结束循环</p><p>循环执行的是{}里的语句</p><p>注意：while循环依然要有初始化变量（计数器）和操作表达式（更新计数器）</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> <span class="hljs-built_in">num</span>=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">num</span>&lt;=<span class="hljs-number">100</span>)&#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">num</span>)<br><span class="hljs-built_in">num</span>++<br>&#125;<br>如果没有更新变量，会造成死循环<br></code></pre></td></tr></table></figure><p>案例：</p><p>计算1至100的和</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">100</span>)&#123;<br> <span class="hljs-built_in">sum</span> += i;<br> i++<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 案例<br><span class="hljs-regexp">//</span> <span class="hljs-number">6</span>的阶乘 <span class="hljs-number">6</span>*<span class="hljs-number">5</span>*<span class="hljs-number">4</span>*<span class="hljs-number">3</span>*<span class="hljs-number">2</span>*<span class="hljs-number">1</span><br><span class="hljs-regexp">//</span> 第一步 准备一个变量存错阶乘的结果<br>var and=<span class="hljs-number">1</span>;<br><span class="hljs-regexp">//</span> 循环的初试变量<br>var n=<span class="hljs-number">6</span>;<br><span class="hljs-keyword">while</span> (n&gt;=<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-regexp">//</span> 重复执行的循环体<br>  <span class="hljs-regexp">//</span> and=and*n; 把每一个数字乘到and上<br>  and *= n;<br>  <span class="hljs-regexp">//</span> 更新变量<br>  n--;<br>&#125;<br>console.log(<span class="hljs-string">&#x27;6的阶乘的结果为：&#x27;</span>,and);<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade">用户输入人数及每一一个人的成绩<br><span class="hljs-keyword">var</span> sduentNum=prompt(<span class="hljs-string">&quot;请输入学生人数&quot;</span>)；<span class="hljs-comment">//学生人数</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>； <span class="hljs-comment">//成绩总和</span><br><span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">while</span>(i&lt;=sduentNum)&#123;<br><span class="hljs-built_in">sum</span> += prompt(<span class="hljs-string">&quot;请输入学生&quot;</span>+i+的成绩);<br>i++;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;学生的平均成绩为&quot;</span>+<span class="hljs-built_in">sum</span>/sduentNum)；<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//猜数字</span><br><span class="hljs-keyword">var</span> real=<span class="hljs-number">7</span>；<br><span class="hljs-keyword">var</span> num=+<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入0到10之间的数字&#x27;</span>);<span class="hljs-comment">//取正转换数据类型</span><br><span class="hljs-keyword">while</span>(num !== <span class="hljs-number">7</span>)&#123;<br>  <span class="hljs-keyword">if</span>(num&lt;real)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;小了&#x27;</span>)<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;大了&#x27;</span>)<br>  &#125;<br>  num=<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入0到10之间的数字&#x27;</span>)-<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您猜对了&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h5><p>do while是while循环的变体</p><p>格式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">do</span>&#123;<br>循环体<br>&#125;<span class="hljs-keyword">while</span><span class="hljs-comment">(条件表达式)</span><br></code></pre></td></tr></table></figure><p>do while循环是不管条件是否成立先执行一次循环体的代码再判断条件表达式真假，如果为真则继续下一次循环，直到条件为假时结束循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> n=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我执行了&#x27;</span>);<br>n++;<br>&#125;<span class="hljs-keyword">while</span>(n&lt;<span class="hljs-number">10</span>)<br><span class="hljs-comment">//此只会执行一次</span><br></code></pre></td></tr></table></figure><p>do while循环至少执行一次循环体的代码</p><p>do while 循环依然要有初始化变量（计数器）和操作表达式（更新计数器）</p><p>案例：计算1至100的和</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>,<span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span>&#123;<br> <span class="hljs-built_in">sum</span> += i;<br> i++;<br>&#125;<span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">100</span>)<br>cosole.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><p>for循环，应用最多，是循环的语法糖，用起来方便，写起来方便，看起来不方便</p><ul><li>作用：可以重复执行一段代码，通常和计数有关</li></ul><p>格式：    书写规范：（）左右要有空格，后面的闭合花括号要于for对齐</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">for</span> (变量初始化；条件表达式；操作表达式) &#123;<span class="hljs-regexp">//</span>变量初始化；条件表达式；操作表达式这些所要用到的一次写完<br>  循环体<br>&#125;<br><span class="hljs-regexp">//</span>标准语法<br>var i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(;i&lt;<span class="hljs-number">10</span>;)&#123;<br>重复执行的代码<br>i++<br>&#125;<br></code></pre></td></tr></table></figure><p>变量初始化就是用var 声明一个变量，这个变量通常用作于计数器</p><p>条件表达式就是用来判断循环是继续执行还是终止的条件</p><p>操作表达式 就是每一次循环最后执行的代码，经常是对计数器进行更新操作（递增或者递减）</p><p>循环体 被重复执行的代码就是循环体</p><p>案例：打印多次。。</p><p> 案例：打印100以内所有3的倍数</p><p>​通过循环找到100以内所有的数字，判断每一个数字，如果是3的倍数，打印，不是则不打印</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">for</span>(var i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br><span class="hljs-built_in">if</span>(!(i%<span class="hljs-number">3</span>))&#123;<br>console<span class="hljs-selector-class">.log</span>(&#x27;我是<span class="hljs-number">3</span>的倍数：&#x27;,i)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p><p>案例1：求1至100的和。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>;  存储和的变量，和的初始值是<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">100</span>; i++) &#123;<br>// <span class="hljs-built_in">sum</span>=<span class="hljs-built_in">sum</span>+i；<br>  <span class="hljs-built_in">sum</span> += i；<br>&#125;<br>cosole.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>案例2:求1至100的偶数和 奇数和</p><p>​求100以内所有能被3整除的数字的和pa</p><p>案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">水仙花数字</span><br><span class="hljs-comment">三次自幂数(取值范围100～999)</span><br><span class="hljs-comment">即一个三位数字的每一位数的三次方之和，如果和这个数字一样就是三次自幂数</span><br><span class="hljs-comment">例子：153  即1*1*1+5*5*5+3*3*3即1+125+27=153</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">100</span>;i&lt;=<span class="hljs-number">999</span>;i++)&#123;<br>    <span class="hljs-comment">// 拆数字</span><br>    <span class="hljs-keyword">var</span> a=<span class="hljs-built_in">parseInt</span>(i/<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">var</span> b=<span class="hljs-built_in">parseInt</span>(i%<span class="hljs-number">100</span>/<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">var</span> c=i%<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span>(a**<span class="hljs-number">3</span>+b**<span class="hljs-number">3</span>+c**<span class="hljs-number">3</span>===i)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i+<span class="hljs-string">&#x27;是三次自幂数&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">153是三次自幂数</span><br><span class="hljs-comment">370是三次自幂数</span><br><span class="hljs-comment">371是三次自幂数</span><br><span class="hljs-comment">407是三次自幂数 </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>嵌套的for循环 ，双for循环</p><p>双层for循环，外层每执行一次，内层for循环全部执行</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//吃9个馒头，每个馒头三口吃完</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;这是我吃的第&quot;</span>+i+<span class="hljs-string">&quot;馒头&quot;</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">3</span>;j++)&#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;    第&#x27;</span>+i+<span class="hljs-string">&quot;个包子我吃的第&quot;</span>+j+<span class="hljs-string">&quot;口&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;老板再来一个&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs axapta">打印正方形的星，即每一行星的个数都以一样<br><br><span class="hljs-comment">// 打印三角型，第一行一个*，第二行两个***，第三行三个*...以此类</span><br><span class="hljs-comment">// 外层循环控制行数，内层循环控制每一行有多少个*</span><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">var</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>        document.write(<span class="hljs-string">&quot;* &quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//输出一行的*后另起一行</span><br>    document.write(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>)<br>&#125;<br>在页面中打印和在控制台打印<br><br>打印<span class="hljs-number">9</span>*<span class="hljs-number">9</span>乘法表<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">var</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>    <span class="hljs-built_in">str</span>=<span class="hljs-built_in">str</span>+<span class="hljs-string">&quot;*&quot;</span>;<span class="hljs-comment">//打印星</span><br>    <span class="hljs-built_in">str</span>+= i+<span class="hljs-string">&quot;X&quot;</span>+j+<span class="hljs-string">&quot;=&quot;</span>+i*j;  <span class="hljs-comment">//99乘法表</span><br>    <br>        document.write(<span class="hljs-string">&quot;* &quot;</span>);<br>        <br>    &#125;<br>    <span class="hljs-comment">//输出一行的*后另起一行</span><br>    document.write(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>)<br>    <span class="hljs-built_in">str</span>+=<span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-comment">//换行</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>打印梯型<br><span class="hljs-regexp">//</span> 打印三角型，第一行一个*，第二行两个***，第三行三个*...以此类<br><span class="hljs-regexp">//</span> 外层循环控制行数，内层循环控制每一行有多少个*<br><span class="hljs-keyword">for</span>(var i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>    <span class="hljs-keyword">for</span>(var j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>        <span class="hljs-regexp">//</span> 打印梯型 前三行的不输出*，直接退出本次循环，继续下一次循环<br>        <span class="hljs-keyword">if</span>(i&lt;=<span class="hljs-number">3</span>) <span class="hljs-keyword">continue</span>;<br>        document.write(<span class="hljs-string">&quot;* &quot;</span>);<br>    &#125;<br>    <span class="hljs-regexp">//</span>输出一行的*后另起一行<br>    document.write(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>)<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 打印倒三角型，第一行<span class="hljs-number">9</span>个*，第二行<span class="hljs-number">8</span>个***，第三行<span class="hljs-number">7</span>个*...以此类<br><span class="hljs-regexp">//</span> 外层循环控制行数，内层循环控制每一行有多少个*<br><span class="hljs-keyword">for</span>(var i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>   <span class="hljs-regexp">//</span>从<span class="hljs-number">1</span>到<span class="hljs-number">9</span>是<span class="hljs-number">9</span>个，从<span class="hljs-number">2</span>到<span class="hljs-number">9</span>是<span class="hljs-number">8</span>个，从<span class="hljs-number">3</span>到<span class="hljs-number">9</span>是<span class="hljs-number">7</span>个...<br>    <span class="hljs-keyword">for</span>(var j=i;j&lt;=<span class="hljs-number">9</span>;j++)&#123;<br>        document.write(<span class="hljs-string">&quot;* &quot;</span>);<br>    &#125;<br>    <span class="hljs-regexp">//</span>输出一行的*后另起一行<br>    document.write(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>)<br>/&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-number">9</span>gfor(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br><span class="hljs-comment">//第一行有9个空格一个*，第二行有8个空格2个*，第三行有7个空格3个*....</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i;j&lt;=<span class="hljs-number">9</span>;j++)&#123;<br>        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> k=<span class="hljs-number">1</span>;k&lt;=i;k++)&#123;<br>        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;* &quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//输出一行的*后另起一行</span><br>    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h5><p> continue break，使用在循环里的关键字</p><ul><li>Continue</li></ul><p>在执行循环时遇到continue（继续），continue后的代码不在执行，直接就退出本次循环，直接跳到i++的位置，继续执行剩余次数的循环</p><ul><li>break</li></ul><p>在执行循环时遇到break，直接结束当前循环，break后的代码不再执行，也不在继续以后的循环</p><ul><li><p>标记语法</p><p>自己命名一个标记，可以控制遇见break时跳到哪里，直接在循环开始的地方做一个标记格式是 名字：</p></li></ul><p>​       当准备跳出的时候语法为 break 名字；直接跳转到标记代表的循环结束位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">here</span>:<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">1</span>;j&lt;i;j++)&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i;j&lt;=<span class="hljs-number">9</span>;j++)&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;* &quot;</span>);<br>       <span class="hljs-keyword">if</span>(i=<span class="hljs-number">2</span>) <span class="hljs-keyword">break</span> here;<br>    &#125;<br>  <br>    <span class="hljs-comment">//输出一行的*后另起一行</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是js的一种数据类型，也是复杂数据类型 Array ，一个盒子，存储一堆数据，不是按照键值对存储的，是按照索引存储的（序号），基本数据类型都是单一的值，值和值之间没有没有任何联系，使用基本数据类型，我们创建的变量都是独立的，不能成为一个整体</p><p>数组：数组是按次序排列的一组值，每个值都有序号（从0开始的），整个数组用[]表示</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;55&quot;</span>,<span class="hljs-literal">true</span>]<br></code></pre></td></tr></table></figure><p>[]是数组的标致，里面的每个值是数组的元素，数组的元素可以是任意类型的值，数组中可以放另外的数组</p><ul><li><p>创建数组的方式</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> arr3=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;你安静点&#x27;</span>];  <span class="hljs-comment">//数组可以在创建时直接添加一些数组元素</span><br><span class="hljs-keyword">var</span> arr2=[]; <span class="hljs-comment">//用数组字面的方式创建一个空的数组，并赋值给arr2，也先定义后赋值</span><br><br>数组里的数值一定要用逗号隔开<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//使用内置构造函数创建数组，js给我们提供了一个内置的构造函数Array</span><br><span class="hljs-keyword">var</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); 创建一个空数组并赋值给变量arr<br><br>不传递参数的时候：创建一个空数组<br>传递一个正值，这个正值就是数组的长度<br>传递两个及两个以上参数的时候，传递进去的参数则是数组的内的元素<br></code></pre></td></tr></table></figure><p>（扩展不讲：数组不能使用点语法来操作，因为数组的下标是数字，点语法不能直接后接数字）</p></li><li><p>数组的索引（下标）就是用来访问数组元素的序号</p><p>数组的索引是从0开始的 0 1 2 3 4</p></li><li><p>获取数组元素：格式  （多案例，比如循环遍历出数组中的元素，比较大小）</p></li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">数组名[<span class="hljs-built_in">index</span>] ；// <span class="hljs-built_in">index</span>是数组的索引<br><br>console.<span class="hljs-built_in">log</span>(arr3[<span class="hljs-built_in">index</span>])<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">使用<span class="hljs-keyword">for</span>循环遍历一个数组，遍历就是依次访问数组里的每一个数据<br><span class="hljs-keyword">var</span> Arr=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;Arr.<span class="hljs-built_in">length</span>;i++)&#123;<br>    <span class="hljs-comment">//i是for 循环的计数器，可以作为数组的索引，Arr[i]则是对应索引位置上的数据</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Arr[i])<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>数组的长度，<strong>即数组中元素的个数</strong></p><p>数组的长度可以通数组的length属性获取，数组的length属性是一个可读写的属性</p><p>读取格式</p></li></ul><p></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">数组名.<span class="hljs-built_in">length</span> ；最终会返回数组中元素的个数<br></code></pre></td></tr></table></figure><p>可以通过length属性来修改数组的长度</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">newArr.length=数值; <br><span class="hljs-regexp">//</span>数值大于原数组的长度可以给数组扩容，多出来的就用空位补齐，读取空位时返回undefined<br><span class="hljs-regexp">//</span>数值小于原数组的长度，会原数组中多出来的元素删除<br><span class="hljs-regexp">//</span>清空一个数组就可以使用:  数组.length=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ul><li><p>替换数组中的元素，新增数组中元素</p><p>索引也是一个可以读写的属性：</p><pre><code class="hljs">- 读：读到指定索引位置的数据如果有就返回，没有就返回undefined- 写：</code></pre></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> newArr=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>];<br><span class="hljs-attribute">newArr</span>[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>; //指定的索引位置有数据，就是替换原数据<br><span class="hljs-attribute">console</span>.log(newArr[<span class="hljs-number">1</span>]); //<span class="hljs-number">2</span>  <br><span class="hljs-attribute">newArr</span>[<span class="hljs-number">5</span>]=<span class="hljs-number">9</span>;  //没有这个索引位置，就是新增数组中的元素，这个数字超出了数组的原长度，那么中间位置的空位补齐<br><span class="hljs-attribute">console</span>.log(newArr); //[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, empty, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>数组循环组合多案例，筛选数组中元素，颠倒数组中的元素等。。。</p><p>案例：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade">求数组中元素的和及平均值<br><span class="hljs-comment">// 将数组中的每一个数据获取出来求和 </span><br><span class="hljs-comment">//和除以数据的个数得到平均值</span><br><span class="hljs-keyword">var</span> num=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>];<br><span class="hljs-keyword">var</span> add=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">average</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;num.<span class="hljs-built_in">length</span>;i++)&#123;<br><span class="hljs-comment">//   add=add+num[i];</span><br>add+=num[i];<br>&#125;<br><span class="hljs-built_in">average</span>=add/num.<span class="hljs-built_in">length</span>;<br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">// 求数组中的最大值<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">num</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">24</span>];<br>// 假设元素中的第一位是最大值赋值给一个变量<span class="hljs-built_in">max</span>，然后依次和数组中每一个数组元素相比较<br>//如果元素大于这个最大值，则就用这个较大的值更新<span class="hljs-built_in">max</span><br><span class="hljs-built_in">var</span> <span class="hljs-built_in">max</span>=<span class="hljs-built_in">num</span>[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">var</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-built_in">num</span>.<span class="hljs-built_in">length</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">num</span>[i]&gt;<span class="hljs-built_in">max</span>) &#123;<br>        <span class="hljs-built_in">max</span>=<span class="hljs-built_in">num</span>[i];<br>    &#125;<br>&#125;<br>console.<span class="hljs-built_in">log</span>(&#x27;数组中的最大值为&#x27;,<span class="hljs-built_in">max</span>)<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">将数组转换为字符串，并使用符号-分隔<br><span class="hljs-keyword">var</span> num=[<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;66&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;undefined&#x27;</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">24</span>];<br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//定义一个新的变量来存储拼接后的字符串</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;num.<span class="hljs-built_in">length</span>;i++)&#123;<br>   <br>    <span class="hljs-comment">// str += num[i]; //str为字符串，所以加号执行的是字符串拼接操作</span><br>    str += num[i]+<span class="hljs-string">&#x27;-&#x27;</span>;<span class="hljs-comment">//拼接的每一个数据之间使用-分隔</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;11111&#x27;</span>,str)<br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">创建一个数组，里面存放<span class="hljs-number">1</span>-<span class="hljs-number">100</span>的整数<br><br><span class="hljs-built_in">var</span> <span class="hljs-built_in">num</span>=[];<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>    <span class="hljs-built_in">num</span>[i]=i+<span class="hljs-number">1</span>;<br>&#125;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;数组为&quot;</span>,<span class="hljs-built_in">num</span>)<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//筛选数组中的数据，将小余10的元素选出来放入一个新的数组</span><br><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">66</span>,<span class="hljs-number">3</span>,<span class="hljs-number">232</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1</span>]<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>=[];<span class="hljs-comment">//声明一个新的数组，存放选出来的元素</span><br><span class="hljs-comment">// var index=0;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>    <span class="hljs-keyword">if</span>(arr[i]&lt;<span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-comment">// newArr[index]=arr[i];</span><br>        <span class="hljs-comment">// index++;</span><br>        <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.length]=arr[i]<br>    &#125;<br>&#125;<br>console.log(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>)<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe">颠倒数组中元素的顺序<br><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">66</span>,<span class="hljs-number">3</span>,<span class="hljs-number">232</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1</span>]<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>=[];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=arr.length<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>    <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.length]=arr[i]<br>&#125;<br>console.log(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>)<br></code></pre></td></tr></table></figure><p>案例：冒泡排序，即给乱序的数组排列顺序，从小到大排列</p><p>目的不是为了上班用的，而是为了锻炼逻辑思维</p><p>口诀：双层for循环，一层减一次，里层减外层，变量相交换</p><p>前提知识：学会交换数组里的两个数据的位置， 遍历数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">12</span>,<span class="hljs-number">500</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">66</span>,<span class="hljs-number">3</span>,<span class="hljs-number">232</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>;j&lt;arr.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>;j++)&#123; <span class="hljs-comment">//外部循环管理趟数</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>-j;i++)&#123; <span class="hljs-comment">//内部循环管 每一趟交换多少次</span><br>    <span class="hljs-comment">//交换元素的值，让前一个值和后一个值做比较，如果前一个值比后一个值大，就交换一下，执行一遍以后，最大的数字一定在最后</span><br>        <span class="hljs-keyword">if</span>(arr[i]&gt;arr[i+<span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">var</span> middle=arr[i];<br>            arr[i]=arr[i+<span class="hljs-number">1</span>];<br>            arr[i+<span class="hljs-number">1</span>]=middle;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,arr)<br></code></pre></td></tr></table></figure><p> 扩展不讲：数组的本质也是一个对象，还可当做对象使用，使用对象的.语法存储数据。。</p><ul><li>算法：就是观察执行过程，找到规则，转为代码</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>函数封装了一段可以被重复执行的代码，使代码可以重复使用，大大简化了代码的结构</p><p>在js里函数就像是一个箱子，用来承载一段代码，当你要执行这段代码的时候只要呼唤这个箱子就可以了</p><p>步骤:1:把代码装箱子里        2:使用箱子里的代码</p></li></ul><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><ul><li><p>声明式函数</p><p>使用function关键字 声明函数，function要全部小写</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> 函数名() &#123;  <span class="hljs-regexp">//</span>空格必须要有分隔关键字和函数名<br> <span class="hljs-regexp">//</span>函数体<br><br>函数名要遵循变量的命名规则和命名规范<br>函数是执行某些操作，函数名最好使用可以表示动作的名字 getName。。。<br></code></pre></td></tr></table></figure><p>这种方式声明的函数有名字，所以这样的函数是命名函数</p></li><li><p>赋值式函数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> 变量名= <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>这是将一个匿名函数赋值给一个变量。这个匿名函数又被称为函数表达式，因为赋值符号（&#x3D;）右边只能放表达式</p></li><li><p>Function 构造函数（讲不好就不讲，知道即可）</p></li><li><p>函数的重复声明</p><p>如果同一个函数被多次声明，后面的声明就会覆盖前面的声明</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">fn</span>()&#123;<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-built_in">fn</span>(); <span class="hljs-comment">// 2</span><br>function <span class="hljs-built_in">fn</span>()&#123;<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-number">2</span>)<br>&#125;<br><span class="hljs-built_in">fn</span>(); <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>由于函数名的提升，前一次的声明在任何时候都是无效的</p></li></ul><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>函数在声明后不调用是不会自己执行的，需要调用才可以执行；</p><p>定义函数的方式不一样，但是调用函数的方式是一样的，使用圆括号运算符</p><p><code>函数名(); </code></p><p><strong>注意：</strong>函数名 和 函数名() 是不一样的，单写一个函数名是一个变量，表示这个函数（函数对象），函数名()是要调用执行这个函数，会得到函数调用后的返回值</p><ul><li><p>使用函数封装代码的优点：可以一次书写，多次使用，代码简介</p></li><li><p>两种声明函数的方式，调用函数的方法一样，但是调用的时机不一样</p><ul><li>声明式函数，可以在声明之前调用，也可以在声明之后调用</li><li>赋值式函数，只能在声明后调用，声明之前不能调用否则会报错</li></ul></li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>函数内某些值不能固定，我们可以在声明函数时使用参数来代表这些不能确定的值，在调用函数时通过参数传入不同的值进去。可以使函数通过参数来执行不同的代码</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">函数名</span>(参数1，参数2...) &#123;<br>函数体<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>函数可以有多个参数，中间使用，分隔</p></li><li><p>函数的参数分为两种</p><ul><li><p>在函数声明时定义的参数是函数的形参（形式上的参数）</p><ul><li>形参像是一个只能在函数内部使用的不用声明的变量，用来接收实参</li><li>形参的值由函数调用时传进来的实参来决定</li><li>起名遵循变量的命名规则和规范</li></ul></li><li><p>在函数调用时传入的参数是函数的实参（实际参数）</p><ul><li><p>实参就是一个准确的值，就是为了给函数的形参进行赋值的</p></li><li><p>函数调用时实际参与执行的是实参</p></li><li><p>实参可以是任意的数据类型，也可以是一个对象，当我们的参数过多时，可以讲参数封装到一份对象里面，然后通过对象传递</p></li><li><p>实参也可以是一个函数，传入函数后可以调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function hi()&#123;<br> cosnole.log(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>&#125;<br>function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(a)</span></span>&#123;<br>a();    <span class="hljs-comment">//这等同于调用了hi函数，若是hi函数需要参数的话，也可以在这传参</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(hi)</span></span><br></code></pre></td></tr></table></figure><p>案例展示</p></li></ul></li></ul></li><li><p>函数的 参数不是必须的</p></li><li><p>实惨本应该是和形参从左往右一一对应的，但是实际调用函数时无论我们传入多少个实参，程序都不会报错（案例展示）</p><ul><li>当传入的实参与形参一样多时，从左向右一一对应</li></ul><ul><li><p>当实参个数大于形参个数即实参多    只取形参的个数</p><p>前面的按照顺序一一对应，多出的来实参在函数内部没有形参接收，所以多出来的实参不能直接使用</p></li><li><p>当实参小于形参即实参少</p><p>前面的按照顺序一一对应，但是多出来的形参因为没有实参赋值会采用默认值undefined </p><p>(js中省略的参数默认值undefined，结果为NaN)</p><p>在调用函数时我们没办法只省略前面的参数而传入后面的参数。如果非要只省略前面的参数只能显示的传入undefined</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">f</span>(a, b) &#123;<br>  return <span class="hljs-selector-tag">a</span>;<br>&#125;<br>  <br><span class="hljs-built_in">f</span>( , <span class="hljs-number">1</span>) <span class="hljs-comment">// 直接省略第一个参数会报错</span><br><span class="hljs-built_in">f</span>(undefined, <span class="hljs-number">1</span>) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@param</span> &#123;参数类型&#125; 参数名 - 对参数的描述信息<br><span class="hljs-variable">@return</span> &#123;函数返回值的类型&#125; 函数返回值的描述<br>作用：对函数的参数，返回值进行解释<br></code></pre></td></tr></table></figure></li></ul><h3 id="函数的arguments（参数）"><a href="#函数的arguments（参数）" class="headerlink" title="函数的arguments（参数）"></a>函数的arguments（参数）</h3><p>案例：使用函数计算任意个数字的和，即无论传入多少个实参求和，我们的形参就没办法提前预测会传入多少个实参了，所以有一个新的知识点 arguments</p><ul><li><p>在js函数中允许传入任意多个参数，那具体传入了多少参数，可以使用arguments对象来读取</p></li><li><p>arguments是函数的内置对象，包含了函数运行时所有的参数即实参</p><p>（arguments是在函数内部天生自带的变量，表示所有实参的集合是一个伪数组）</p></li><li><p>每个函数都有arguments对象</p></li><li><p>arguments是一个类似于数组的伪数组，他有数组的一些特性但他不是真正意义上的数组</p><ul><li><p>具有数组的length属性</p></li><li><p>按照索引的方式存储数据. ”序号“从0开始，依次加1，这序号叫做下标</p><ul><li><p>我们可以按照遍历数组的方式遍历arguments</p></li><li><p>我们可以依靠索引来操作arguments里面的某一个数据</p><ul><li><p>读：arguments[索引]； 表示获取对应索引位置上的数据</p></li><li><p>写：arguments[索引]&#x3D;你要设置的值 ； 表示把arguments里面对应索引位置的数据改变</p><p>​写入时：如果你写的索引是arguments里面没有的一个索引，那么就是添加，如果有这个索引，那么就是修改对应索引位置上的值</p></li></ul></li></ul></li><li><p>数组特有的一些方法在arguments上不能使用（push，forEach等）·</p></li></ul></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">f</span>() &#123;<br>  return arguments<span class="hljs-selector-class">.length</span>;<br>&#125;<br><br><span class="hljs-built_in">f</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 3</span><br><span class="hljs-built_in">f</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">f</span>() <span class="hljs-comment">// 0</span><br><br><br>function <span class="hljs-built_in">newf</span>()&#123;<br><span class="hljs-built_in">for</span>(var i=<span class="hljs-number">0</span>;i&lt;arguments.length;i++)&#123;<br>console<span class="hljs-selector-class">.log</span>(arguments[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">newf</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-built_in">newf</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>);<br></code></pre></td></tr></table></figure><h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><p>引入案例：在一个函数内的计算结果打印到控制台或者alert出来，或者documen.write到页面上，我们要不断的修改代码，我们可以利用函数把结果返回到函数外面，在函外面怎么处理都可以，就不需要一次次的修改函数内的代码了</p><p>在函数内我们可以使用return返回特定的值</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">函数名</span>(参数1，参数2...) &#123;<br>  函数体<br><span class="hljs-keyword">return</span> <span class="hljs-type">返回值；</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>js在遇到return是就会返回return后面那个表达式的值并终止函数，即使后面还有其他代码也不再执行</li><li>return只能返回一个值，如果逗号隔开多个值，只能返回最后一个值。 return 表达式；</li><li>如果想让返回多个值，可以利用数组</li><li>谁调用就将返回值返回给谁。函数名()&#x3D;返回值。常用变量来接收函数的返回结果 var a&#x3D;函数名();</li><li>return语句不是函数必须的，但函数都是有返回值，如果有return则返回return后的表达式的值，如果没有return则返回undefined</li><li>注意返回值如果是一个变量的话，返回的是这个变量所代表的值，而不是这个变量（在函数内定义的变量只能在函数内使用，外部获取不到）</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tt</span> (<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> ee=<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> ee; <span class="hljs-comment">//return 作为返回值关键字来使用，返回的是retun 后的表达式</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(tt());<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ee);<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tt</span> (<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> ee=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span>; <span class="hljs-comment">//return进行打断函数的操作,return后面的语句不再执行了 此时测返回值是默认值undefined</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;6666&quot;</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(tt());<br></code></pre></td></tr></table></figure><ul><li><p>return 返回值可以是任意类型的值，也可以是函数（闭包知识点）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//在函数内部再声明一个函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn4</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>（‘我是fn4’）<br>&#125;<br><span class="hljs-comment">//将fn4函数作为返回值返回</span><br><span class="hljs-keyword">return</span> fn4；<br>&#125;<br><span class="hljs-keyword">var</span> a=fn3（）；<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>a();<br><br>等同于<br>fn3()();<br><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>break，continue（继续），return的区别</p><p>break：结束当前循环体，不在执行后面的循环（主要针对循环。for循环，while循环…）</p><p>continue：结束本次循环，继续执行下一次的循环  （主要针对循环。for循环，while循环..）</p><p>return只能出现在函数中</p></li></ul><p>​在函数内的循环中是退出循环，并且返回return语句中的值.    (自己再操作确定一下)</p><p>​在函数中是退出当前函数并返回return语句中的值</p><p>打断循环用break，打断函数用return</p><ul><li><p>立即执行函数，函数定义完，立即被调用，这种函数就是立即执行函数（下有详细的）</p></li><li><p>立即执行函数往往只会执行一次</p></li></ul><h3 id="函数内可以调用其他函数"><a href="#函数内可以调用其他函数" class="headerlink" title="函数内可以调用其他函数"></a>函数内可以调用其他函数</h3><h3 id="第一等公民"><a href="#第一等公民" class="headerlink" title="第一等公民"></a>第一等公民</h3><p>JavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。比如，可以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执行的值，此外并无特殊之处。</p><p>由于函数与其他数据类型地位平等，所以在 JavaScript 语言中又称函数为第一等公民。</p><p>案例：多封装几个函数。  求最大值的函数 冒泡排序的函数。。。</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域是指变量（变量名，函数名）存在的范围</p><p>es5中只有两个作用域：全局作用域和局部作用域</p><ul><li><p>全局作用域：一个打开的网页就是一个全局作用域；（整个script标签或者一个单独的js文件）</p><p>在全局作用域定义的变量就是全局变量，在全局内任何地方都可以使用</p><p>全局作用域在页面打开时创建，在页面关闭时销毁</p><p>在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，它由浏览器创建，我们可以直接使用，在全局作用域中创建的变量都会作为window对象的属性保存，创建的函数都会作为windoe对象的方法保存</p></li><li><p>局部作用域：函数内部就是局部作用域 又称为函数作用域（私有作用域，每一个函数就是一个私有作用域）</p><ul><li>在调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁，每调用一次函数就会创建一个新的函数作用域，他们之间是互相独立的</li></ul><p>es6中有新增了块级作用域，现在Es5先不涉及</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//局部作用域</span><br><span class="hljs-keyword">var</span> p=<span class="hljs-number">1</span>; <span class="hljs-comment">//局部变量，只能在函数内使用</span><br>a=<span class="hljs-number">10</span>; <span class="hljs-comment">//全局变量 如果一个变量在局部作用域内没有声明直接赋值了，那这个变量则是全局变量</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p)<br></code></pre></td></tr></table></figure><p>在局部作用域（函数内）内定义的变量就是局部变量，只有函数内可以使用，外部不能读取，但在函数作用可以访问到函数作用域的变量</p><p>当函数内和全局有相同的变量时（作用域链），在函数作用域内要访问全局变量，可以使用window对象。 Window.变量</p><p>函数的<strong>形参</strong>也可以看作是在函数作用内声明了局部变量</p><p>特例：如果一个变量在局部作用域内没有声明直接赋值了，那这个变量则是<strong>全局变量</strong></p><p>全局变量和局部变量的区别</p><ul><li>全局变量在全局都可使用，只有在浏览器关闭的时候才会销毁，比较占内存资源</li><li>局部变量只能在函数内使用。当其所在代码块执行时会被初始化，当代码块执行完毕就会被销毁，比较节约内存资源</li></ul><p>（不讲）块级作用域是es6新增的，块级作用域是{}.   比如For{} if{}，在外面不能使用块级作用域内的变量</p><p>  作用域的上下级，你的函数写在那个作用域下，你就是谁的子级作用域</p><p>作用域上下级的关系的作用是为了确定变量的使用范围</p><p> 三个机制：</p><ul><li><p>变量定义机制</p><ul><li>有var关键字      var 变量</li><li>声明式函数        function  fn（）{}</li></ul><p>一个变量（函数）定义在哪一个作用域，只能在当前的作用域或者下级作用域内使用，上一级作用域不能使用</p></li><li><p>变量使用机制</p><ul><li>当需要使用一个变量（函数）会首先在自己作用内查找，如果有，就直接使用，如果没有去上一级作用域查找，如果有就直接使用，如果还没有就继续向上一级作用域找直到全局作用域都没有，那就会报错</li></ul></li><li><p>变量赋值机制</p><ul><li><p>一定要有赋值符号</p></li><li><p>当你需要给一个变量（函数名）赋值的时候，会首先在自己的作用域查找，如果有直接赋值，如果没有去上一级作用域查找，有就赋值还没有就再去上一级作用域查找直到全局作用域都没有，就把这个变量定义为全局变量，再进行赋值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> fn()&#123;<br>    <span class="hljs-regexp">//</span> var num=<span class="hljs-number">100</span>;  <span class="hljs-regexp">//</span>声明了私有变量num，只能在fn内使用，fn外部不能使用<br>    num=<span class="hljs-number">100</span>; <span class="hljs-regexp">//</span>不能声明，只是赋值<br>    console.log(<span class="hljs-string">&#x27;****&#x27;</span>,num)<br>&#125;<br>fn(); <span class="hljs-regexp">//</span>这个函数执行的时候会定义一个全局变量num<br>console.log(num)<br><span class="hljs-regexp">//</span>最终顺序  <span class="hljs-number">100</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> fn()&#123;<br><br>    var a<br>    <span class="hljs-keyword">function</span> fun() &#123;<br>        a=<span class="hljs-number">200</span>;  <span class="hljs-regexp">//</span>给fn的私有变量a赋值<br>    &#125;<br>    console.log(a) <span class="hljs-regexp">//u</span>ndefined<br>    fun() <span class="hljs-regexp">//</span>这个函数执行完，才给fn私有a赋值<br>    console.log(a)<br>&#125;<br><span class="hljs-regexp">//</span> console.log(a) <span class="hljs-regexp">//</span>报错<br>fn()<br><span class="hljs-regexp">//</span> console.log(a) <span class="hljs-regexp">//</span>报错<br><span class="hljs-regexp">//</span> 最终的顺序为：报错  undefined  <span class="hljs-number">200</span> 报错 <br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>如果函数内还有函数就在这外部函数的作用域内又生成一个作用域</p><p>内部函数可以访问外部函数中的变量</p><p>作用域链的案例展示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">7</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getNum</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//外部函数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">8</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getNum2</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//内部函数 可访问外部函数里的变量</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-title function_">getNum2</span>();</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-title function_">getNum</span>(); <span class="hljs-comment">//8</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>作用域链：在局部作用域获取一个变量，系统会先在当前作用域查找var声明语句，如果找到了就直接使用，找不到则继续向上一级作用域查找，直到找到全局作用域中（？？？？给变量赋值的时候若还是没有找到则自动在全局作用域中声明该变量。）我们把这种链式的结构称为作用域链</p><p>案例：多案例练习</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">100</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//形参就相当于在函数内部定义的私有变量</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">fn</span>(); <span class="hljs-comment">//输出undefined</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"> <span class="hljs-keyword">var</span> a=<span class="hljs-number">100</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a</span>)&#123;</span><br><span class="language-javascript">a=<span class="hljs-number">200</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">fn</span>()</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)</span><br><span class="language-javascript">  <span class="hljs-comment">//输出顺序为200 100</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a</span>)&#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>a=<span class="hljs-number">200</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a)<br>  &#125;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a) <span class="hljs-comment">//100 只会输出以个100，因为fn函数没有调用</span><br>  <br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a=<span class="hljs-number">100</span>;<br>  fn();<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a</span>)&#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<span class="hljs-comment">//unde</span><br>a=<span class="hljs-number">200</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a)<span class="hljs-comment">//200</span><br>  &#125;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a) <span class="hljs-comment">//100</span><br>  <br>  <span class="hljs-comment">//输出顺序为undefined 200 100</span><br></code></pre></td></tr></table></figure><ul><li>函数的作用域是在函数定义时就已经确定了</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul><li><p>闭包就是能够用读取其他函数内部变量的函数，由于在js中，只有函数内部的子函数才能读取内部变量，因此可以将闭包理解成定义在函数内部的函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> n = <span class="hljs-number">999</span>;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(n);<br>  &#125;<br>  <span class="hljs-keyword">return</span> f2;<br>&#125;<br><br><span class="hljs-keyword">var</span> result = f1();<br>result(); <span class="hljs-comment">// 999</span><br><br><br><span class="hljs-comment">//等同于</span><br>f1()();<br><span class="hljs-comment">//---------------------f2函数就是闭包函数与有没有return没有关系</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> n = <span class="hljs-number">999</span>;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> n<br>  &#125;<br>  window.fn3=f2; <span class="hljs-comment">//将闭包函数f2赋值给了全局对象window，这样就可以在函数f1外部获取f1内的局部变量了</span><br>&#125;<br>f1();<span class="hljs-comment">//调用f1，目的是给windown.fn3赋值</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(window.fn3())<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(window)<br></code></pre></td></tr></table></figure></li><li><p>闭包的最大的特点就是它可以记住诞生环境，比如f2记住了它的诞生环境f1，所以可以从f2可以得到f1的内部变亮，在本质上，闭包就是将函数内部和函数外部链接起来的一座桥梁</p></li><li><p>闭包的最大的两个用处有两个，一个是可以读取外层函数内部的变量（在函数的外部访问函数内部的私有变量），另一个就是让这些变量始终保存在内存中，即闭包可以使它的诞生环境一直存在</p></li><li><p>闭包消耗内存很大，所以不要滥用闭包，否则会造成网页的性能问题，在ie浏览器中可能导致内存泄漏，解决方法就是，在退出函数前，将不使用的变量全部删除</p></li><li><p>程序运行需要内存，只要程序提出要求，操作系统或者运行时就必须供给内存</p><p>内存泄漏，对于持续运行的服务进程，必须及时的释放用不到的 内存，否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃</p><p>用不到的内存，没有及时释放，就叫做内存泄漏</p></li><li><p>闭包会在父函数外部改变父函数内部的变量，所以如果你把父函数当做对象（object）使用，把闭包当做它的公用方法，把内部变量当做它的私有属性，这时一定会要小心，不要随便来改变父函数内部的变量的值</p></li></ul><p>（千）</p><p>闭包：</p><ul><li><p>形成闭包的条件</p><p>1:一个不会被销毁的函数执行空间</p><p>2:函数内部 直接或 间接 的返回一个函数 </p><p>3:内部函数操作（访问，赋值）着外部的函数的变量</p></li><li><p>当三个条件都满足的时候</p><p>我们管内部函数叫做外部函数的 闭包函数</p></li><li><p>闭包的作用</p><p>1 保护变量私有化</p><p>  定义在函数内部的变量就是私有变量</p><p>2 在函数外部访问函数内部的私有变量，利用闭包函数访问</p></li><li><p>闭包的特点</p><p>1:保护变量私有化</p><p>​ 优点：不去污染全局</p><p>​缺点：外部不能访问，需要闭包函数</p><p>2:在函数外部访问函数内部的私有变量</p><p>​优点：不局限于私有变量</p><p>​缺点：外部访问需要闭包函数</p><p>3:变量的生命周期</p><p>​优点：变量的生命周期被延长</p><p>​缺点：一个不会被销毁的函数空间</p><p>​内存泄漏</p><p>​闭包慎用</p></li><li><p>闭包销毁</p><p>形成闭包的条件:不销毁的空间；返回函数；内部函数引用外部函数的变量</p><p>当想销毁闭包的时候，只要这个不销毁的空间不存在了，闭包就没了</p><ul><li><p>不销毁空间</p><p>返回复杂数据类型</p><p>外部有变量接收</p></li><li><p>销毁空间</p><p>外部不再有变量接收</p><p>外部接收的变量重新赋值</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-keyword">var</span> num=<span class="hljs-number">100</span>;<br>     <span class="hljs-comment">//fn 函数内返回一个a函数 </span><br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-comment">//访问外部函数 fn 的私有变量 num</span><br>         <span class="hljs-comment">//并把num 的值返回</span><br>         <span class="hljs-keyword">return</span> num;<br>     &#125;<br> &#125;<br> <span class="hljs-comment">//res 是fn的闭包函数</span><br> <span class="hljs-keyword">var</span> res=<span class="hljs-title function_">fn</span>();<br> <span class="hljs-comment">//想要销毁闭包:res 存储的不再是fn函数内部返回的函数了，fn的执行空间就销毁了</span><br> res=<span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>函数的一种应用方式</p><p>递：一层一层的进去</p><p>归：一层一层的回来</p><p>把一个事情分成若干事件来做</p><p>例子：5的阶乘    5 * 4 * 3 * 2 * 1</p><p>5 * 4的阶乘</p><p>​4 * 3的阶乘</p><p>​3 * 2的阶乘</p><p>​  2 * 1的阶乘</p><p>​1的阶乘就是1</p><p>本质：一个函数自己调用自己，当达到设置的终点的时候，再归回来，归使用return</p><p>看递归：看浏览器控制它，call stack 执行栈，就是看在执行哪一些代码</p><p><strong>注意：写递归先写停</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params">n</span>)&#123;<br>  <span class="hljs-comment">//写递归先写停</span><br>  <span class="hljs-keyword">if</span>(!n)&#123;<br>     <span class="hljs-keyword">return</span>;<br>     &#125;<br>  --n;<br>  <span class="hljs-title function_">fn1</span>(n) <br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用递归实现数值的阶乘  5的阶乘</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params">n</span>)&#123;<br>  <span class="hljs-comment">//n 就是你要求的阶乘</span><br>  <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-comment">//终点位置出现</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>  &#125;<br>  <span class="hljs-comment">//当n不是1的时候，我要递进去</span><br>  <span class="hljs-keyword">return</span> n*<span class="hljs-title function_">fn2</span>(n-<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-title function_">fn2</span>(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>js代码是由浏览器的js解析器（引擎）解析执行的，js引擎在运行js代码是分为两步。分别是预解析和代码执行</p><p>1:预解析：</p><p>在当前作用域下，js代码执行之前，浏览器会把当前作用域内所有的var和function声明的变量提升到当前作用域的最前面（全局作用域，函数作用域），它会在所有代码执行之前就被创建（所以我们可以在函数声明前来调用函数，使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用）</p><ul><li>函数内部的变量也会发生变量提升</li></ul><p>预解析分为：预解析又叫做变量，函数的提升</p><p>​（1）变量预解析 将作用域内所有变量声明提升到当前作用域的最前面 ，变量的赋值不会提升</p><p>​（2）函数预解析 将所有采用funchtion命令声明的整个函数提升到代码的最前面，但不会调用函数</p><p>​注意：匿名函数没有function声明，所以不会提升</p><pre><code class="hljs">var 变量名= function() &#123;函数体&#125;//这是声明一个变量，并将一个匿名函数（函数表达式）赋值给一个变量，不是函数声明。所以变量会提升，匿名函数不会提升等同于var 变量名；变量名=function()&#123; 函数体&#125;</code></pre><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;2&#x27;</span>);<br>&#125;<br><br>f() <span class="hljs-comment">// 1</span><br><br><br>等同于<br> <span class="hljs-keyword">var</span> f;               <span class="hljs-comment">//有变量的预解析，有声明式函数的预解析，问题是变量名和函数名重名了，当函数和变量重名</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;       <span class="hljs-comment">//时，在预解析阶段以函数为准</span><br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;2&#x27;</span>);<br>&#125;;<br> f = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>&#125;<br>f();<span class="hljs-comment">//1</span><br> <br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span><br><span class="hljs-selector-tag">var</span> fn=<span class="hljs-number">100</span><br><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span><br>function <span class="hljs-built_in">fn</span>()&#123;<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;我是 fn 函数&#x27;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span><br><br>等同于 <br><span class="hljs-comment">//预解析阶段</span><br><span class="hljs-selector-tag">var</span> fn；   <span class="hljs-comment">//声明fn变量 </span><br>function <span class="hljs-built_in">fn</span>()&#123;       <span class="hljs-comment">//声明fn变量，并赋值为一个函数，在预解析结束的时候，浏览器记录的fn变量是一个函数   </span><br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;我是 fn 函数&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">//代码执行阶段</span><br><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span>   <span class="hljs-comment">//调用fn，此时的fn为函数</span><br>fn=<span class="hljs-number">100</span>  <span class="hljs-comment">//给fn赋值为100</span><br><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span>  <span class="hljs-comment">//调用fn，但此时的fn为100，报错，程序中断</span><br><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span><br>function <span class="hljs-built_in">fn</span>()&#123;<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;我是fn函数&#x27;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span><br><span class="hljs-selector-tag">var</span> fn=<span class="hljs-number">100</span><br><span class="hljs-function"><span class="hljs-title">fn</span><span class="hljs-params">()</span></span><br><br><br>等同于<br> 预解析阶段<br>  function <span class="hljs-built_in">fn</span>()&#123;<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;我是fn函数&#x27;</span>)<br>  &#125;<br>  <span class="hljs-selector-tag">var</span> fn；<br>  <br>  代码执行阶段<br>  <span class="hljs-built_in">fn</span>() <br>  <span class="hljs-built_in">fn</span>() <br>  fn=<span class="hljs-number">100</span><br>  <span class="hljs-built_in">fn</span>()<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//--预解析无节操</span><br>- <span class="hljs-keyword">if</span>条件不管是不是成立，里面的代码都会进行预解析<br>- <span class="hljs-keyword">return</span> 后面的代码虽然不执行，但是会进行预解析<br><br><span class="hljs-comment">//案例1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">var</span> num=<span class="hljs-number">100</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)  <span class="hljs-comment">//100</span><br><br><span class="hljs-comment">//案例2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span>)&#123;<br><span class="hljs-keyword">var</span> num=<span class="hljs-number">100</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)  <span class="hljs-comment">//undefined</span><br><br><span class="hljs-comment">//案例3:</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> num=<span class="hljs-number">100</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)   <span class="hljs-comment">//100xw</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n)   <span class="hljs-comment">//undefined</span><br>  <span class="hljs-keyword">return</span>           <span class="hljs-comment">// return 后面的代码虽然不执行，但是会进行预解析</span><br>  <span class="hljs-keyword">var</span> n=<span class="hljs-number">200</span><br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">;(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable language_">window</span>=&#123;&#125;<br><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>)<br>&#125;());<br><span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>经典案例：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">f1()<span class="hljs-comment">;</span><br>console.log(c)<span class="hljs-comment">;</span><br>console.log(b)<span class="hljs-comment">;</span><br>console.log(a)<span class="hljs-comment">;</span><br>function f1() &#123;<br>  var a <span class="hljs-operator">=</span> b <span class="hljs-operator">=</span> c <span class="hljs-operator">=</span> <span class="hljs-number">9</span><span class="hljs-comment">;</span><br>  console.log(a)<span class="hljs-comment">;</span><br>  console.log(b)<span class="hljs-comment">;</span><br>  console.log(c)<span class="hljs-comment">;</span><br>&#125;<br>////<br>var a <span class="hljs-operator">=</span> b <span class="hljs-operator">=</span> c <span class="hljs-operator">=</span> <span class="hljs-number">9</span><span class="hljs-comment">;</span><br>相当于：<br>var a<span class="hljs-operator">=</span><span class="hljs-number">9</span>；b<span class="hljs-operator">=</span><span class="hljs-number">9</span><span class="hljs-comment">;c=9;b和c是直接赋值，没有声明，在函数内没有声明直接赋值当全局变量看</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_43887184/article/details/105512242">https://blog.csdn.net/weixin_43887184/article/details/105512242</a></p><p>2:代码执行：按照代码书写的顺序从上到下执行js代码  </p><p>多案例练习</p><ul><li>对预解析的总结使用技巧<ul><li>函数名 不要和 变量重名</li><li>声明式函数可以先调用，但是尽量不要先调用</li><li>函数尽量使用赋值式函数来定</li><li>建议变量名命名以名词为主，尽量可能使用多个单词命名</li><li>函数名 以功能区分（使用动词） getUserName()</li></ul></li></ul><p>函数案例，翻转数组，for循环遍历数组中的元素倒序的放入一个新的数组中</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span></span>(arr)&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>=[];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=arr.length<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.length]=arr[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这隐含的参数就是this，它在函数体内部指代函数当前的运行环境</p><p>this指向的是一个对象，这个对象我们称为函数执行的上下文对象，根据函数的调用方式不同，this会指向不同的对象</p><p>this是一个使用在作用域内部的关键字，全局很少用，大部分都是在函数内部使用</p><p>this指向：</p><ul><li>在全局使用this指向window</li><li>函数内使用，不管函数怎么定义，不管函数在哪定义，只看函数的调用（箭头函数除外）</li></ul><p>​</p><pre><code class="hljs">- 以普通函数的形式调用时，this永远都是window（全局的函数就是window的方法）- 以对象的方法的形式调用时，this就是调用方法的那个对象，点前面是谁就指向谁    多层this嵌套的时候，内层的this指向window对象，解决方法可以使用中间变量固定this- 当以构造函数的形式调用时，构造函数体内部的this关键字，代表所要生成的那个对象实例- 定时器处理函数  this指向window    setTimeout(function()&#123;...&#125;,0) this指向window    setInterval(function()&#123;...&#125;,0) this指向window- 事件处理函数   this指向事件源，谁绑定的事件就指向谁     元素.onclick=function()&#123;...&#125;    元素.addEventListener(&#39;click&#39;,function()&#123;...&#125;);  - 自执行函数   this指向window    (function()&#123;&#125;)(); </code></pre><ul><li>函数的作用域在函数定义时就已经确定</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;你好&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;name&#x27;</span>+name);<br>&#125;<br><span class="hljs-keyword">var</span> obj1=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">1.10</span>,<br>    <span class="hljs-attr">fn</span>:fn<br>&#125;;<br><span class="hljs-keyword">var</span> obj2=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;你好&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;name&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj1=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">1.10</span>,<br>    <span class="hljs-attr">fn</span>:fn<br>&#125;;<br><span class="hljs-keyword">var</span> obj2=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">1.10</span>,<br>    <span class="hljs-attr">fn</span>:fn  <span class="hljs-comment">//将fn存储的地址赋值给了obj的fn成员，现在obj.fn和全局便变量fn指向一个函数空间</span><br>&#125;;<br><span class="hljs-title function_">fn</span>();  <br>obj1.<span class="hljs-title function_">fn</span>();  <span class="hljs-comment">//name张三</span><br>obj2.<span class="hljs-title function_">fn</span>();  <span class="hljs-comment">//name李四</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;外面的&#x27;</span>,name);   <span class="hljs-comment">//外面的 你好</span><br><br>--------<br><span class="hljs-built_in">setTimeout</span>(fn,<span class="hljs-number">0</span>);  定时器处理函数 <span class="hljs-variable language_">this</span>指向<span class="hljs-variable language_">window</span><br><br><span class="hljs-built_in">setTimeout</span>(obj1.<span class="hljs-property">fn</span>,<span class="hljs-number">0</span>);  定时器处理函数 <span class="hljs-variable language_">this</span>指向<span class="hljs-variable language_">window</span><br><br>div.<span class="hljs-property">onclick</span>=obj1.<span class="hljs-property">fn</span>;     事件处理函数<span class="hljs-variable language_">this</span>指向事件源<br><br>div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,obj1.<span class="hljs-property">fn</span>);  事件处理函数<span class="hljs-variable language_">this</span>指向事件源<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">fn</span>()  <span class="hljs-comment">//this-&gt;window</span><br>&#125;,<span class="hljs-number">0</span>);<br><br>div.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);    <span class="hljs-comment">//this-&gt;事件源 div</span><br><span class="hljs-title function_">fn</span>()                  <span class="hljs-comment">//this-&gt;window</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">newFn</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;;<br><span class="hljs-title function_">newFn</span>();  <span class="hljs-comment">//this--&gt;window</span><br>&#125;; <br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//由于对象的属性是可以赋值给另一个对象的，所以属性所在对象是可变的，即this的指向是可变的</span><br><span class="hljs-keyword">var</span> A = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">describe</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;姓名：&#x27;</span>+ this.name;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> B = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span><br>&#125;;<br>B.y=A.describe;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(B)<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(B.y())  <span class="hljs-comment">//&quot;姓名：李四&quot;  以对象的方法调用，this指向调用它的对象</span><br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> A = &#123;<br>  name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  describe: <span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;姓名：&#x27;</span>+ <span class="hljs-keyword">this</span>.name;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;李四&#x27;</span>;<br><span class="hljs-keyword">var</span> f = A.describe;<br>f() <span class="hljs-comment">// &quot;姓名：李四&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br><span class="hljs-comment">//this所在方法不在对象的第一层，这时this只是指向当前一层的对象，而不会继承更上面一层</span><br><span class="hljs-keyword">var</span> a=&#123;<br><span class="hljs-attr">p</span>:<span class="hljs-string">&quot;hello&quot;</span>,<br><span class="hljs-attr">b</span>:&#123;<br><span class="hljs-attr">m</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.p)<br>&#125;<br>&#125;<br>&#125;;<br>a.b.m() <span class="hljs-comment">//undefined</span><br><br>--------------------------------------------<br><span class="hljs-keyword">var</span> b = &#123;<br>           <span class="hljs-attr">a</span>: <span class="hljs-number">23</span>,<br>           <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>           <span class="hljs-attr">d</span>: &#123;<br>               <span class="hljs-attr">a</span>: <span class="hljs-number">78</span>,<br>               <span class="hljs-attr">e</span>: &#123;<br>                   <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>,<br>                   <span class="hljs-attr">f</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.a);<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">var</span> fn = b.d.e.f;<br>       fn(); <span class="hljs-comment">//undefined</span><br>       b.d.e.f(); <span class="hljs-comment">//100  </span><br>       <br>       <br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> myObject = &#123;<br>       <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>       <span class="hljs-attr">func</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">var</span> self = this;<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.foo);<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(self.foo);<br>       &#125;<br>   &#125;;<br>   myObject.func(); <br>   <span class="hljs-comment">// bar bar</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> x = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">var</span> y = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">getY</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> y = <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">return</span> this.y;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.getY()); <br><span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">function a(xx) &#123;<br>          this.x <span class="hljs-operator">=</span> xx<span class="hljs-comment">;</span><br>          return this<span class="hljs-comment">;</span><br>      &#125;<br>      var x <span class="hljs-operator">=</span> a(<span class="hljs-number">5</span>)<span class="hljs-comment">;</span><br>      var y <span class="hljs-operator">=</span> a(<span class="hljs-number">6</span>)<span class="hljs-comment">;</span><br>      console.log(x.x)<span class="hljs-comment">;</span><br>      console.log(y.x)<span class="hljs-comment">;</span><br>      // window.x <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-comment">;</span><br>      // window.x <span class="hljs-operator">=</span> window<br>      // window.x <span class="hljs-operator">=</span> <span class="hljs-number">6</span><br>      // window.y <span class="hljs-operator">=</span> window<br>      <br>      最终输出是：undefined <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> $ = &#123;<br>       <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;haha&#x27;</span>,<br>       <span class="hljs-attr">fn</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>);<br>           <span class="hljs-keyword">return</span> this;<br>       &#125;,<br>       <span class="hljs-attr">fn2</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>);<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.name)<br><br>       &#125;<br>   &#125;<br>   $.fn().fn2();<br>   <br>   <span class="hljs-comment">// 1 2 haha</span><br>   运算符的优先级 先成员访问再 再函数调用<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj=&#123;<br><span class="hljs-attr">foo</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this)<br>&#125;<br>&#125;<br>obj.foo();<span class="hljs-comment">//obj</span><br>(<span class="hljs-literal">false</span>||obj.foo)(); <span class="hljs-comment">//window对象</span><br></code></pre></td></tr></table></figure><p>避免多层this嵌套</p><p>多层this嵌套时内层的this指向window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">f1</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>        <span class="hljs-keyword">var</span> f2=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>        &#125;();<br>    &#125;<br>&#125;<br>obj.<span class="hljs-title function_">f1</span>(); <span class="hljs-comment">//obj window</span><br><br>解决方法：<br>在内层使用一个变量固定外层的<span class="hljs-variable language_">this</span>，然后在内层使用变量，就不会发生<span class="hljs-variable language_">this</span>指向的改变了<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">f1</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>        <span class="hljs-keyword">var</span> that=<span class="hljs-variable language_">this</span>；<br>        <span class="hljs-keyword">var</span> f2=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(that)<br>        &#125;();<br>    &#125;<br>&#125;<br>obj.<span class="hljs-title function_">f1</span>(); <span class="hljs-comment">//obj obj</span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;mama&#x27;</span><br>function fn()&#123;<br>    <span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;bubu&#x27;</span><br>    console.log(<span class="hljs-string">&#x27;111&#x27;</span>,<span class="hljs-keyword">this</span>.name,name);                   <span class="hljs-comment">// 111 mama bubu</span><br>    function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>        console.log(<span class="hljs-string">&#x27;22222&#x27;</span>,<span class="hljs-keyword">this</span>.name,name);             <span class="hljs-comment">//22222 mama bubu 内层this指向window</span><br>    &#125;                       <br>    <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span><br>&#125;<br>fn()<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript">数组的map和foreach方法，允许提供一个函数作为参数，这个也是多层<span class="hljs-variable language_">this</span>嵌套<br><br>---------------------------<br><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>],name=<span class="hljs-string">&#x27;mama&#x27;</span>;<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)  <span class="hljs-comment">//mama   内层this指向window</span><br>&#125;)<br><br>---------------------------------<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;sun&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;bubu&#x27;</span><br><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>]<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">//sun 通过第二个参数绑定参数函数的运行环境（this指向）</span><br>&#125;,obj)<br><br>----------------------<br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;sun&#x27;</span>,<br>    <span class="hljs-attr">arr</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>],<br>    <span class="hljs-attr">f</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>        &#125;)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;bubu&#x27;</span><br>obj.<span class="hljs-title function_">f</span>();<span class="hljs-comment">// bubu  内层this指向window </span><br>--------<br>解决方法<span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;sun&#x27;</span>,<br>    <span class="hljs-attr">arr</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>],<br>    <span class="hljs-attr">f</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> that=<span class="hljs-variable language_">this</span>; <span class="hljs-comment">//使用变量固定this</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(that.<span class="hljs-property">name</span>)<br>        &#125;)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;bubu&#x27;</span><br>obj.<span class="hljs-title function_">f</span>();<br>--------<br>解决方法<span class="hljs-number">2</span> <br>使用map，foreach的第二个参数指定参数函数的<span class="hljs-variable language_">this</span>指向<br><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">point</span> = &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">moveTo</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y</span>) &#123;<br>        this.x = x;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.x);<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this);<br><br>        <span class="hljs-keyword">var</span> moveX = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>            this.x = x;<br>        &#125;;<br>        <span class="hljs-keyword">var</span> moveY = <span class="hljs-keyword">function</span>(<span class="hljs-params">y</span>) &#123;<br>            this.y = y;<br>        &#125;<br>        moveX(x);<br>        moveY(y);<br>    &#125;<br>&#125;;<br><span class="hljs-built_in">point</span>.moveTo(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//1 point </span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">point</span>.x);<span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">point</span>.y);<span class="hljs-comment">//0</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x); <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(y); <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><h2 id="绑定this的方法"><a href="#绑定this的方法" class="headerlink" title="绑定this的方法"></a>绑定this的方法</h2><p>this的不确定，js提供了三个绑定this的方法</p><ul><li>call</li></ul><p>函数实例的call方法，this指定函数内部的this指向（即函数执行时所在作用域），然后在作用域中立即调用函数</p><p>会立即调用函数，不适合用作定时器处理函数或者事件处理函数</p><p>两个作用：改变函数的this指向，调用函数</p><p>Call 方法的参数应该是一个对象，如果参数为空，unll,undefined ,则默认传入全局对象</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var obj=&#123;<br>    <span class="hljs-type">name</span>:<span class="hljs-string">&#x27;mama&#x27;</span><br>&#125;<br>var <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;bubu&#x27;</span><br><span class="hljs-keyword">function</span> fn()&#123;<br>    console.log(this.name)<br>&#125;<br>fn();                                 // bubu this 为<span class="hljs-keyword">window</span><br>fn.<span class="hljs-keyword">call</span>(obj);                         // mama 绑定了this的指向为 obj,然后在对象obj的作用域内运行函数fn<br>fn.<span class="hljs-keyword">call</span>();  //bubu<br>fn.<span class="hljs-keyword">call</span>(unll);<br>fn.<span class="hljs-keyword">call</span>(undefined);<br>fn.<span class="hljs-keyword">call</span>(<span class="hljs-keyword">window</span>);<br></code></pre></td></tr></table></figure><ul><li>call方法可以接收多个参数。第一个参数是this指向，后页的参数则是调用函数时所需的参数</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;mama&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;bubu&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.name,a+b)<br>&#125;<br>fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//this 为window</span><br>fn.call(obj,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//绑定了this的指向为 obj  调用函数并给函数传参</span><br><br>-----<br>fn.apply(obj,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]) <span class="hljs-comment">// mama 3 </span><br></code></pre></td></tr></table></figure><ul><li><p>call方法可以使伪数组使用数组的方法</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arguments);<br>     <br>     <span class="hljs-comment">//使用一个空数组[]将foreach方法调用起来，然后再使用call方法的第一个参数来改变foreach的           this指向为arguments</span><br>     <span class="hljs-comment">//foreach方法遍历查看arguments</span><br>     <span class="hljs-comment">//call的第二个参数是传给foreach的方法里的参数函数(回调函数)</span><br>     <br>     [].forEach.call(arguments,<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>   <br>         <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;call方法的第二个参数是数组的forEach方法的参数函数&#x27;</span>);<br>         <br>         <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(item); <span class="hljs-comment">//item为arguments的每一项</span><br>   <br>     &#125;)<br> &#125;<br> <br> fn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure></li><li><p>applay方法</p><p>使用方法：直接连接在函数名后面使用</p><p>applay方法与call方法类似，也是改变this指向，然后在调用该函数唯一的区别是，它可以接收一个数组（伪数组）作为函数的参数,该数组的所有成员依次作为函数的参数，传入函数，而call方法给函数传参要一个一个的传入，applay给函数传参必须要以数组的形式传入</p><p>第一个参数：就是函数内的this指向</p><p>第二个参数：是一个数组或 伪数组，所有成员依次作为函数的参数，传入函数</p><p>特点：会立即调用函数，不适合用作定时器处理函数或者事件处理函数</p></li><li><p>作用：可以以数组的形式给某些功能函数传参</p><p>在js中不提供找出数组中最大元素的函数，结合apply方法和Math.max方法可以，就可以返回数组中最大元素</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">33</span>,<span class="hljs-number">24</span>,<span class="hljs-number">56</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6767</span>,<span class="hljs-number">3323</span>,<span class="hljs-number">36</span>,-<span class="hljs-number">1</span>]<br><span class="hljs-attribute">console</span>.log(Math.max.apply(null,arr))<br><span class="hljs-attribute">console</span>.log(Math.min.apply(null,arr))<br></code></pre></td></tr></table></figure></li><li><p>bind() </p><p>bind()方法用于将函数体内的this绑定到某个对象，并不调用函数，而是返回一个新函数，一个已经改变好this指向的函数</p><p>作用：该变事件处理函数或者定时器处理函数的this指向</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;mama&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;bubu&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.name,a+b)<br>&#125;<br><span class="hljs-keyword">var</span> sunFn=fn.bind(obj,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);   <span class="hljs-comment">//将this绑定obj后，返回一个新的函数</span><br>sunFn(); <span class="hljs-comment">//调用函数</span><br><br><br><br>------<br>&lt;div&gt;<span class="hljs-number">88</span>&lt;div&gt;<br>--js<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a,b)<br>&#125;<br><span class="hljs-keyword">var</span> div.documen.querySelected(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-comment">//其实一般不会事件处理函数的this指向，给事件处理函数使用bind的目的是给事件处理函数传参的，事件处理函数不接受传参，当我们想要给事件处理函数传递一些参数可以使用bind方法传参</span><br>div.onclick=fn.bind(<span class="hljs-literal">null</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>);<span class="hljs-comment">//这样内部的this指向window，内部不用this的话，不用考虑this，只为给事件处理函数传参</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h5><p>this的指向再函数定义的时候是确定不了的，只有函数执行的时候才能确定this的到底指向谁，一般情况下this的最终指向的是那个调用它的对象</p><ul><li><p>全局作用域或者普通函数中的this指向全局对象window，定时器里的面的this指向也是window，因为window.setTimeout() window省略了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">fn</span>();  全局作用域定义的变量和方法。。。<br></code></pre></td></tr></table></figure></li><li><p>方法调用中谁调用指向谁</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> o=&#123;<br>  <span class="hljs-attr">sayHi</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this); <br>  &#125;<br>&#125;<br>o.sayHi();  <span class="hljs-comment">//在对象o调用，this指向o对象</span><br><br>btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this);  <span class="hljs-comment">//this指向的是btn这个按钮对象</span><br>&#125;) <br></code></pre></td></tr></table></figure></li><li><p>构造函数中this指向构造函数的实例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function Fun()&#123;<br>console.log(<span class="hljs-keyword">this</span>);  <br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-function"><span class="hljs-keyword">fun</span>=new <span class="hljs-title">Fun</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//this指向的fun这个实例对象</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>根据js语法：圆括号() 跟在函数名的后面，表示调用该函数，但我们需要在定义函数之后，立即调用函数，</p><p>function关键字既可以当做语句，也可以当做表达式</p><p>我们不能在声明式函数后加上圆括号，这样会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;&#125;();<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><p>当做表达式的时候，函数可以定义后直接加圆括号调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a=<span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;&#125;()<br></code></pre></td></tr></table></figure><p>为了避免解析的歧义，js规定如果function关键字出现在行首，一律解释成语句，因此，引擎看到行首的是function关键字之后，认为这一段都是函数的定义，不应以圆括号结尾，所以就报错</p><p>函数定义后立即调用该的解决</p><p>立即执行函数，函数调用的一种方式</p><p>立即执行函数不需要单独调用，立马能过自己执行的函数，也可以传递参数</p><p>立即执行函数最大的作用就是独立创建一个作用域，里面的所有变量都是局部变量 不会有命名的冲突，防止外界变量污染内部数据方法，就是不要让function出现在行首，让引擎将其理解成一份表达式，最简单的处理就是将其放在一个圆括号里面</p><p>通常情况下，只对匿名函数使用这种立即执行函数表达式，目的有两个：一是不必为函数命名，避免污染全局变量，二是 在立即执行函数内形成一个单独的作用域，可以封装一些外部无法读取的私有变量</p><p>格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;)();<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;());<br><span class="hljs-comment">//注意：语句后的分号是必须的，如果没有分号，遇到两个连个着的立即执行函数就会报错，上面两行之间若是没有分号，js会将他们连在一起解释，第二行解释为第一行的参数</span><br><br><span class="hljs-comment">//或</span><br>~<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;();<br>!<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;();<br><br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a+b)&#125;)(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//----</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a+b)&#125;(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)); 第二个小括号可以看作是调用函数<br><span class="hljs-comment">//---</span><br>～<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;111&#x27;</span>)<br>&#125;()<br><span class="hljs-comment">//----</span><br>!<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;111&#x27;</span>)<br>&#125;()<br></code></pre></td></tr></table></figure><p>一般作用是在单独书写js文件的时候使用</p><p>为了保护变量不污染全局，每一个js文件里面初始化使用一个自执行函数包裹</p><p>将一些需要别的文件使用的变量挂在全局（window.a&#x3D;11）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">-------------------------- 一个需要单独引入的js文件<br>;(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;--------------------每一行以(),[],<span class="hljs-string">&#x27;&#x27;</span>开头时要写分号<br>        <span class="hljs-keyword">var</span> mama=<span class="hljs-number">100</span>*<span class="hljs-number">100</span>;<br>        <span class="hljs-comment">//-----------------将一些需要别的文件使用的变量挂在全局</span><br>        window.bubu=<span class="hljs-string">&#x27;加油&#x27;</span>;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(mama)<br>&#125;)()<br></code></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>在现实生活中最；万物皆对象，是一个看得见摸得着的事物</p><p>在js中对象是一个容器，封装了属性和方法，属性是对象的状态特征，方法是对象的行为（完成某种任务），</p><p>所有的事物都是对象，如字符串，数组，函数等</p><p>对象是一种复合的数据类型，在对象中可以保存多个不同的数据类型的属性</p><p>（对象：一个盒子，承载一堆数据；函数，一个盒子，承载一段代码）</p><h3 id="如何创建对象"><a href="#如何创建对象" class="headerlink" title="如何创建对象"></a>如何创建对象</h3><h4 id="使用字面量创建对象"><a href="#使用字面量创建对象" class="headerlink" title="使用字面量创建对象"></a>使用字面量创建对象</h4><p>对象用{}表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> cat=&#123;&#125;; <span class="hljs-comment">//创建了一个空对象</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">song</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;i can song&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> dog=&#123;    <span class="hljs-comment">//使用字面量创建对象的时候可以直接添加一些数据</span><br> <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;欢欢&quot;</span>，<br> <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<br> <span class="hljs-attr">run</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;it can run&quot;</span>)<br> &#125;,<br> <span class="hljs-attr">sing</span>:song<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog.<span class="hljs-property">sing</span>==song); <span class="hljs-comment">//true</span><br><br></code></pre></td></tr></table></figure><ul><li><p>对象里的属性(和方法)是采用键值对的形式（key：value），键 是属性名，值 是属性值</p><p>对象的键值可以是任意类型的数据，如果键值是函数，我们通常称这个属性为方法，它可以像函数一样调用，</p><p>调用函数就说调用对象的方法（method），但它和函数只是名称上的区别没有其他的区别（函数是全局对象window的方法）</p><p>方法冒号后面跟的是一个匿名函数</p><p>多个属性或方法之间用逗号隔开</p><p>es5中，对象的所有键名都是字符串，加不加引号都可以，如果键名是数值会被自动转化为字符串</p></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj=&#123;<br> <span class="hljs-number">2</span>:<span class="hljs-string">&#x27;hh&#x27;</span>，<br> <span class="hljs-number">3</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;我是数字3&#x27;</span>)<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​如果键名不符合标识名的规则（第一个字符是数字，有空格或运算符等）且也不是数字，则必须给键名加上引号，否则会报错</p><p>​对象的属性名不强制要求遵守标识符的规范，什么乱七八糟的名字都可以使用，但是我们还是尽量按照标识符的规范去做</p><ul><li><p>操作对象的属性有两种方法</p><ul><li><p>使用点运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">对象.属性名=属性值；       向对象中添加一个成员或者修改对应属性或方法的值（原来有就修改，原来没有就添加）<br><span class="hljs-keyword">delete</span> 对象.属性名        删除对象里的成员<br>对象名.属性名             获取对象内的某个成员的值 当访问一个对象里没有的成员的时候返回<span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">对象名.方法名<span class="hljs-comment">()</span>  调用方法要加小括号<br></code></pre></td></tr></table></figure><p>如果键名是数字不能使用点运算符,只能使用方括号运算符,即写入和读取的时候都只能使用方括号运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj=&#123;&#125;;<br>obj[<span class="hljs-number">123</span>]=<span class="hljs-string">&#x27;77&#x27;</span>;  <span class="hljs-comment">//最好使用引号括着纯数值123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;obj&#x27;</span>,obj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-number">123</span>]) <br></code></pre></td></tr></table></figure></li><li><p>使用方括号运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">对象名[<span class="hljs-string">&#x27;属性名&#x27;</span>]=值；        添加或修改一个成员<br>对象名[<span class="hljs-string">&#x27;属性名&#x27;</span>]            获取（访问） 当访问一个对象里没有的成员的时候返回<span class="hljs-literal">undefined</span><br><span class="hljs-keyword">delete</span> 对象名[<span class="hljs-string">&#x27;属性名&#x27;</span>];    删除一个成员<br></code></pre></td></tr></table></figure><p>注意如果使用方括号运算符，键名必须要放在引号里</p></li></ul><p>使用点运算符和方括号运算符操作对象的区别：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>使用点运算符添加对象成员的时候:不能使用变量,不能拼接字符串，点后面是什么，这个属性或方法的健名就是什么<br><br>使用方括号运算符可以使用变量，可以使用字符串拼接，这样变量值是多少就会读取那个属性<br><br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-keyword">var</span> obj=&#123;&#125;;<br>obj.<span class="hljs-property">name</span>=<span class="hljs-number">123</span>;<span class="hljs-comment">//给变量添加一个键名为name的属性，和变量name没有关系</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<span class="hljs-comment">//&#123;name:123&#125;</span><br><span class="hljs-comment">// console.table(obj);</span><br>obj[name]=<span class="hljs-number">456</span>;<span class="hljs-comment">//将name变量的值拿来作为新添加的对象的属性的属性名 等价于 obj[&#x27;abc&#x27;]=456;</span><br>obj[name+<span class="hljs-number">1</span>]=<span class="hljs-number">666</span>; <span class="hljs-comment">//方括号运算符采用字符串的拼接</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<span class="hljs-comment">//&#123;name: 123, abc: 456, abc1: 666&#125;</span><br><span class="hljs-comment">// console.table(obj);</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：对象在控制台打印的时候，会出现两种情况，现在的样子和最终的样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">- 在控制台上，不展开对象数据类型的时候，是当前的样子<br>- 在控制台，展开对象的时候数据类型的以后，就是最终的样子<br>- 解决方法：打印你想看到的值或者使用<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>();table不展示对象里的方法<br></code></pre></td></tr></table></figure></li></ul><h3 id="变量和属性的比较"><a href="#变量和属性的比较" class="headerlink" title="变量和属性的比较"></a>变量和属性的比较</h3><p>变量和属性的相同点是都是用来存储数据的，不同是：</p><p>变量要单独声明，使用时直接写变量名，单独存在</p><p>对象里的变量称为属性， 在对象里不需要声明，使用时必须要 对象名.属性名</p><p> 函数和方法的比较</p><ul><li><p>相同点：都是实现某种功能，做某件事</p></li><li><p>不同点：函数是单独声明并且调用的， 单独存在。 调用: 函数名()</p><p>​对象里的函数称为方法，方法在对象里不需要声明，调用时要  对象名.方法名()</p><p>对象的键值可以是任意类型的数据，如果键值是函数，我们通常称这个属性为方法，它可以像函数一样调用，</p><p>调用函数就说调用对象的方法（method），但它和函数只是名称上的区别没有其他的区别（函数是全局对象window的方法）</p></li><li><p>在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，它由浏览器创建，我们可以直接使用，在全局作用域中创建的变量都会作为window对象的属性保存，创建的函数都会作为windoe对象的方法保存</p></li></ul><h4 id="使用new-Object-创建对象"><a href="#使用new-Object-创建对象" class="headerlink" title="使用new Object 创建对象"></a>使用new Object 创建对象</h4><p>js给我们提供了一个内置的构造函数叫做Object</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj=<span class="hljs-keyword">new</span> Object(); <span class="hljs-comment">//创建一个空对象，使用内置对象的方法不好直接添加成员，后面通过对对象的操作语法来进行增删改查</span><br>obj.name=<span class="hljs-string">&#x27;欢欢&#x27;</span>;，<br>obj.age=<span class="hljs-number">1</span>;<br>obj.run=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;run a run&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用等号赋值的方法添加对象的属性和方法</p><p>每个赋值语句后使用分号结束</p><p>获取对象的属性和方法同上</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>面向对象开发，是一个我们的开发思想（你写代码的方式）</p><ul><li><p>面向过程 开发的过程中，关注每一个步骤细节</p><p>吃面 ：和面 切面 煮面 拌面 吃面</p></li><li><p>面向对象</p><p>找一个面馆  点一碗面 等着吃</p><p>当我们需要一份功能a的时候，我们找js有没有完成这份功能a的对象，如果没有，我们就制造这个机器，这个机器 可以制造 完成功能a的对象</p></li></ul><p>以上两种方法创建的对象时一个个创建的，由于对象是单个实物的抽象，通常需要一个模版，表示某一类实物的共同特征，然后对象根据这个模版生成。</p><p>js语言可以使用构造函数作为对象的模版，所谓构造函数就是专门用来生成实力对象的函数，它是是对象的模版，将对象共同的属性和方法封装在构造函数里，它范指一大类，类似于java、c++里的类</p><p>一个构造函数可以生成多个实例对象，生成的这些实例对象都有相同的结构</p><p>构造函数的目的：创造一个有属性 有方法 的 合理 的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 构造函数名=<span class="hljs-keyword">function</span>（）&#123;<br><span class="hljs-variable language_">this</span>.属性名=属性值；<br><span class="hljs-variable language_">this</span>.方法名=<span class="hljs-keyword">function</span>（）&#123;<br>执行代码<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Dog</span>=fuction（dogName）&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=dogNmae；<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">run</span>=<span class="hljs-keyword">function</span>（runWhere）&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(runWhere)；<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用构造函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">new</span> 构造函数名();<br><br><span class="hljs-keyword">var</span> xdog=<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;欢欢&#x27;</span>);<br>获取生成的实例对象的属性和方法<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>（xdog.name）；<br>xdog.run(<span class="hljs-string">&quot;花园）；</span><br></code></pre></td></tr></table></figure><h3 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h3><p>new关键字的作用就是执行构造函数，返回一个实例对象(使用new关键字调用构造函数的时候如果不需要传参可以不写后面的（）运算符，new关键字就是在调用构造函数，但是为了表示是函数调用所以推荐调用构造函数的时候写上圆括号运算符)</p><p>new关键字的执行过程：</p><p>1:new 构造函数 在内存中创建一个空对象</p><p>2:将构造函数中的this指向刚创建的空对象</p><p>3:执行构造函数里的代码，给这个空对象添加属性和方法，所有针对this的操作，都会发生在空对象上</p><p>4:返回这个对象</p><h2 id="构造函数的特点："><a href="#构造函数的特点：" class="headerlink" title="构造函数的特点："></a>构造函数的特点：</h2><ul><li><p>构造函数就是一个普通的函数，创建方式和普通函数没有区别，不同的是为了让构造函数和普通函数的区别开，构造函数名字的第一个字母要大写</p></li><li><p>一个函数作为普通函数调用的时候使用圆括号运算符，作为构造函数函数调用的时候使用new调用</p></li><li><p>（调用构造函数和普通函数的调用方式不同，构造函数必须使用new命令调用，普通函数直接使用函数名调用）</p></li><li><p>构造函数体内部的使用了this关键字，代表所要生成的对象实例</p></li><li><p>构造函数不需要使用return，就可以返回结果，返回结果是一个实例对象</p></li><li><p>使用new命令时，根据需求，构造函数也可以接受参数</p></li><li><p>使用同一个构造函数创建的对象，我们称之为一类对象，也将一个构造函数称为一个类</p></li><li><p>通过new关键字创建对象的过程我们称为对象实例化</p></li><li><p>使用instanceof 可以检查一个对象是否是一个类（构造函数）创建的实例对象</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">对象 <span class="hljs-keyword">instanceof</span> 构造函数<br><span class="hljs-regexp">//</span>返回值：<span class="hljs-literal">true</span> 或者<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><p>For…in循环大部分时侯是用来遍历对象里的所有属性，不直接使用for循环是因为对象里的成员名是没有什么规律的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">var obj=&#123;a:<span class="hljs-number">1</span>,b:<span class="hljs-number">2</span>,c:<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span>(var k <span class="hljs-keyword">in</span> obj)&#123;<br>console.log(<span class="hljs-string">&quot;键名：&quot;</span>，k);<br>console.log(<span class="hljs-string">&quot;键值：&quot;</span>，obj[k]); <span class="hljs-regexp">//</span>注意不能使用点语法，因为点语法不能使用变量<br>&#125; <br>根据对象内有多少个属性，循环体就会执行多少次（每次执行时，就会将对象的一个属性名字赋值给变量K）<br>遍历对象的判断条件是k在对象里<br>每循环一次，k分别是对象的成员的名称（键名）（数据类型是：字符串类型）<br><span class="hljs-regexp">//</span> 键名： a<br><span class="hljs-regexp">//</span> 键值： <span class="hljs-number">1</span><br><span class="hljs-regexp">//</span> 键名： b<br><span class="hljs-regexp">//</span> 键值： <span class="hljs-number">2</span><br><span class="hljs-regexp">//</span> 键名： c<br><span class="hljs-regexp">//</span> 键值： <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>(For..in循环有两个使用注意点：</p><p>1:它遍历的是对象所有可遍历的属性，不会跳过不可遍历的属性</p><p>2：它不仅遍历对象自身的属性，还遍历继承的属性</p><p>)</p><h2 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h2><p>通过该运算符可以检查一个对象中是否含有指定的属性，如果有则返回true，没有则返回false</p><p>格式：”属性名” in 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs y">检查obj中是否含有name属性<br>console.log(&#x27;name&#x27; in obj);<br></code></pre></td></tr></table></figure><ul><li><p>使用in语法，判断一个成员是不是在对象里</p><p>格式： 键名 in 对象名  </p><p>对象里的每一个成员名称都必须是字符串,所以键名要以字符串的格式书写</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var obj=&#123;<br><span class="hljs-type">name</span>:<span class="hljs-string">&#x27;lili&#x27;</span>;<br>age:<span class="hljs-number">18</span><br>&#125;<br>console.log(<span class="hljs-type">name</span> <span class="hljs-keyword">in</span> obj)<br>//<span class="hljs-keyword">false</span> 此处返回<span class="hljs-keyword">false</span>是因为这里的<span class="hljs-type">name</span>是值的一个变量，<span class="hljs-keyword">window</span> 对象自带一个<span class="hljs-type">name</span><br>console.log(&quot;name&quot;,obj)<br>//<span class="hljs-keyword">true</span> <br></code></pre></td></tr></table></figure></li></ul><h3 id="数据类型存储的区别"><a href="#数据类型存储的区别" class="headerlink" title="数据类型存储的区别"></a>数据类型存储的区别</h3><ul><li><p>数据类型分为两种-基本数据类型 和复杂数据类型</p></li><li><p>复杂数据类型-function Object</p></li><li><p>存储上的区别是：</p></li><li><p>js打开的内存空间，js是一个脚本语言，依赖于浏览器执行，本质是依赖于浏览器里的js引擎，js本身不打开内存空间，因为浏览器在你的电脑上运行的时候，会占用一段内存空间，js就是在这一段内存空间里运行的，数据类型的存储，就是存储在浏览器分配给js存储的一段空间里</p><p>浏览器的一段存储空间</p><ul><li><p>栈内存</p><p>存储机制，先来进栈底</p></li><li><p>堆内存</p><p>存储机制，随机存储</p><p><img src="/smiling-sheep.github.io/Users/wei/Desktop/markdown/js%E5%A4%87%E8%AF%BE/img/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A81.jpeg"></p></li></ul></li><li><p>数据类型的存储</p><ul><li><p>基本数据类型</p><p>直接把值存储在栈内存里面,先来的进栈底，值与值之间的存储是独立的，改变一个变量不会影响其他变量</p></li><li><p>负杂数据类型（地址数据类型&#x2F;引用数据类型）</p><p>对象是保存在堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间</p><p>把数据放在了堆内里面，把在堆内存中的地址放在了栈内存的变量里面，我们管这个地址叫做引用</p><p><img src="/smiling-sheep.github.io/Users/wei/Desktop/markdown/js%E5%A4%87%E8%AF%BE/img/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A82.jpeg"></p></li></ul></li></ul><p><img src="/smiling-sheep.github.io/Users/wei/Desktop/markdown/js%E5%A4%87%E8%AF%BE/img/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A83.jpeg"></p><p><img src="/smiling-sheep.github.io/Users/wei/Desktop/markdown/js%E5%A4%87%E8%AF%BE/img/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A86.png"></p><ul><li><p>代码执行时，我们只能访问栈里面的内容，你要想访问一个对象里的成员，因为对象本身在堆内存里，我们无法直接访问，需要利用栈里的地址找到堆里面的空间然后访问内部的成员</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> num=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">var</span> obj=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.name)<br></code></pre></td></tr></table></figure></li><li><p>当比较两个基本数据类型的时候就是比较值，而比较两个引用数据类型的时候，它比较的是对象的内存地址，如果两个对象是一模一样的，但是地址不同，它会返回false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ；">var obj3=new Object();<br>var obj4=new Object();<br>obj3.name=&quot;小明&quot;；<br>obj4.name=&quot;小明&quot;；<br>console.log(obj3==obj4);<br></code></pre></td></tr></table></figure></li><li><p>数据类型赋值的区别</p><ul><li><p>基本数据类型</p><p>就是把变量存储的值直接赋值给另一个变量，赋值后两个变量就没有 关系了，一个变量改变不会影响另一个变量</p></li><li><p>复杂数据类型</p><p>因为复杂数据类型中，变量存储的是地址，赋值的时候，实际是把一个变量的地址给了另一个变量，赋值后两个变量操作一个空间（就像复制了两把钥匙一样，可以进一个房间）</p></li><li><p>函数的形参和实参的关系</p><p>实参就是在函数调用的时候给形参赋值，实参和形参的交互和变量赋值是一个道理，也就是说给形参赋值为基本数据类型和复杂数据类型是不一样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>在函数内部修改a和b的值<br>a=<span class="hljs-number">200</span>;<span class="hljs-comment">// 因为a赋值的是基本数据类型，所以形参a和全局的num没有关系，修改的只是形参a，全局的mun没有改变</span><br>b.name=<span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-comment">//因为给参数b赋值的是复杂数据类型，实际赋值的是地址，所以形参b和全局的obj指向一个对象空间，使用b修改空间里的数据，全局obj空间里的数据也被修改了</span><br>&#125;<br><br><span class="hljs-keyword">var</span> num=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> obj=&#123;<br>name:<span class="hljs-string">&#x27;jack&#x27;</span>,<br>age:<span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params">num,obj</span>)</span>;<br><span class="hljs-comment">//调用fn函数给a和b形参赋值，a赋值的是基本数据类型，b赋值的是复杂数据类型</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="/smiling-sheep.github.io/Users/wei/Desktop/markdown/js%E5%A4%87%E8%AF%BE/img/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A84.jpeg"></p><ul><li><p>函数返回值也是变量赋值的一种</p><p>函数的返回值是把函数内的数据return出去，在函数外面有一个变量接收</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> a=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> obj=&#123;<br>name:<span class="hljs-string">&#x27;jack&#x27;</span>,<br>age:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-keyword">return</span> obj<br>&#125;<br><br><span class="hljs-keyword">var</span> res=<span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">//<span class="hljs-title">res</span>接收到的<span class="hljs-title">fn</span>函数里面定义的那个<span class="hljs-title">obj</span>的地址。。。（没有讲完）</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>函数本身也是一个对象，定义一个函数后函数就有两个功能，一是作为函数保存一段代码，另一个时作为对象时保存一段数据</p><ul><li><p>把函数当作一个函数来执行调</p><p>函数名()</p></li><li><p>函数当做对象用来存储数据（函数本身已是一个对象，可以保存一堆数据，函数的存储空间）</p><p>函数名.键名&#x3D;’值’</p></li></ul><p>​      这两个功能互不干扰，也没有关系</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">123</span>);<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fn.age); <br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(age); <span class="hljs-comment">//报错。age未定义</span><br>    <span class="hljs-comment">// 访问age变量是栈内存里的age成员，我们栈内存里没有age这个变量，只有fn这个变量，指向一个存储空间，这个存储空间里面才有age成员</span><br>&#125;  <br>fn()<br><span class="hljs-comment">//把函数当做对象来使用，使用对象的方法来存入数据</span><br>fn.age=<span class="hljs-number">19</span>;<br>fn[<span class="hljs-string">&#x27;gender&#x27;</span>]=<span class="hljs-string">&quot;男&quot;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fn);  <span class="hljs-comment">//只能打印出fn作为方法的信息</span><br><span class="hljs-built_in">console</span>.dir(fn); <span class="hljs-comment">//详细打印,也可以打印出函数作为对象使用时存储的信息</span><br></code></pre></td></tr></table></figure><p><img src="/smiling-sheep.github.io/Users/wei/Desktop/markdown/js%E5%A4%87%E8%AF%BE/img/%E6%95%B0%E6%8D%AE%E5%82%A8%E5%AD%985.jpeg"></p></li></ul></li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>使用new 构造函数函数创建的对象都有一个对应的方法，很占内存，所以使用可以在全局定义一个函数赋值给构造函数函数的方法，这样构造函数创建的对象里的方法都是指向一个在全局作用域内的地址，但是这个地址在栈内变量里存储，全局如果重名的话修改的话，就被污染了，所以不能使用这种方法</p><hr><ul><li><p>prototype：每一个函数天生自带的一个prototype属性，它是一个对象，是函数的原型对象</p><p>​prototye的作用：就是为了书写一些方法给构造函数的实例对象使用，因为构造函数的每一个实例都可以反问它</p></li><li><p>——proto——：每一个对象天生自带的一个属性叫做——proto——，指向所属的构造函数的prototype（原型对象）</p></li></ul><p>​实例化对象也是对象，也有——proto——属性</p><ul><li>当一个对象没有准确的构造函数来实例化的时候，我们都看作是内置构造函数的Object的实例</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr=[],<span class="hljs-title class_">Array</span>实例<br><span class="hljs-keyword">var</span> obj=&#123;&#125; <span class="hljs-title class_">Object</span>的实例<br><span class="hljs-keyword">var</span> p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>； <span class="hljs-title class_">Person</span>的实例<br><span class="hljs-keyword">var</span> time=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-title class_">Date</span>的实例<br><span class="hljs-keyword">var</span> fn=<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;&#125;  <span class="hljs-title class_">Function</span>的实例<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-title class_">Object</span>的实例<br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>  <span class="hljs-title class_">Object</span>的实例<br></code></pre></td></tr></table></figure><hr><ul><li><p>每一个函数天生自带的一个prototype属性，这个属性作为普通函数调用时prototype没有任何作用，当函数以构造函数函数的形式调用的时候，构造函数所创建的对象都有一个隐含的__ <em>proto</em> _ _属性指向所属构造函数的原型对象，我们可以通过——proto——来访问该属性</p></li><li><p>对象访问机制</p><p>原型对象就相当于一个公共的区域，所有同一类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中，当我们访问对象的一个属性或方法时，它会现在对象自身中寻找，如果有则直接使用，如果没有则会去——proto——中寻找，如果找到则直接使用，没有再去——proto–上找，一直找到顶级对象的——proto–都没有，就返回undefined（顶级对象象是内置构造函数Object）</p></li><li><p>原型链结论：任何一个对象开始出发，按照——proto——开始向上查找，最终都能找到Object的原型对象Object.prototype,我们管这个使用——proto——串联起来的对象链状结构叫做原型链</p><p>原型链的作用：为了对象访问机制服务</p></li><li><p>以后我们创建构造函数的时候，可以将这些对象共有的属性和方法统一添加到构造函数的原型对象中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象具有这些属性和方法了</p></li></ul><p>（利用prototype和——proto–和对象的访问机制，解决构造函数的不合理，属性直接写在构造函数体内，方法书写在构造函数的prototye上，这样才可以使用构造函数创建一个有属性，有方法的合理的对象）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">skill</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;你好&quot;</span>)&#125;<br><span class="hljs-keyword">var</span> a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;66&#x27;</span>,<span class="hljs-number">12</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>a.<span class="hljs-title function_">skill</span>();<span class="hljs-comment">//对象访问机制</span><br></code></pre></td></tr></table></figure><ul><li><p>使用in检查对象中是否含有某个属性时，如果队形中没有但是原型中有，也会返回true</p><p>可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性，使用该方法只有当对象中含有属性时才会返回true</p><p>原型对象也是对象它也有原型，当我们使用一个对象的属性或方法的时候，会先在自身中查找，自身如果有就直接使用，如果没有则去原型对象中查找，如果原型对象有就用，没有则去原型对象的原型中寻找，直到找到Object对象的原型，Object对象的原型没有原型了，如果object中依然没有找到，则返回undefined</p></li><li><p>什么是原型：原型就是每一个函数天生自带的prototype属性（它是一个原型对象），为了存放一些方法，给这个构造函数的所有实例对象使用，多个实例共享方法</p></li><li><p>什么是原型链，原型链就是使用下划线proto串联起来的对象链状结构，为了对象访问机制服务的</p></li><li><p>原型和原型链是完全的两个概念，他们两个的关系就想java和javascript的关系，虽然名字看起来很像但是他们没有必然的联系</p></li></ul><h4 id="需要理解的概念"><a href="#需要理解的概念" class="headerlink" title="需要理解的概念"></a>需要理解的概念</h4><ul><li><p>属性：对象本身所拥有的</p></li><li><p>方法：对象能够做的事情（功能）</p></li><li><p>抽象：在所有的对象中获取相同的特征的过程</p></li><li><p>封装：创建对象的过程</p></li><li><p>继承：从一个对象获取另一个对象的内容</p></li><li><p>多态：继承父级方法后，又对方法进行修改</p></li><li><p>如果想给数组扩展一个方法，写在Array.prototype上</p></li><li><p>如果想给函数扩展一个方法，写在Function.prototye上</p></li><li><p>原型上的constructor属性（构造器）（阮一峰 es5）</p><p>只有函数天生自带的那个prototype上才有，表示我是哪一个构造函数所自带的原型对象</p><p>作用：可以得知某一个实例对象，到底是哪一个构造函数产生的</p><p>判断数据类型，可以判断复杂数据类型  ，验证不了null 和 undefined</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">          <span class="hljs-comment">//构造函数</span><br>         <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;<br>         &#125;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><br>         <span class="hljs-comment">//使用Person 构造函数创建一个对象</span><br>         <span class="hljs-keyword">let</span> p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Person</span>);<span class="hljs-comment">//true</span><br>         <span class="hljs-comment">/* </span><br><span class="hljs-comment">         当我们使用访问p1.constructor 属性的时候,自己没有，去p1.__proto__上找即p1的原型上找</span><br><span class="hljs-comment">         就是去Person.prototype 上找</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         Person.prototype.constructor 是谁？  是 Person</span><br><span class="hljs-comment">         所以：p1.constructor === Person</span><br><span class="hljs-comment">         */</span><br><br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([].<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>);<span class="hljs-comment">//trues</span><br><br>         <span class="hljs-comment">/* </span><br><span class="hljs-comment">         访问的是数组的constructor 属性，数组自己没有，去到 数组.__pro__上找</span><br><span class="hljs-comment">         就是Array.prototype.constructor  就是 Array</span><br><span class="hljs-comment">         </span><br><span class="hljs-comment">         */</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>[<span class="hljs-string">&#x27;constructor&#x27;</span>].<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Number</span>);<br></code></pre></td></tr></table></figure><h4 id="验证数据类型的四种方法"><a href="#验证数据类型的四种方法" class="headerlink" title="验证数据类型的四种方法"></a>验证数据类型的四种方法</h4><h5 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h5><p>可以准确的判断基本数据类型，对复杂数据类型验证不准确</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;123&#x27;</span>);<span class="hljs-comment">//string</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">123</span>);<span class="hljs-comment">//number</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>);<span class="hljs-comment">//boolean</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>);<span class="hljs-comment">//undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>);<span class="hljs-comment">//-----------object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> &#123;&#125;);<span class="hljs-comment">//-----------object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> []);<span class="hljs-comment">//-----------object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<span class="hljs-comment">//-----onject</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;&#125;);<span class="hljs-comment">//------function</span><br></code></pre></td></tr></table></figure><h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h5><p>验证不了null 和 undefined </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-keyword">var</span> num=<span class="hljs-number">123</span>;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Number 构造函数 ƒ Number() &#123; [native code] &#125;</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span>.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//String 构造函数 ƒ String() &#123; [native code] &#125;</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span>.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Boolean 构造函数</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([].<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Array 构造函数</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Object 构造函数</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;&#125;.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Function 构造函数</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>).<span class="hljs-property">constructor</span>);<span class="hljs-comment">//Date 构造函数</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span>.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//报错   </span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">undefined</span>.<span class="hljs-property">constructor</span>);<span class="hljs-comment">//报错</span><br> <br><span class="hljs-comment">//null和undefined 不是包装数据类型</span><br></code></pre></td></tr></table></figure><h5 id="intanceof"><a href="#intanceof" class="headerlink" title="intanceof"></a>intanceof</h5><p>（阮一峰 es5）</p><p>不好判断基本数据类型</p><p>格式：实例 instanceof 构造函数    </p><p>作用：</p><p>判断对象是否是某个构造函数的实例 ，instanceof左边是实例对象，右边是构造函数，他会检测右边的额构造函数的原型对象是否在左边对象的原型链上；</p><p>由于instanceof 检查整个原型链，因此同一个实例对象，可能会对多个构造函数都返回true</p><p>返回值：true &#x2F;false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr=[];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>);<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>);<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);<span class="hljs-comment">//true</span><br><br><br><span class="hljs-keyword">var</span> date1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>);<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);<span class="hljs-comment">//true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>由于任意对象（除了null）都是Object的实例，所以instanceof 运算符可以判断一个值是否为非null的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>;<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>instanceof 运算符判断数据类型只能用于对象，不适用原始数据类型的值</p><h5 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h5><p>（阮一峰 es5）</p><p>toString方法作用是返回一份对象的字符串形式，默认是返回类型字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;.<span class="hljs-title function_">toString</span>());<span class="hljs-comment">//[object Object]</span><br></code></pre></td></tr></table></figure><p>数组，字符串，函数，Date对象都分别部署了自定义的toString方法，覆盖了Object.prototype.toString方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;1,2,3&quot;</span><br><br><span class="hljs-string">&#x27;123&#x27;</span>.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;123&quot;</span><br><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>&#125;).<span class="hljs-title function_">toString</span>()<br><span class="hljs-comment">// &quot;function () &#123;</span><br><span class="hljs-comment">//   return 123;</span><br><span class="hljs-comment">// &#125;&quot;</span><br><br>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">toString</span>()<br><span class="hljs-comment">// &quot;Tue May 10 2016 09:11:31 GMT+0800 (CST)&quot;</span><br></code></pre></td></tr></table></figure><p>上面代码中，数组、字符串、函数、Date 对象调用<code>toString</code>方法，并不会返回<code>[object Object]</code>，因为它们都自定义了<code>toString</code>方法，覆盖原始方法。</p><ul><li>toString()方法的应用：可以用来判断数据类型</li></ul><p><code>Object.prototype.toString</code>方法返回对象的类型字符串，因此可以用来判断一个值的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>obj.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;[object Object]&quot;</span><br></code></pre></td></tr></table></figure><p>上面代码调用空对象的<code>toString</code>方法，结果返回一个字符串<code>object Object</code>，其中第二个<code>Object</code>表示该值的构造函数。这是一个十分有用的判断数据类型的方法。</p><p>由于实例对象可能会自定义<code>toString</code>方法，覆盖掉<code>Object.prototype.toString</code>方法，所以为了得到类型字符串，最好直接使用<code>Object.prototype.toString</code>方法。通过函数的<code>call</code>方法，可以在任意值上调用这个方法，帮助我们判断这个值的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value)<br></code></pre></td></tr></table></figure><p>上面代码表示对<code>value</code>这个值调用<code>Object.prototype.toString</code>方法。</p><p>不同数据类型的<code>Object.prototype.toString</code>方法返回值如下。</p><ul><li>数值：返回<code>[object Number]</code>。</li><li>字符串：返回<code>[object String]</code>。</li><li>布尔值：返回<code>[object Boolean]</code>。</li><li>undefined：返回<code>[object Undefined]</code>。</li><li>null：返回<code>[object Null]</code>。</li><li>数组：返回<code>[object Array]</code>。</li><li>arguments 对象：返回<code>[object Arguments]</code>。</li><li>函数：返回<code>[object Function]</code>。</li><li>Error 对象：返回<code>[object Error]</code>。</li><li>Date 对象：返回<code>[object Date]</code>。</li><li>RegExp 对象：返回<code>[object RegExp]</code>。</li><li>其他对象：返回<code>[object Object]</code>。</li></ul><p>这就是说，<code>Object.prototype.toString</code>可以看出一个值到底是什么类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// &quot;[object Number]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// &quot;[object String]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// &quot;[object Boolean]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// &quot;[object Undefined]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">// &quot;[object Null]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">Math</span>) <span class="hljs-comment">// &quot;[object Math]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(&#123;&#125;) <span class="hljs-comment">// &quot;[object Object]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([]) <span class="hljs-comment">// &quot;[object Array]&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//利用这个特性，可以写出一个比typeof运算符更准确的类型判断函数。</span><br><br><span class="hljs-keyword">var</span> type = <span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>)&#123;<br>  <span class="hljs-keyword">var</span> s = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(o);<br>  <br>  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\[object (.*?)\]/</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">toLowerCase</span>();<br>  <span class="hljs-comment">//  s.match(/\[object (.*?)\]/)     返回值为： [0: &quot;[object Null]&quot;,1: &quot;Null&quot;,.....]</span><br>  <br>  <span class="hljs-comment">//使用正则捕获也可以</span><br><span class="hljs-comment">//var reg00=/\[object (.*)\]/;</span><br>  <span class="hljs-comment">//console.log(&#x27;*****&#x27;,reg00.exec(str1));</span><br>&#125;;<br><br><span class="hljs-title function_">type</span>(&#123;&#125;); <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-title function_">type</span>([]); <span class="hljs-comment">// &quot;array&quot;</span><br><span class="hljs-title function_">type</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// &quot;number&quot;</span><br><span class="hljs-title function_">type</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// &quot;null&quot;</span><br><span class="hljs-title function_">type</span>(); <span class="hljs-comment">// &quot;undefined&quot;</span><br><span class="hljs-title function_">type</span>(<span class="hljs-regexp">/abcd/</span>); <span class="hljs-comment">// &quot;regex&quot;</span><br><span class="hljs-title function_">type</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()); <span class="hljs-comment">// &quot;date&quot;</span><br><br></code></pre></td></tr></table></figure><p>​</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>例子：我今天想要吃面条</p><ul><li><p>面向过程：</p><ul><li>和面 — 多少面 多少水</li><li>切面–》 多宽</li><li>煮面 –》时间</li><li>拌面 –》 多少酱，多少菜</li><li>吃面—》一口吃多少</li></ul></li><li><p>面向对象</p><ul><li>找一个面馆</li><li>点一碗面</li><li>等着吃</li></ul><p>面向对象：是对面向过程的高度封装（高内聚低耦合）</p></li></ul><p>在开发过程中</p><ul><li><p>面向过程： 按照顺序一步一步的来</p></li><li><p>面向对象：（轮播图）</p><p>找一个对象，能帮助我们完成轮播图</p><p>js本身没有，我们需要第三方，swiper生成一个完成轮播图的对象</p></li><li><p>我们：当你需要完成一个功能A的时候，我们找js中有没有完成功能A的对象，如果没有，我就创建一个‘机器’，这个‘机器’可以制造完成功能A的对象</p></li><li><p>机器是什么：构造函数就是这个机器</p><p>机器的能力：能够创建一个有属性，有方法合理的对象</p></li></ul><p>模拟：选项卡</p><ul><li><p>面向过程：</p><ul><li>tabs：[按钮1，按钮2，按钮3]</li><li>contents：[盒子1，盒子2，盒子3]</li><li>事件：给tabs里面的每一个成员添加点击事件，操作tabs和contentes里面的每一个</li></ul></li><li><p>抽象成对象</p><p>o&#x3D;{</p><p>​tabs：[按钮1，按钮2，按钮3],</p><p>​contents：[盒子1，盒子2，盒子3],</p><p>​方法：function(){</p><p>​给o.tabs里面的每一个成员添加点击事件，操作o.tabs和o.contentes里面的每一个</p><p>​}</p><p>}</p><p>面向对象：</p><ul><li>书写一个构造函数。                                                                                          （找一个面馆）</li><li>能创建一个对象包含三个成员                                                                  （点一碗面）<ul><li>tabs</li><li>contents</li><li>方法，能操作自己的tabs和contents的方法</li></ul></li><li>使用这个构造函数创建一个对象，根据你传递的参数来实现选项卡效果       （等着吃面）</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.tab-wrap</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">320px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.tab-cell</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: antiquewhite;</span><br><span class="language-css">            <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.tab-box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.content-box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.content-cell</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.content-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.content-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.content-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: palegreen;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* z-index: 1; */</span></span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 选项卡1 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-wrap wrap1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-cell active&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-cell&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-cell&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-cell active&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-cell &quot;</span>&gt;</span>222222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-cell&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 选项卡2 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-wrap wrap2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-cell active&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-cell&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-cell&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-cell active&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-cell &quot;</span>&gt;</span>222222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-cell&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 选项卡3 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-wrap wrap3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-cell active&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-cell&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-cell&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-cell active&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-cell &quot;</span>&gt;</span>222222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content-cell&quot;</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">            面向对象选项卡</span></span><br><span class="hljs-comment"><span class="language-javascript">            1:抽象内容</span></span><br><span class="hljs-comment"><span class="language-javascript">              - 属性： tabs</span></span><br><span class="hljs-comment"><span class="language-javascript">              - 属性：contents</span></span><br><span class="hljs-comment"><span class="language-javascript">              - 方法： 能实现点击事件切换的方法</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">            2:书写构造函数</span></span><br><span class="hljs-comment"><span class="language-javascript">              - 只接收一个参数：范围元素 （选项卡出现的范围,选项卡中所有的内容都在这里面）</span></span><br><span class="hljs-comment"><span class="language-javascript">              </span></span><br><span class="hljs-comment"><span class="language-javascript">            </span></span><br><span class="hljs-comment"><span class="language-javascript">        </span></span><br><span class="hljs-comment"><span class="language-javascript">        </span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">Tabs</span>(<span class="hljs-params">ele, option = &#123;&#125;</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// ele为形参接收 选项卡范围的类名</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">ele</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(ele)</span><br><span class="language-javascript">            <span class="hljs-comment">// 找到tabs 和 contents</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">tabs</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">ele</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.tab-cell&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">contents</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">ele</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.content-cell&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 选项卡的其他配置项</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">option</span> = option;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 调用实例上的chang方法，给当前这个选项卡(实例对象)的按钮添加点击事件</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">change</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 方法 实现给tabs的每一个添加点击事件</span></span><br><span class="language-javascript">        <span class="hljs-title class_">Tabs</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">change</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//给tabs的每一个添加点击事件</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(&#x27;---&#x27;, this)</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 给每一个选线卡按钮添加点击事件</span></span><br><span class="language-javascript">                item.<span class="hljs-title function_">addEventListener</span>(that.<span class="hljs-property">option</span>.<span class="hljs-property">type</span> || <span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 当点击某一个按钮的时候给清除所有选项卡和内容块上的选中样式。并给当前点击的选项卡及内容块添加选中状态</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// --- 先排他</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">//此时的this为事件源</span></span><br><span class="language-javascript">                    that.<span class="hljs-property">tabs</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">t, i</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-comment">// 按钮清除选中状态</span></span><br><span class="language-javascript">                        t.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;tab-cell&#x27;</span>;</span><br><span class="language-javascript">                        <span class="hljs-comment">// 内容块清除选中状态</span></span><br><span class="language-javascript">                        that.<span class="hljs-property">contents</span>[i].<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;content-cell&#x27;</span>;</span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">                    <span class="hljs-comment">// 给当前选中的选项卡及内容块添加选中样式</span></span><br><span class="language-javascript">                    item.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;tab-cell active&#x27;</span>;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 内容块清除选中状态</span></span><br><span class="language-javascript">                    that.<span class="hljs-property">contents</span>[index].<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;content-cell active&#x27;</span>;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// var tab1 = new Tabs(&#x27;tab-wrap&#x27;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">         --------------- </span></span><br><span class="hljs-comment"><span class="language-javascript">         调用方法</span></span><br><span class="hljs-comment"><span class="language-javascript">         change是构造函数原型对象上的方法，但是调用时依靠当前实例在调用，标准的以对象的方法形式调用，this指向.(点运算符)前面的对象</span></span><br><span class="hljs-comment"><span class="language-javascript">        </span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// tab1.change()</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(tab1);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 每创建一个实例就实现了一个选项卡</span></span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tabs</span>(<span class="hljs-string">&#x27;.wrap1&#x27;</span>, &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;click&#x27;</span> &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tabs</span>(<span class="hljs-string">&#x27;.wrap2&#x27;</span>, &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;mouseover&#x27;</span> &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tabs</span>(<span class="hljs-string">&#x27;.wrap3&#x27;</span>, &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;mouseover&#x27;</span> &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Json格式"><a href="#Json格式" class="headerlink" title="Json格式"></a>Json格式</h2><p>json格式是一种固定的字符串格式</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;ahdsjkaf ahd&#x27; 普通字符串<br>&#x27;<span class="hljs-number">12123242</span>3&#x27; 纯数字字符串<br>&#x27;&lt;h1&gt;hello word&lt;/h1&gt;&#x27;     html格式的字符串<br></code></pre></td></tr></table></figure><p>json也是一种字符串的格式，和普通字符串本质上没有什么区别，只是多了一些固定的格式</p><p>json字符串的作用：在电脑网络传输的过程中，只能传递字符串，不能传递对象和数组类型的的数据，如果想要传递数组或者对象，那么需要转换成字符串的格式传递</p><p>json格式就是满足对象和数组数据结构的一种字符串</p><ul><li><p>JSON.parse(要转换的json格式的字符串)</p><p>作用：把json格式的字符串转换成js的数组或者对象</p><p>返回值：js格式的数组或对象</p><p>(我们可以手写一个JSON格式的字符串)</p></li><li><p>JSON.stringify(要转换的数组或者对象)</p><p>作用：把js格式的数组或者对象转换成json格式的字符串</p><p>返回值：一个json格式的字符串</p></li></ul><p>json数据格式</p><ul><li><p>描述数组或者对象数据类型</p></li><li><p>对象中的key和value都是用双引号包裹，数值和布尔值不需要引号</p></li><li><p>数组里面可以放多个对象</p></li><li><p>当多个数据的时候，最后一个数据后面不能有逗号，</p></li><li><p>一个json格式中，在符号位可以使用符号，只有{},[],””,逗号</p><p>“”^*(^&amp;(*))” 引号内可以有特殊符号，表示的是一个字符串</p><p>转换json格式字符串的时候，函数会被自动过滤掉</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var obj=&#123;<br>  <span class="hljs-type">name</span>:<span class="hljs-string">&#x27;小明&#x27;</span>,<br>  ha:<span class="hljs-string">&#x27;^*&amp;^*&#x27;</span>,<br>  age:<span class="hljs-number">18</span>,<br>  fn:<span class="hljs-keyword">function</span>()&#123;<br>    console.log(<span class="hljs-string">&#x27;bubumamm&#x27;</span>)<br>  &#125;<br>&#125;<br>var newObj=<span class="hljs-type">JSON</span>.stringify(obj);<br>console.log(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&gt;&gt;&#x27;</span>,newObj);   //  &#123;&quot;name&quot;:&quot;小明&quot;,&quot;ha&quot;:&quot;^*&amp;^*&quot;,&quot;age&quot;:<span class="hljs-number">18</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>json文件<ul><li>我们有一种文件格式 ，以.json为扩展名</li><li>一个完全的json文件，里面只能写json格式的内容</li></ul></li></ul><h2 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h2><p>作用：把一些数据记录在浏览器中，是浏览器提供给我们的一些本地存储数据的机制</p><ul><li><p>localStorage  永久缓存，除非手动删除</p></li><li><p>sessionStorage  会话缓存，关闭浏览器就没有了</p><p>共同点：只能存储字符串格式的数据</p></li><li><p>localStrorang</p><ul><li><p>localStrorage.setItem(‘名字’，’值’)</p><ul><li>存储一条数据</li><li>重复设置同一个名字的时候，就是修改数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;name&#x27;</span>,&#123;<span class="hljs-attr">name</span>:<span class="hljs-number">8</span>&#125;);<br>                <span class="hljs-comment">// 设置的值是一个对象，设置进入本地的实际值为 [object Object]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;name&#x27;</span>));<br>                <span class="hljs-comment">//  [object Object]   存入数据时值为对象，获取的时候是没有办法正确获取的</span><br>                <br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-number">8</span>&#125;));<br><span class="hljs-comment">//存储对象类型的数据的时候可以先将其转换为josn格式的字符串</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;name&#x27;</span>))；<br><span class="hljs-comment">//&#123;&quot;name&quot;:8&#125; 获取后获得是json格式的字符串，然后在使用JOSN.parse()转换为数组或者对象类型</span><br></code></pre></td></tr></table></figure></li><li><p>localStorage.getItem(‘名字’)</p></li><li><p>获取数据，如果获取的是没有设置过的数据，返回null</p></li><li><p>localStorage.removeItem(‘名字’)</p><p>删除一条数据</p></li><li><p>localStorage.clear()</p><p>清除所有的数据</p></li></ul></li><li><p>sessionStorage</p><ul><li><p>sessionStorage.setItem(‘名字’,value)</p></li><li><p>sessionStorage.getItem(‘名字’)</p></li><li><p>sessionStorage.removeItem(‘名字’)</p></li><li><p>sessionStorage.clear()</p></li></ul></li></ul><p>案例：当用户第一次进入页面，给出提示信息</p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数非常有用，因为他们可以将调用函数委托给其他函数，可以使用组合来构建项目，从而写出更佳简洁，高效的代码</p><h2 id="js执行机制"><a href="#js执行机制" class="headerlink" title="js执行机制"></a>js执行机制</h2><p>js是单线程的，也就是说在同一个时间中能做一件事，这是因为js这们脚本语言诞生的使命所导致的，js是处理页面中的用户的交互，以及操作DOM而诞生的，比如我们对某个DOM元素的进行添加和删除，不能同时进行，要先添加再删除</p><p>单线程就意味着，所有的任务需要排队，前一个任务结束才会执行下一个任务，如果一个任务的执行时间过长，这样就会导致线程阻塞，导致页面的渲染不连贯。</p><p>为了解决这个问题，利用多核cpu的计算能力，html5提出，web worker标准，允许js脚本创建多个线程，于是js中出现了同步和异步</p><ul><li><p>同步 </p><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的书写顺序一致</p></li><li><p>异步</p><p>处理一个任务花费很常的等待时间，在做这件事的同时可以去处理其他的事情</p><p>同步和异步的本质区别是：这条流水线各个流程的执行顺序不同</p></li><li><p>同步任务</p><p>同步任务都在主线程说给你执行，形成一个执行栈</p></li><li><p>异步任务</p><p>js的异步是通过回调函数来实现的</p><p>异步任务有以下三种类型</p><ul><li><p>普通事件的回调 如 click resize</p></li><li><p>资源加载 如 load error</p></li><li><p>定时器 setInterval setTimeout等</p><p>异步任务相关回调函数添加到任务队列中 （任务队列也称为消息队列）</p></li></ul></li></ul><p>执行顺序</p><p>1 先执行执行栈中的同步任务</p><p>2 异步任务（回调函数）放入到任务队列中</p><p>3 一但执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</p><p><img src="/smiling-sheep.github.io/http/gitee.com/zw123457/new-img/raw/master/202205101523708.png" alt="image-20210627114039767"></p><p><img src="/smiling-sheep.github.io/https/gitee.com/zw123457/new-img/raw/master/202205101523289.png" alt="image-20210627114052041"></p><p>由于主线程不断的重复获得任务，执行任务，再获取任务，再执行，所以这种机制被称为事件循环</p><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>单线程，js只在一个线程上执行，代码从上到下一行一行执行，同时只能做一件事情，其他任务必须在后面排队等待</p><p>js是有多个线程的，但是js只在一个线程上运行，称为主线程，其他线程都是在后台配合</p><p>程序里的任务分为两类：同步任务和异步任务</p><ul><li><p>同步任务：同步任务是指没有被js引擎挂起，在主线程上排队执行的任务，只有前面的任务执行完了才会执行后面的任务，前面的写一个死循环，后面的代码就全部不执行了</p></li><li><p>异步任务：不会立即执行的代码</p><p>当代码从上到下的执行，遇到异步代码的时候会把它放到队列里先不执行，等到所有的同步代码执行完毕，再从队列里面拿到代码来执行</p><p>异步任务：</p><p>webapi给我们提供了一个队列的机制，用来模拟多线程，队列里面是各种需要当前程序处理的异步任务，我们叫做单线程的异步</p><p>js是单线程，解决方式是异步，异步的解决方案是事件轮询，事件轮讯的核心是–回调函数</p></li><li><p>js的定时器,js中的window对象提供两个异步定时器机制</p><ul><li><p>window.setTimeout(函数，时间)    延时定时器&#x2F; 炸弹定时器</p><p>作用：设置一个定时器，在指定时间后调用回调函数，只调用一次，就结束了这个定时器</p><p>调用函数可以直接写函数，或者函数名</p><p>延迟时间默认为0，如果写单位必须是毫秒（不写单位ms，但是写入的数值表示的是毫秒）</p><p>因为定时器有很多，我们经常给定时器赋值一个标识符，这样便于我们清除定时器</p></li><li><p>window.setInterval(函数，时间)    间隔定时器</p><p>每隔固定时间，调用一遍回调函数，只要不清除定时器一直重复调用</p></li><li><p>这两个定时器都可以接收多个参数，后面的参数作为回调函数的实参传入</p></li></ul></li><li><p>定时器里的回调函数是异步回调函数：</p><p>普通函数是按照代码顺序直接调用的，而这个函数要等待时间，时间到了才调用该函数</p><p>因此称为回调函数（干完上件事情后回头再调用这个函数）</p><p>我们之前的onlick&#x3D;function(){}.等里的函数也是回调函数</p></li><li><p>异步机制案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">consoel.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start&#x27;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timeout&#x27;</span>);<br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br><span class="hljs-comment">//start end timeout</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start&#x27;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timeout&#x27;</span>);<br>&#125;,<span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;&#125; <span class="hljs-comment">//同步代码，它没有结束</span><br><span class="hljs-comment">//start end</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行函数a&#x27;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行函数a的延迟函数&quot;</span>);<br>    &#125;,<span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;执行函数b&quot;</span>);<br>&#125;<br><span class="hljs-title function_">a</span>();<br><span class="hljs-title function_">b</span>();<br><span class="hljs-comment">//&#x27;执行函数a&#x27; &#x27;执行函数b&#x27; &quot;执行函数a的延迟函数&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>定时器的返回值是一个number数据类型，不分定时器的种类只表示当前定时器是页面中的第几个定时器，</p><p>定时器返回值的作用是用来关闭定时器使用的，我们一般会将定时器的返回值赋值给一个变量记录</p></li><li><p>清除定时器有两种方式</p><ul><li>window.clearInterval(要关闭的定时器的返回值);  </li><li>window.clearTimeout(要关闭的定时器的返回值);</li></ul><p>清除定时器不分种类，随便关，只要你的定时器返回值是对的就可以了</p><p>案例 ：按钮倒计时 禁用 防止用户多次点击。。。倒计时60秒</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//案例定时广告弹窗</span><br>     sBox.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-comment">//点击后让元素消失</span><br>        sBox.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;none&#x27;</span><br>      <span class="hljs-comment">//消失3秒后再弹出</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            sBox.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span><br>        &#125;, <span class="hljs-number">3000</span>);<br>      &#125;<br>      <span class="hljs-comment">//打开页面的时候不会出来，box隐藏，过一会显示使用setTimeout</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            sBox.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span><br>        &#125;, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><h2 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h2><p>内部对象：（在任何Es实现中都可以使用）</p><p>​1:本地对象：ECMAScript提供的需要实例化（new）才能使用的对象 Object Array String Function Data 等</p><p>​2:内置对象：ECMAScript提供的不需要实例化就能使用的对象，只有Global（全局对象）和Math</p><p>自定义对象：由开发人员自己创建的对象</p><p>宿主对象：目前主要是指浏览器提供的对象比如BOM DOM是js独有的</p><h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><p>内置对象就是js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或者最基本而必要的功能（属性和方法）</p><h5 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h5><ul><li>Math对象是js的原生对象，提供各种数学功能，不是一个构造函数调用时不需要使用new生成对象实例，所有的属性和方法都必须在Math上调用<ul><li>Math的静态属性提供一些数学常数，这些属性是只读的不能修改<br><code>Math.PI  //Math对象的属性，圆周率 3.1415926....</code></li><li>Math提供了一些静态方法</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">最大最小值 （参数为数组不好使）<br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(num1,num2) <span class="hljs-comment">//返回若干个参数之际的较大的数 </span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(num1,num2)  <span class="hljs-comment">//返回较小的数</span><br><br><br><span class="hljs-title class_">Matn</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;哈哈&quot;</span>)  <span class="hljs-comment">//NaN</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>() <span class="hljs-comment">//-Infinity</span><br>在js中不提供找出数组中最大元素的函数，结合apply方法和<span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>方法可以，就可以返回数组中最大元素<br>  <span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">33</span>,<span class="hljs-number">24</span>,<span class="hljs-number">56</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6767</span>,<span class="hljs-number">3323</span>,<span class="hljs-number">36</span>,-<span class="hljs-number">1</span>]<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>,arr))<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">min</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>,arr))<br><br>绝对值（数字到坐标原点的距离）<br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(-<span class="hljs-number">1</span>) <span class="hljs-comment">//-1</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-string">&quot;77&quot;</span>) <span class="hljs-comment">//77</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(<span class="hljs-string">&#x27;nihao&#x27;</span>) <span class="hljs-comment">//NaN</span><br><br>向下取整 floor 地板 是往最小了取整数值<br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">3.4</span>) <span class="hljs-comment">//3</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-number">3.9</span>) <span class="hljs-comment">//3</span><br><br>向上取整 ceil 天花板 是往最大了取整数值<br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">4.6</span>）<span class="hljs-comment">//5</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">4.1</span>）<span class="hljs-comment">//5</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(-<span class="hljs-number">10.5</span>）<span class="hljs-comment">//-10</span><br><br>四舍五入   不管符号，只看数值，进行四舍五入   特殊记忆： 负数 -?<span class="hljs-number">.5</span>直接舍<br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">1.5</span>) <span class="hljs-comment">//2</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(-<span class="hljs-number">1.5</span>)<span class="hljs-comment">//-1    ？？**.5**特殊直接舍？？？</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">10.499</span>)<span class="hljs-comment">//10 取整只看小数点后一位来四舍五入</span><br><br>返回<span class="hljs-number">0</span>至<span class="hljs-number">1</span>之间的随机数x（<span class="hljs-number">0</span>=&lt;x&lt;<span class="hljs-number">1</span>),这个方法不需要参数，，每次调用自动返回一个随机数<br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()  <br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random#%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E4%B8%A4%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0%EF%BC%8C%E5%8C%85%E6%8B%AC%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%9C%A8%E5%86%85">得到一个两数之间的随机整数，包括两个数在内</a></p><p>随机点名的案例 （bz）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()  返回 <span class="hljs-number">0</span>～<span class="hljs-number">1</span>之间的随机数 含小数 <br>    <span class="hljs-number">0</span>～<span class="hljs-number">10</span>之间的随机整数： <br>            使用<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()获取<span class="hljs-number">0</span>～<span class="hljs-number">0.9999</span>之间的随机数 *<span class="hljs-number">10</span> 后 <span class="hljs-number">0</span>～<span class="hljs-number">9.9999</span><br><br>            取整：<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>() 向下取整 <span class="hljs-number">0</span>～<span class="hljs-number">9</span><br>                 <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceill</span>() 向上取整 <span class="hljs-number">1</span>～<span class="hljs-number">10</span> 出现<span class="hljs-number">0</span>的概率很小<br>                 <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>() 四舍五入取整  <span class="hljs-number">0</span>～<span class="hljs-number">10</span>   <br>                    <span class="hljs-number">0</span>～<span class="hljs-number">0.49999</span> <span class="hljs-number">0</span><br>                    <span class="hljs-number">0.5</span>～<span class="hljs-number">1.4999</span> <span class="hljs-number">1</span><br><span class="hljs-number">1.5</span>～<span class="hljs-number">2.4999</span> <span class="hljs-number">2</span><br>....<br>                    <span class="hljs-number">8.5</span>~<span class="hljs-number">9.4999</span> <span class="hljs-number">9</span><br>                    <span class="hljs-number">9.5</span>~<span class="hljs-number">9.9999</span> <span class="hljs-number">10</span><br>四舍五入取整，得到 <span class="hljs-number">0</span> 和 <span class="hljs-number">10</span> 的概率是<span class="hljs-number">1</span>到<span class="hljs-number">9</span>的一半   不考虑概率舍可以直接用的<br><br>    <span class="hljs-number">0</span>～<span class="hljs-number">20</span>之间的随机整数：<br>            使用<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()获取<span class="hljs-number">0</span>～<span class="hljs-number">1</span>之间的随机数 *<span class="hljs-number">20</span> 取整<br>            <br>            <br>    <span class="hljs-number">0</span>～（m-n）之间的随机整数 <br>使用<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()获取<span class="hljs-number">0</span>～<span class="hljs-number">1</span>之间的随机数 *（m-n+<span class="hljs-number">1</span>） 取整<br><br>    <span class="hljs-number">20</span>~<span class="hljs-number">30</span><br>            使用<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()获取<span class="hljs-number">0</span>～<span class="hljs-number">1</span>之间的随机数 *<span class="hljs-number">10</span>+<span class="hljs-number">20</span><br>            <br>    <span class="hljs-number">30</span>～<span class="hljs-number">50</span><br>            使用<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()获取<span class="hljs-number">0</span>～<span class="hljs-number">1</span>之间的随机数* （<span class="hljs-number">50</span>-<span class="hljs-number">30</span>）+<span class="hljs-number">30</span><br>            。。。。<br>     n～m<br>     使用<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()获取<span class="hljs-number">0</span>～<span class="hljs-number">1</span>之间的随机数* （m-n）+n<br><br><br>     <br><span class="hljs-comment">//-------比较选取哪种取整方式</span><br><span class="hljs-keyword">var</span> obj=&#123;&#125;;<br><span class="hljs-comment">//   console.log(Math.random()); </span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1000</span>;i++)&#123; <br>    <span class="hljs-keyword">var</span> res=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(<span class="hljs-number">10</span>+<span class="hljs-number">1</span>)); <span class="hljs-comment">//概率差不多</span><br>    <span class="hljs-comment">// var res=Math.ceil(Math.random()*10); </span><br>    <span class="hljs-comment">// var res=Math.round(Math.random()*10); //使用向下取整获取的数字两端少，中间多  两边概率小</span><br>    <span class="hljs-keyword">if</span>(obj[res])&#123;<br>        obj[res]++<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        obj[res]=<span class="hljs-number">1</span>;<br>    &#125;<br><br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br>  <br>  <span class="hljs-comment">//封装范围内随机整数</span><br>  <br>  <span class="hljs-comment">/* </span><br><span class="hljs-comment"> @param &#123;NUMBER&#125;   n 数字1</span><br><span class="hljs-comment"> @param &#123;NUMBER&#125;   m 数字1</span><br><span class="hljs-comment"> @return &#123;NUMBER&#125;  随机数字</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">rangeRandom</span>(<span class="hljs-params">n,m</span>)&#123;<br>    <span class="hljs-keyword">var</span> max=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(n,m);<br>    <span class="hljs-keyword">var</span> min=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(n,m);<br>    <span class="hljs-keyword">return</span>   <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(max-min+<span class="hljs-number">1</span>)+min);<br>&#125;<br><span class="hljs-keyword">var</span> res=<span class="hljs-title function_">rangeRandom</span>(<span class="hljs-number">20</span>,<span class="hljs-number">80</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-----------------封装一个返回随机颜色的函数       </span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">         - 颜色的表示方式</span><br><span class="hljs-comment">           - 预定义 rgb  十六进制</span><br><span class="hljs-comment">         - 封装随机颜色的函数</span><br><span class="hljs-comment">         返回一个字符串，是一个颜色的表示方式</span><br><span class="hljs-comment">         返回：&#x27;rgb(200,200,200)&#x27;</span><br><span class="hljs-comment">         返回：&#x27;#bbbbbb&#x27;</span><br><span class="hljs-comment">         返回值是rgb还是十六进制，我们可以由一个参数决定</span><br><span class="hljs-comment">         </span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        */</span><br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       @param &#123;BOOLEAN&#125; isR 是否16进制返回</span><br><span class="hljs-comment">       @return &#123;STRING&#125; 随机颜色的字符串</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       */</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">randomColor</span>(<span class="hljs-params">isR</span>)&#123;<br>            <span class="hljs-keyword">if</span>(isR)&#123;<br>                <span class="hljs-comment">//参数为true 则返回rgb表示的颜色</span><br>                <span class="hljs-keyword">const</span> r=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(<span class="hljs-number">255</span>+<span class="hljs-number">1</span>));<br>                <span class="hljs-keyword">const</span> g=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(<span class="hljs-number">255</span>+<span class="hljs-number">1</span>));<br>                <span class="hljs-keyword">const</span> b=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(<span class="hljs-number">255</span>+<span class="hljs-number">1</span>));<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;r&#125;</span>,<span class="hljs-subst">$&#123;g&#125;</span>,<span class="hljs-subst">$&#123;b&#125;</span>)`</span><br><br>            &#125;<br>            <br>            <span class="hljs-comment">/* </span><br><span class="hljs-comment">            参数为false 返回十六进制表示的颜色</span><br><span class="hljs-comment">            将来我要返回一个 #ABCDEF</span><br><span class="hljs-comment">            十六进制前面的 # 不变，后面的每 两个数字是0～255的随机数字转成16进制</span><br><span class="hljs-comment">            </span><br><span class="hljs-comment">            */</span><br>           <span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;#&#x27;</span>;<br>           <span class="hljs-comment">//循环一段代码执行三次</span><br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>                <span class="hljs-comment">//Math.floor(Math.random()*(255+1)) 返回0到255的随机数，后使用toString转为16进制</span><br>               <span class="hljs-keyword">var</span> n=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(<span class="hljs-number">255</span>+<span class="hljs-number">1</span>)).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);<br>              <br>               <span class="hljs-comment">/* </span><br><span class="hljs-comment">               注意：</span><br><span class="hljs-comment">               10进制的数值：</span><br><span class="hljs-comment">                  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...</span><br><span class="hljs-comment">               16进制的数值：</span><br><span class="hljs-comment">                  0 1 2 3 4 5 6 7 8 9  a  b  c  d  e  f 10</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                  10进制的0 到 16转为十六进制后字符串的长度是1，十进制的16之后数值转为16进制的字符串长度是2</span><br><span class="hljs-comment">                  这样会使我们拼接的6位字符串，长度可能不够，要处理一下</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">               */</span><br>              <span class="hljs-keyword">if</span>(n.<span class="hljs-property">length</span>===<span class="hljs-number">1</span>)&#123;<br>                  n=<span class="hljs-string">&#x27;0&#x27;</span>+n;<span class="hljs-comment">//注意这里不能是用+= 赋值符号</span><br>              &#125;<br>              <span class="hljs-comment">//每次循环得到一个16进制的字符串后拼接再str字符串的后面</span><br>              str+=n;<br>           &#125;<br>           <span class="hljs-comment">//循环结束，str就是拼接好的十六进制颜色字符串</span><br>           <span class="hljs-keyword">return</span> str;    <br>        &#125;<br>       <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;-------&#x27;</span>,<span class="hljs-title function_">randomColor</span>(<span class="hljs-literal">false</span>))<br><br><span class="hljs-comment">//其实我们给元素设置颜色时不论设置的是16进制或者rgb，预定义颜色，写到元素身上，最终从元素身上拿出来的时候都是rgb，所以其实怎么设置无所谓.......</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">数值.<span class="hljs-title function_">toFixed</span>(指定小数位数的数字)；<br><span class="hljs-comment">//将数值四舍五为指定小数位数的数字</span><br></code></pre></td></tr></table></figure><h2 id="数字转换进制"><a href="#数字转换进制" class="headerlink" title="数字转换进制"></a>数字转换进制</h2><ul><li><p>进制是一种数字的表示方法，进制有2～36进制</p><p>js里进制转换分为两种</p><ul><li><p>十进制转换为其他进制</p><p>使用方法：数字.toString(你要转换的进制)</p><p>返回值：以字符串的形式返回给你转换好的进制数字，如果不以字符串的形式返回，那么在js里自动转换成十进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num=<span class="hljs-number">100</span>;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">//1100100</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>)); <span class="hljs-comment">//64</span><br></code></pre></td></tr></table></figure></li><li><p>其他进制转换为十进制</p><p>方法：parseInt(要转换的数字，你把这个数字当做进制)</p><p>返回值：转换好以后的十进制数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-number">101</span>,<span class="hljs-number">8</span>));<span class="hljs-comment">// 65 将一个8进制的数字101转换为十进制后是65</span><br></code></pre></td></tr></table></figure><p>注意计算的时候要是同一进制的数值再计算</p></li></ul></li></ul><h5 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h5><p>js有一个内置的构造函数Date，是js的时间库，用来处理时间和日期。</p><p>Date是一个构造函数，需要先用new调用生成对象 </p><p>格式：var  time&#x3D;new Date()      返回值：当前终端的当前时间，当把你电脑的时间调整后，得到的是调整以后的时间</p><p>Date对象以国际标准时间1970年的1月1日00:00:00作为时间的零点，可以表示的时间是前后各一亿天（单位为毫秒）</p><p>可以创建一个指定日期的时间对象</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">today</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><ul><li><p>如果不加参数，返回的实例代表的是当前时间的字符串</p></li><li><p>可以接受多种格式的参数，返回一个该参数对应的时间</p><ul><li><p>参数为时间零点开始计算的毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1378218728000</span>)<br><span class="hljs-comment">// Tue Sep 03 2013 22:32:08 GMT+0800 (CST)</span><br></code></pre></td></tr></table></figure></li><li><p>参数为日期字符串</p><p>日期字符串的格式： yyyy-mm-dd  HH:MM:SS       yyyy&#x2F;mm&#x2F;dd  HH:MM:SS </p><p>年月日和时分秒之间有一个空格</p><p>当使用字符串这个形式的时候，1表示1月，12表示12月</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2021-6-4&quot;</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2021/6/4&quot;</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;06/04/2021&quot;</span>)<br><br><span class="hljs-comment">//Fri Jun 04 2021 00:00:00 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure></li><li><p>参数为多个整数，代表年、月、日、时、分、秒、毫秒</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2021</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>) <br><span class="hljs-comment">//Sun Jul 04 2021 08:07:09 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure><p>参数为年月日多个整数时，年和月不能省略，其他参数可以省略，也就是说至少要有两个参数，因为如果只有一个参数的话，Date会将其解释为毫秒</p><p>参数的取值：</p><ul><li>年：使用四位数的年份 2000</li><li>月：从0开始计算 即 0至11，0是1月，11是12月</li><li>日：从1开始计算，即1至31</li><li>时：0到23</li><li>分：0到59</li><li>秒：0到59</li><li>毫秒：0到999</li></ul><p><strong>注意</strong>：1秒等于1000毫秒</p><p>​除了日的默认值是1，时分秒毫秒的默认值都是0</p><p>​除了年以外的每一个数字都会自动进位</p><p>这些参数如果超出了正常范围，会被自动折算，比如月份设置为15，就会被折算为下一年的4月</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2013</span>, <span class="hljs-number">15</span>)<br><span class="hljs-comment">// Tue Apr 01 2014 00:00:00 GMT+0800 (CST)</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2013</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment">// Mon Dec 31 2012 00:00:00 GMT+0800 (CST)</span><br>上面代码的第二个例子，日期设为<span class="hljs-number">0</span>，就代表上个月的最后一天。<br></code></pre></td></tr></table></figure></li></ul></li><li><p>日期的运算</p><p>两个日期实例对象进行减法运算时，返回的是他们之间间隔的毫秒数 即两个时间对象时间戳的差值</p><p>两个日期实例对象进行加法运算时，返回的是两个字符串拼接后的新的字符串</p><p>因为：类型自动转换，Date实例如果转为数值，则等于对应的毫秒数，如果转为字符串，则等于对应的日期字符串</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> d1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> d2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br><br>d2 - d1<br><span class="hljs-comment">// 2678400000</span><br>d2 + d1<br><span class="hljs-comment">// &quot;Sat Apr 01 2000 00:00:00 GMT+0800 (CST)Wed Mar 01 2000 00:00:00 GMT+0800 (CST)&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>日期格式化（获取时间对象信息的方法）</p><p>Date对象提供了一系列get*放法，用来获取实例对象内部信息</p><p>格式：</p><ul><li>时间对象.getFullYear() :返回时间对象的（4位）年份  Number数据类型</li><li>时间对象.getMonth():返回月份（0表示1月，11表示12月）,返回的月份比实际的月份小1，要返回值加1 Number数据类型</li><li>时间对象.getDate():返回当天的日期（从1开始） Number数据类型</li><li>时间对象.getHours():返回小时（0至23） Number数据类型</li><li>时间对象.getMinutes(); 返回分钟（0至59） Number数据类型</li><li>时间对象.getSeconds();返回秒（0至59） Number数据类型</li><li>时间对象.getMilliseconds(): 返回当前时间的毫秒（0至999） Number数据类型</li></ul><hr><p>修改时间对象的某一指定信息      返回值是修改信息后时间戳</p><ul><li><p>时间对象.setFullYear(你要设置的年)   作用：设置时间对象的年份信息</p></li><li><p>时间对象.setMonth(你要设置的月)) </p><p>月份（0表示1月，11表示12月）</p></li><li><p>时间对象.setDate(你要设置的日))</p></li><li><p>时间对象.setHours(你要设置的小时))</p></li><li><p>时间对象.setMinutes(你要设置的分)); </p></li><li><p>时间对象.setSeconds(你要设置的秒));</p></li><li><p>时间对象.setMilliseconds(你要设置的毫秒))</p></li></ul><ul><li><p>时间对象.setTime(时间戳))  作用：根据时间戳，定位到指定的时间</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var d1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(2000, 2, 1)</span>;  返回值是对象的时间戳<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Date(<span class="hljs-params">d1</span>.<span class="hljs-params">setFullYear</span>(1989)</span>);<br></code></pre></td></tr></table></figure></li><li><p>–还有一套按照UTC时间的设置方法</p></li></ul><hr></li></ul><ul><li><p>获取世界标准时间的时间信息</p><p>时间对象.getUTCFullYear()</p><p>时间对象.getUTCMonth()</p><p>时间对象.getUTCDate()</p><p>时间对象.getUTCHourse()</p><p>时间对象.getUTCMinutes()</p><p>时间对象.getUTCSeconds()</p><p>时间对象.getUTCMilliSeconds()亲</p><hr></li></ul><p>时间对象.getDay(): 返回星期几  星期日为0，星期一为1…   Number数据类型</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">Day</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()；<br><span class="hljs-built_in">Day</span>.getDay();<br></code></pre></td></tr></table></figure><hr><p>格林威治时间 1970年1月1日00:00:00     时间长河的起点，时间零点</p><p>时间戳：当前时间距离时间零点1970年1月1日00:00:00的过了多少毫秒数</p><p>获取指定时间的时间戳，可以带参数也可以不带参数，不带参数则是当前时间的时间戳，带参数则是指定时间的时间戳</p><ul><li><p>时间对象.getTime([指定时间])    </p></li><li><p>时间对象.valueOf([指定时间]))方法</p></li><li><p>+new Date([指定时间])) </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">var <span class="hljs-keyword">ms</span> <span class="hljs-title">= +new</span> <span class="hljs-keyword">Date</span>();<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> d1 = new Date(<span class="hljs-number">2020</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-attribute">console</span>.log(d1.getTime());  //<span class="hljs-number">1604253722000</span><br><span class="hljs-attribute">console</span>.log(d1.valueOf());   //<span class="hljs-number">1604253722000</span><br><span class="hljs-attribute">console</span>.log(+new Date(<span class="hljs-number">2020</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));  //<span class="hljs-number">1604253722000</span><br></code></pre></td></tr></table></figure></li><li><p>H5新增的方法</p><p>Date.now()  返回当前时间距离时间零点（1970年1月1日 00:00:00 UTC）的毫秒数，相当于 Unix 时间戳乘以1000       返回的是当前时间的时间戳，带参数指定时间的话，参数会被省略</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>()  <span class="hljs-comment">//静态方法，不用实例化</span><br></code></pre></td></tr></table></figure></li></ul><p>案例：</p><p>封装一个函数，返回当前的时分秒，格式为09:09:10</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">function getTime()&#123;<br>var <span class="hljs-attribute">time</span>=new Date();<br>var <span class="hljs-attribute">h</span>=time.getHours();<br><span class="hljs-attribute">h</span>=h&lt;10?&#x27;0&#x27;+h:h;<br>  var <span class="hljs-attribute">m</span>=time.getMinutes();<br><span class="hljs-attribute">m</span>=m&lt;10?&#x27;0&#x27;+m:m;<br>  var <span class="hljs-attribute">s</span>=time.getSeconds();<br><span class="hljs-attribute">s</span>=s&lt;10?&#x27;0&#x27;+s:s;<br>return h+<span class="hljs-string">&#x27;:&#x27;</span>+m+<span class="hljs-string">&#x27;:&#x27;</span>+s;<br>&#125;<br></code></pre></td></tr></table></figure><p>倒计时案例</p><p>案例分析：</p><p>1：输入的未来时间剪去现在时间就是剩余的时间，但是不能使用时分秒来相减结果会是负数（06分减31分），要用时间戳来减，用输入的未来时间的时间戳减去当前时间的时间戳，就是剩余的时间的毫秒数</p><p>2:将剩余时间的总的<strong>毫秒数</strong>转化为天，时，分，秒</p><p>转换公式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">d</span>=parseInt(总秒数/<span class="hljs-number">60</span>/<span class="hljs-number">60</span>/<span class="hljs-number">24</span>) //计算天数<br><span class="hljs-attribute">h</span>=parseInt(总秒数%<span class="hljs-number">24</span>/<span class="hljs-number">60</span>/<span class="hljs-number">60</span>) //计算小时   ？？？<br><span class="hljs-attribute">m</span>=parseInt(总秒数%<span class="hljs-number">60</span>/<span class="hljs-number">60</span>) //计算分钟  ？？？<br><span class="hljs-attribute">s</span>=parseInt(总秒数%<span class="hljs-number">60</span>) //计算当前秒数<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    &lt;div id=<span class="hljs-string">&quot;dBox&quot;</span>&gt;&lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hBox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mBox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sBox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="hljs-comment">//---------------------------封装的返回时间差的插件</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">  @param &#123;TIME&#125; t1 时间节点1</span><br><span class="hljs-comment">  @param &#123;TIME&#125; t2 时间节点2</span><br><span class="hljs-comment">  @return &#123;Object&#125; 以对象形式返回时间差</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">time</span>(<span class="hljs-params">t1,t2</span>)&#123;<br>    <span class="hljs-comment">//两个时间对象之间相减可以获得他们之间时间戳的差值，但是有兼容性问题，所以需要转换为时间戳后，用时间戳相减</span><br>    t1=t1.<span class="hljs-title function_">getTime</span>();<span class="hljs-comment">// 获取传进来时间的时间戳</span><br>    t2=t2.<span class="hljs-title function_">getTime</span>();<br><br>    <span class="hljs-keyword">var</span> ct=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(t1-t2)/<span class="hljs-number">1000</span>);   <span class="hljs-comment">//两个时间戳相差的秒数</span><br>    <span class="hljs-comment">//相减之后取绝对值，这样就不用考虑谁大谁小了，结果是ms/1000得到秒数，取整</span><br>  <br>    <span class="hljs-keyword">var</span> d,h,m,s;<br>    d=<span class="hljs-built_in">parseInt</span>(ct/(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>));<br>    h=<span class="hljs-built_in">parseInt</span>(ct%(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>)/(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>));<br>    m=<span class="hljs-built_in">parseInt</span>(ct%(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>)/<span class="hljs-number">60</span>);<br>    s=ct%<span class="hljs-number">60</span><br>    <span class="hljs-comment">// console.log(`$&#123;d&#125;天$&#123;h&#125; 时$&#123;m&#125; 分$&#123;s&#125; 秒`);// 距离目标时间的时间 字符串心形式</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">d</span>:d,<br>        <span class="hljs-attr">h</span>:h,<br>        <span class="hljs-attr">m</span>:m,<br>        <span class="hljs-attr">s</span>:s<br>    &#125;<br>&#125;<br><br>------------------------------<br>----------使用插件，实现秒杀倒计时 并渲染到页面中<br><span class="hljs-keyword">var</span> target=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2021</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">// 2021 10 1 目标时间</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">djs</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">var</span> current=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <span class="hljs-comment">//每隔一秒钟就获取一些当前时间</span><br>   <span class="hljs-keyword">var</span> res= <span class="hljs-title function_">time</span>(target,current);<span class="hljs-comment">//每秒钟调用一下函数      </span><br>   <span class="hljs-comment">//处理时间格式</span><br>   <span class="hljs-keyword">if</span>(res.<span class="hljs-property">d</span>&lt;<span class="hljs-number">10</span>) res.<span class="hljs-property">d</span>=<span class="hljs-string">&#x27;0&#x27;</span>+res.<span class="hljs-property">d</span>;<br>   <span class="hljs-keyword">if</span>(res.<span class="hljs-property">h</span>&lt;<span class="hljs-number">10</span>) res.<span class="hljs-property">h</span>=<span class="hljs-string">&#x27;0&#x27;</span>+res.<span class="hljs-property">h</span>;<br>   <span class="hljs-keyword">if</span>(res.<span class="hljs-property">m</span>&lt;<span class="hljs-number">10</span>) res.<span class="hljs-property">m</span>=<span class="hljs-string">&#x27;0&#x27;</span>+res.<span class="hljs-property">m</span>;<br>   <span class="hljs-keyword">if</span>(res.<span class="hljs-property">s</span>&lt;<span class="hljs-number">10</span>) res.<span class="hljs-property">s</span>=<span class="hljs-string">&#x27;0&#x27;</span>+res.<span class="hljs-property">s</span>;<br>    <span class="hljs-comment">//    向页面元素渲染数据</span><br>    dBox.<span class="hljs-property">innerText</span>=res.<span class="hljs-property">d</span><br>    hBox.<span class="hljs-property">innerText</span>=res.<span class="hljs-property">h</span><br>    mBox.<span class="hljs-property">innerText</span>=res.<span class="hljs-property">h</span><br>    sBox.<span class="hljs-property">innerText</span>=res.<span class="hljs-property">s</span><br>&#125;<br><span class="hljs-title function_">djs</span>();<span class="hljs-comment">//页面一进来就立即执行 填补有那一秒钟的空白</span><br><span class="hljs-built_in">setInterval</span>(djs,<span class="hljs-number">1000</span>); <span class="hljs-comment">//此处要写函数名，表示时间到了要执行的函数，如果写 djs()表示的是立即执行函数，得到是函数的返回值</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-string">&#x27;零&#x27;</span>,<span class="hljs-string">&#x27;一&#x27;</span>,<span class="hljs-string">&#x27;二&#x27;</span>,<span class="hljs-string">&#x27;三&#x27;</span>,<span class="hljs-string">&#x27;四&#x27;</span>,<span class="hljs-string">&#x27;五&#x27;</span>,<span class="hljs-string">&#x27;六&#x27;</span>,<span class="hljs-string">&#x27;七&#x27;</span>,<span class="hljs-string">&#x27;八&#x27;</span>,<span class="hljs-string">&#x27;九&#x27;</span>,<span class="hljs-string">&#x27;十&#x27;</span>];<br><span class="hljs-keyword">var</span> time=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">year</span>=time.getFullYear()<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">month</span>=time.getMonth()<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">day</span>=time.getDate()<br><span class="hljs-keyword">var</span> hover=time.getHours()<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">minute</span>=time.getMinutes()<br><span class="hljs-keyword">var</span> secend=time.getSeconds()<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">week</span>=time.getDay()<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">year</span>,<span class="hljs-built_in">month</span>,<span class="hljs-built_in">day</span>,hover,<span class="hljs-built_in">minute</span>,secend); <span class="hljs-comment">//----------2021 6 19 0 50 10</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getYear</span>(<span class="hljs-params">year</span>)&#123;<br>    <span class="hljs-comment">//把年份拆分成一个四位数</span><br>    <span class="hljs-keyword">var</span> a=parseInt(<span class="hljs-built_in">year</span>/<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">var</span> b=parseInt(<span class="hljs-built_in">year</span>%<span class="hljs-number">1000</span>/<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">var</span> c=parseInt(<span class="hljs-built_in">year</span>%<span class="hljs-number">100</span>/<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">var</span> d=parseInt(<span class="hljs-built_in">year</span>%<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">return</span> arr[a]+arr[b]+arr[c]+arr[d]+<span class="hljs-string">&quot;年&quot;</span><br>    <span class="hljs-comment">//转换成中为，将这四个数字作为索引取数组里相对应位置上的数字</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOther</span>(<span class="hljs-params">num</span>)&#123; <br><br>    <span class="hljs-comment">//先拆数字</span><br>    <span class="hljs-keyword">var</span> a=parseInt(num/<span class="hljs-number">10</span>); <span class="hljs-comment">//十位上的数字</span><br>    <span class="hljs-keyword">var</span> b=num%<span class="hljs-number">10</span>    <span class="hljs-comment">//个位上的数字</span><br><br>    <span class="hljs-comment">// 阅读方式</span><br>    <span class="hljs-comment">// 个位： 一 二 三。。。十        num&lt;=10</span><br>    <span class="hljs-comment">// 十几：十一  十二 。。。十九    num&lt;20</span><br>    <span class="hljs-comment">//几十：二十 三十 四十           num%10===0</span><br>    <span class="hljs-comment">//几十几: 二十九。。。 </span><br><br>    <span class="hljs-keyword">if</span> (num&lt;=<span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">return</span>  arr[num];  <span class="hljs-comment">//直接使用传进来的参数作为数组的索引获取数组中的中文</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num&lt;<span class="hljs-number">20</span>)&#123;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;十&quot;</span>+arr[b];<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num%<span class="hljs-number">10</span>===<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> arr[a]+<span class="hljs-string">&#x27;十&#x27;</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> arr[a]+<span class="hljs-string">&#x27;十&#x27;</span>+arr[b]<br>    &#125;<br>&#125;<br><span class="hljs-comment">//组装</span><br><span class="hljs-keyword">var</span> str=getYear(<span class="hljs-built_in">year</span>)+<span class="hljs-string">&#x27; &#x27;</span>+getOther(<span class="hljs-built_in">month</span>)+<span class="hljs-string">&#x27;月&#x27;</span>+<span class="hljs-string">&#x27; &#x27;</span>+getOther(<span class="hljs-built_in">day</span>)+<span class="hljs-string">&#x27;日&#x27;</span>+ <span class="hljs-string">&#x27; 周&#x27;</span>+getOther(<span class="hljs-built_in">week</span>)+<span class="hljs-string">&#x27; &#x27;</span>+getOther(hover)+<span class="hljs-string">&#x27;点&#x27;</span>+<span class="hljs-string">&#x27; &#x27;</span>+getOther(<span class="hljs-built_in">minute</span>)+<span class="hljs-string">&#x27;分&#x27;</span>+<span class="hljs-string">&#x27; &#x27;</span>+getOther(secend)+<span class="hljs-string">&#x27;秒&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str); <span class="hljs-comment">//----------二零二一年 六月 十九日 周一 零点 五十分 十秒</span><br></code></pre></td></tr></table></figure><p>作业：实现中文的倒计时</p><h2 id="数组后补知识点"><a href="#数组后补知识点" class="headerlink" title="数组后补知识点"></a>数组后补知识点</h2><ul><li>使用new Array这种方式创建数组的时候，有一个很大的缺陷，不同的参数个数会导致的行为不同<br>无参数时，返回一个空数组</li></ul><p><code> var arr=new Array(); 创建一个空数组并赋值给变量arr</code><br>参数为单个正整数表示的时创建的数组的长度，每个值为空的数组元素<br><code>new Array(2) // [ empty x 2 ]</code><br> 参数为多个时，所有参数都是返回的新数组的成员</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">new</span> <span class="hljs-keyword">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) // [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]  等见于使用字面量来创建数组，里面有两个数组元素分别是<span class="hljs-number">1</span>和<span class="hljs-number">2</span><br><span class="hljs-keyword">new</span> <span class="hljs-keyword">Array</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>) // [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><p>因为Array对象作为构造函数创建数组时行为很不一致，所以不推荐使用这种方式来生成新的数组，推荐直接使用字面量的方式创建数组</p><h4 id="检测是否为数组的方法"><a href="#检测是否为数组的方法" class="headerlink" title="检测是否为数组的方法"></a>检测是否为数组的方法</h4><ul><li><p>Array.isArray(参数)方法返回一个布尔值，表示参数是否为数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-built_in">typeof</span> arr <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-built_in">Array</span>.isArray(arr) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>这个方法是h5新增的方法，可以祢补typeOf的不足，ie9以上版本支持</p></li><li><p>instanceof 运算符，他可以用来检测是否为数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[];<br><span class="hljs-keyword">var</span> obj=&#123;&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr instanceof <span class="hljs-built_in">Array</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj instanceof <span class="hljs-built_in">Array</span>);<br></code></pre></td></tr></table></figure><p>函数案例，翻转数组和检测数组结合，for循环遍历数组中的元素倒序的放入一个新的数组中</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span></span>(arr)&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>=[];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">Array</span>.isArray(arr))&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=arr.length<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>      <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>[<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.length]=arr[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你穿的参数不是一个数组&quot;</span><br>&#125;<br><br>&#125;<br>console.log(reverse(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure></li></ul><h4 id="添加删除数组中元素的方法"><a href="#添加删除数组中元素的方法" class="headerlink" title="添加删除数组中元素的方法"></a>添加删除数组中元素的方法</h4><h5 id="push"><a href="#push" class="headerlink" title="push"></a>push</h5><p>Push()方法用于在数组的最后面添加一个或多个元素，并返回添加新元素后的数组长度。</p><p>注意：该方法会改变原数组</p><p>参数为要添加进去的新元素，一个或多个</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [];<br><br>arr.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 1  参数为要添加进去的新元素</span><br>arr.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">// 2</span><br>arr.<span class="hljs-built_in">push</span>(<span class="hljs-literal">true</span>, &#123;&#125;) <span class="hljs-comment">// 4</span><br>arr <span class="hljs-comment">// [1, &#x27;a&#x27;, true, &#123;&#125;]</span><br></code></pre></td></tr></table></figure><h5 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h5><p>pop()方法用于删除数组的最后一个元素，并返回该元素。</p><p>注意：该方法会改变原数组</p><p>没有参数，一次只能删除一个数组元素</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">var arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br>arr.pop() <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;c&#x27;</span><br>arr <span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]<br></code></pre></td></tr></table></figure><p>空数组使用pop方法不会报错，而是返回undefined.   (此句可不讲)</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[]</span><span class="hljs-selector-class">.pop</span>() <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p><code>push</code>和<code>pop</code>结合使用，就构成了“后进先出”的栈结构（stack）。(此句可不讲)</p><h5 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h5><p>shift()方法用于删除数组的第一元素。并返回该元素。</p><p>注意在；该方法会改变原数组</p><p>没有参数，一次只能删除一个数组元素</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">var a = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br>a.shift() <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;a&#x27;</span><br>a <span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br></code></pre></td></tr></table></figure><h5 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h5><p>unshift()方法用于在数组的最前面添加一个或多个元素，并返回添加新元素后的数组长度。</p><p>注意：该方法会改变原数组。</p><p>参数为要添加进去的新元素，一个或多个</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">var arr = [ <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span> ];<br><br>arr.unshift(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-regexp">//</span> <span class="hljs-number">4</span><br>arr <span class="hljs-regexp">//</span> [ <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span> ]<br></code></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>作用：用于多个数组合并   返回值：追加数据后的新数组 ，原数组不变</p><p>如果参数是数组，它将参数数组的成员拆开，将里面的每一个元素添加到数组的后面，返回一个新的数组，原数组不变</p><p>如果参数是单个数据，直接追加到数组的后面，返回一个新的数组，原数组不变</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>];<br><span class="hljs-attribute">arr</span>.concat(&#123;a:<span class="hljs-number">1</span>,b:<span class="hljs-number">2</span>&#125;,&#123;name:<span class="hljs-string">&quot;66&quot;</span>&#125;);  //<span class="hljs-meta"> [1,3,&#123;a:1,b:2&#125;,&#123;name:&quot;66&quot;&#125;]</span><br></code></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>格式：数组.map(function(item[, index,arr]){})</p><p>这个函数会根据数组里有多少个元素就循环执行参数函数多少回</p><p>作用：将数组的元素依次传入参数函数（回调函数），在参数函数内对数组的元素进行操作，然后将每次循环操作后的元素组成一个新的数组返回  <strong>不会改变原数组</strong></p><p>返回值：是一个新的数组，新数组的长度一定和原始数组的长度一样</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr=arr.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>    <span class="hljs-keyword">return</span> item+<span class="hljs-number">1</span>;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newArr); <span class="hljs-comment">// [2, 2, 4, &quot;hello1&quot;, 8] 数据类型转换了</span><br></code></pre></td></tr></table></figure><p>map方法的接受一个函数作为参数，该函数调用时，map()方法向它传入三个参数，分别是 当前的成员 当前的位置 和 数组本身</p><p>map()方法可以接受第二个参数，绑定参数函数（回调函数内部）的this变量</p><p>（map的底层封装（工作原理）：1 准备一份新的数组  2遍历原始数组，分别执行函数 3:把每次函数执行的返回值放到新的数组里 4:把新的数组当做map的返回值给出来）</p><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>forEach方法不返回值，只是用来操作数据，所以，如果遍历数组的目的是为了得到返回值，那么使用map()方法，否则使用forEach()方法</p><p>这个函数会根据数组里有多少个元素就循环执行多少回</p><p>这个函数每一次执行的时候，item分别的是数组里的每一个元素，index分别是数组里的每一个元素的索引，arr每一次都是原始数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>,<span class="hljs-number">7</span>];<br>arr.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,arr</span>)&#123;<br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(item,<span class="hljs-string">&#x27;-----&#x27;</span>,index,<span class="hljs-string">&#x27;-----&#x27;</span>,arr)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>forEach()方法可以接受第二个参数，绑定参数函数的this变量</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>=[];<br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span></span>(item,index,arr)&#123;<br> <span class="hljs-comment">//  this.push(item);//按正序将数组arr的元素推送到空数组中</span><br>    <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.unshift(item);<br> <span class="hljs-comment">// this.unshift(item); //颠倒数组到一个新的数组里</span><br>&#125;,<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>)<br>console.log(<span class="hljs-string">&#x27;新数组&#x27;</span>,<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>)<br>console.log(<span class="hljs-string">&#x27;原数组&#x27;</span>,arr)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//统计数组中各个元素出现的次数</span><br><span class="hljs-keyword">var</span> a=[<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-literal">true</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>]<br><span class="hljs-keyword">var</span> obj=&#123;&#125;;<br>a.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)&#123;<br>    <span class="hljs-keyword">if</span>(obj[a[index]])&#123;<br>        obj[a[index]]++<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        obj[a[index]]=<span class="hljs-number">1</span>; <br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);   <span class="hljs-comment">//&#123;2: 1, 7: 3, 34: 1, true: 1&#125;  </span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>map和forEach无法中断执行，总是会将所有成员遍历完，如果希望符合某种条件时就中断遍历，要使用for循环</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>作用：filter方法用于过滤数组成员，将满足条件的成员组成一个新的数组返回</p><p>他的参数是一个函数，所有数组的成员依次执行该函数，返回结果为true的成员组成一个新的数组返回</p><p>该方法不会改变原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>,<span class="hljs-number">64</span>,<span class="hljs-number">642</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">var</span> newArr=arr.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,arr</span>)&#123;<br>    <span class="hljs-keyword">return</span> item&gt;<span class="hljs-number">10</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<span class="hljs-comment">// [45, 64, 642, 22]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//返回数组的索引是偶数的位置上的元素</span><br><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>,<span class="hljs-number">64</span>,<span class="hljs-number">642</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">var</span> newArr=arr.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)&#123;<br>    <span class="hljs-keyword">return</span> index%<span class="hljs-number">2</span>==<span class="hljs-number">0</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<span class="hljs-comment">// [1, 45, 642, 4]</span><br></code></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p>作用：删除原数组中的一部分成员     返回值：被删除的数组元素    <strong>直接操作原数组</strong></p><p>​格式1：数组.splice(开始索引，n个) </p><p>​从开始索引的，删除n个元素</p><p>​        如果只提供一个参数，第二个参数不写则表示直接到末尾等同于将原数组在指定位置拆分成了两个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>a.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>);      <span class="hljs-comment">//[3,4]</span><br>a;                <span class="hljs-comment">//[1,2]</span><br></code></pre></td></tr></table></figure><p>​格式2:数组.splice(开始索引，n个，替换数据1，替换数据2….)</p><p>​将替换的数据按照书写的顺序插入到你截取得位置，从哪个索引开始删除，替换数据的第一个就插入到哪个位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>a.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;新来的&#x27;</span>);      <span class="hljs-comment">//[]</span><br>a;                          <span class="hljs-comment">//[1,2，&quot;新来的&quot;，3，4]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组去重</span><br><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i+<span class="hljs-number">1</span>;j&lt;=arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;j++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i]===arr[j])&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i],arr[j])<br>            arr.<span class="hljs-title function_">splice</span>(j,<span class="hljs-number">1</span>);<br>            j--;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);  <span class="hljs-comment">//[1, true, 3, &quot;hello&quot;, 7]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr=[];<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)&#123;<br>    <span class="hljs-keyword">if</span>(newArr.<span class="hljs-title function_">indexOf</span>(item)===-<span class="hljs-number">1</span>)&#123;<br>        newArr.<span class="hljs-title function_">push</span>(item)<br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr); <span class="hljs-comment">//[1, true, 3, &quot;hello&quot;, 7]</span><br></code></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>作用：获取数组中的一部分元素，返回一个新的数组，原数组不改变</p><p>格式：数组.slice(开始索引，结束索引)       包前不包后</p><p>返回值：从数组中获取的元素组成的新数组，如果在原数组中没有获取元素则返回一个空数组</p><p>第二个参数可以不写，表示从开始索引一直返回到原数组的最后一个元素</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>,<span class="hljs-number">7</span>];<br><span class="hljs-attribute">console</span>.log(arr.slice(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),&#x27;------&#x27;,arr);   //<span class="hljs-meta"> [ 2, 3] -------- [1, 2, 3, 45, 7]</span><br><span class="hljs-attribute">console</span>.log(arr.slice(<span class="hljs-number">1</span>),arr);  //<span class="hljs-meta"> [2, 3, 45, 7] --------- [1, 2, 3, 45, 7]</span><br></code></pre></td></tr></table></figure><p>参数可以是一个负整数，表示倒数计算的第几个位置，表示 length+负整数</p><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><h5 id="reverse翻转数组"><a href="#reverse翻转数组" class="headerlink" title="reverse翻转数组"></a>reverse翻转数组</h5><p>reverse方法用于颠倒排列数组元素，返回改变后的数组。</p><p>注意：该方法会改变原数组</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">var a = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br>a.reverse() <span class="hljs-regexp">//</span> [<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>]<br>a <span class="hljs-regexp">//</span> [<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>]<br></code></pre></td></tr></table></figure><ul><li>数组排序（冒排序，由小到大）</li></ul><h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><p>作用：Sort方法对数组成员进行排序，默认是按字典ASCII码的顺序排序，</p><p>返回值：排序后原数组</p><p>​   直接操作原数组</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">[<span class="hljs-number">11</span>, <span class="hljs-number">101</span>].sort()<br><span class="hljs-regexp">//</span> [<span class="hljs-number">101</span>, <span class="hljs-number">11</span>]     <br>[<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>].sort()<br><span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br><br>[<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>].sort()<br><span class="hljs-regexp">//</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>[<span class="hljs-number">10111</span>, <span class="hljs-number">1101</span>, <span class="hljs-number">111</span>].sort()<br><span class="hljs-regexp">//</span> [<span class="hljs-number">10111</span>, <span class="hljs-number">1101</span>, <span class="hljs-number">111</span>]<br>返回结果有问题，对个位数值没有问题，超过个位的一些数组会有问题<br></code></pre></td></tr></table></figure><p>想要让解决上述的问题，可以传入一个函数作为参数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">[<span class="hljs-number">10111</span>, <span class="hljs-number">1101</span>, <span class="hljs-number">111</span>].<span class="hljs-built_in">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) &#123;<br> <span class="hljs-keyword">return</span> a - b;    <span class="hljs-comment">//升序的顺序排列</span><br>&#125;)<br><span class="hljs-comment">// [111, 1101, 10111]</span><br></code></pre></td></tr></table></figure><p>sort的参数函数本身接受两个参数，表示进行比较的两个数组成员。如果该函数的返回值大于0，将第一个成员排在第二个成员后面；其他情况下，都是第一个元素排在第二个元素的前面。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">[<span class="hljs-number">10111</span>, <span class="hljs-number">1101</span>, <span class="hljs-number">111</span>].<span class="hljs-built_in">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) &#123;<br> <span class="hljs-keyword">return</span> b - a;    <span class="hljs-comment">//降序的顺序排列</span><br>&#125;)<br><span class="hljs-comment">//[10111, 1101, 111]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>  &#125;<br>].<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">o1, o2</span>) &#123;<br>  <span class="hljs-keyword">return</span> o1.<span class="hljs-property">age</span> - o2.<span class="hljs-property">age</span>;<br>&#125;)<br><br><span class="hljs-comment">// [</span><br><span class="hljs-comment">//   &#123; name: &quot;李四&quot;, age: 24 &#125;,</span><br><span class="hljs-comment">//   &#123; name: &quot;王五&quot;, age: 28  &#125;,</span><br><span class="hljs-comment">//   &#123; name: &quot;张三&quot;, age: 30 &#125;</span><br><span class="hljs-comment">// ]</span><br></code></pre></td></tr></table></figure><h4 id="返回给定元素在数组中的索引号"><a href="#返回给定元素在数组中的索引号" class="headerlink" title="返回给定元素在数组中的索引号"></a>返回给定元素在数组中的索引号</h4><h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h5><p>indexOf方法返回给定元素在数组中第一次出现的index索引号，如果在数组中没有找到该元素则返回-1</p><p>从数组的前面开始找（正向查找）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br>a.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-comment">// 1</span><br>a.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;y&#x27;</span>) <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><p>indexOf方法还可以接受第二个参数，表示从哪一个索引开始向后查找</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]</span><span class="hljs-selector-class">.indexOf</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>) <span class="hljs-comment">//-1</span><br></code></pre></td></tr></table></figure><h5 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h5><p>lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果在数组中没有找到该元素则返回-1</p><p>从数组的后面开始找 ，注意：数组的索引依然是从前面第一位开始为0，1，2，3…（正常的索引）</p><p>lastIndexOf方法还可以接受第二个参数，表示从哪一个索引开始向前查找</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">var a = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>];<br>a.lastIndexOf(<span class="hljs-number">2</span>) <span class="hljs-regexp">//</span> <span class="hljs-number">3</span><br>a.lastIndexOf(<span class="hljs-number">7</span>) <span class="hljs-regexp">//</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>注意这两个方法不能用来检索NaN的位置，即他们无法确认数组中是否包含NaN</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">[<span class="hljs-literal">NaN</span>].<span class="hljs-built_in">indexOf</span>(<span class="hljs-literal">NaN</span>) <span class="hljs-comment">// -1</span><br>[<span class="hljs-literal">NaN</span>].lastIndexOf(<span class="hljs-literal">NaN</span>) <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><p>这是因为这两个方法内部，使用严格相等运算符（&#x3D;&#x3D;&#x3D;）进行比较，而NaN是唯一一个不等于自身的值</p><p>重点案例，数组去重</p><p>案例分析：</p><p>目标将数组中的不重复的元素取出来，重复的元素只保留一个。放到新数组中去</p><p>方法：遍历旧数组，然后拿旧数组中的元素依次和在新数组中查找，如果没有查找到该元素就放进新数组，如果找到了就不放入新数组</p><p>要点：使用indexOf方法判断新数组中有没有目标元素 返回值为-1则表示新数组中没有该目标元素</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delCel</span></span>(arr)&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>=[];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.indexOf(arr[i])===<span class="hljs-number">-1</span>)&#123;<br> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.push(arr[i]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//--------------将数组中的0全部去掉</span><br><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> index=arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span>(index!=-<span class="hljs-number">1</span>)&#123;<br>  arr.<span class="hljs-title function_">splice</span>(index,<span class="hljs-number">1</span>);<br>  index=arr.<span class="hljs-title function_">indexOf</span>(<span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br></code></pre></td></tr></table></figure><h4 id="数组转化为字符串"><a href="#数组转化为字符串" class="headerlink" title="数组转化为字符串"></a>数组转化为字符串</h4><h5 id="toString-将数组转化为字符串"><a href="#toString-将数组转化为字符串" class="headerlink" title="toString() 将数组转化为字符串"></a>toString() 将数组转化为字符串</h5><h5 id="join"><a href="#join" class="headerlink" title="join"></a>join</h5><p>join()方法以指定的参数作为分隔符，将所有的数组成员链接为一个字符串返回，如果不提供参数默认使用逗号分隔</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">var a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br>a.join(<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;1 2 3 4&#x27;</span><br>a.join(<span class="hljs-string">&#x27; | &#x27;</span>) <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;1 | 2 | 3 | 4&quot;</span><br>a.join() <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;1,2,3,4&quot;</span><br></code></pre></td></tr></table></figure><ul><li>以上操作数组的方法中有不少返回值是数组，所以可以链式使用</li></ul><p>案例看如阮一峰es5</p><p>案例：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> <span class="hljs-keyword">var</span> a=  &#123;<br>           <span class="hljs-string">&quot;男明星&quot;</span>: [<br>                   &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;梁朝伟&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;40&quot;</span>&#125;,<br>                   &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;42&quot;</span>&#125;,<br>                   &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;彭于晏&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;29&quot;</span>&#125;<br>               ],<br>           <span class="hljs-string">&quot;女明星&quot;</span>: [<br>                   &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;刘嘉玲&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;40&quot;</span>&#125;,<br>                   &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张敏&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;41&quot;</span>&#125;,<br>                   &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张柏芝&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;30&quot;</span>&#125;,<br>                   &#123; <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;朱茵&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;38&quot;</span>&#125;<br>               ]<br>        &#125;<br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">   把下列对象按要求遍历</span><br><span class="hljs-comment">   1.页面里实现</span><br><span class="hljs-comment">           男明星:</span><br><span class="hljs-comment">           name--&gt;梁朝伟     age---&gt;40</span><br><span class="hljs-comment">           name--&gt;刘德华     age---&gt;42</span><br><span class="hljs-comment">           name--&gt;彭于晏     age---&gt;29</span><br><span class="hljs-comment">           </span><br><span class="hljs-comment">           女明星:</span><br><span class="hljs-comment">           name--&gt;刘嘉玲     age---&gt;40</span><br><span class="hljs-comment">           name--&gt;张敏        age---&gt;41</span><br><span class="hljs-comment">           name--&gt;张柏芝      age---&gt;30</span><br><span class="hljs-comment">           name--&gt;朱茵       age---&gt;38</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   2.过滤出所有40岁以上的明星</span><br><span class="hljs-comment">   3.求所有明星的年龄之和</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   */</span><br>        <br><span class="hljs-comment">//-------------------------------------------------</span><br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i in a)&#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i+<span class="hljs-string">&#x27;:&#x27;</span>)<br>       a[i].<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`name--&gt;<span class="hljs-subst">$&#123;item.name&#125;</span>   age---&gt;<span class="hljs-subst">$&#123;item.age&#125;</span>`</span>);<br>       &#125;)<br>   &#125;<br>   <span class="hljs-comment">//-----   2.过滤出所有40岁以上的明星</span><br>   <span class="hljs-keyword">var</span> arr=[];<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i in a)&#123;<br>       <br>       arr= arr.concat(a[i]) <br>   &#125;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<span class="hljs-comment">//将所有明星推到一个数组里</span><br>   <span class="hljs-keyword">var</span> up40=arr.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>           <span class="hljs-keyword">return</span> item.age&gt;<span class="hljs-number">40</span><br>       &#125;)<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;大于40岁的明星&#x27;</span>,up40)<br>   <span class="hljs-comment">//----    3.求所有明星的年龄之和</span><br>           <span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>;<br>   arr.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>     <span class="hljs-built_in">sum</span> +=(item.age<span class="hljs-number">-0</span>)<br>   &#125;)<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;所有明星之和&#x27;</span>,<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><h2 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h2><p>js中Number 、String、Boolean这三个原生的函数（对象），作为普通函数调用时（不带new），常常用于将任意类型的值转为相对应的数值，字符串和布尔值。（即数值类型转换）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 字符串转为数值</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;123&#x27;</span>) <span class="hljs-comment">// 123</span><br><br><span class="hljs-comment">// 数值转为字符串</span><br><span class="hljs-title class_">String</span>(<span class="hljs-number">123</span>) <span class="hljs-comment">// &quot;123&quot;</span><br><br><span class="hljs-comment">// 数值转为布尔值</span><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-number">123</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>Number 、String、Boolean这三个原生对象作为构造函数使用的时候（调用时带new），可以将原始类型的值转为（包装）对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> v1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">var</span> v2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;abc&#x27;</span>);<br><span class="hljs-keyword">var</span> v3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>);<br><br><span class="hljs-keyword">typeof</span> v1 <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> v2 <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-keyword">typeof</span> v3 <span class="hljs-comment">// &quot;object&quot;</span><br><br>v1 === <span class="hljs-number">123</span> <span class="hljs-comment">// false</span><br>v2 === <span class="hljs-string">&#x27;abc&#x27;</span> <span class="hljs-comment">// false</span><br>v3 === <span class="hljs-literal">true</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>可以看到基于原始类型的值，生成了三个对应的包装对象，且与原来的基本类型的值不在相等</p><p>将基本类型的值转为包装对象的原因是：基本类型的值是没有属性和方法的，只有对象才有属性和方法，为了方便操作基本类型的数据使得基本类型的值也可以调用自己（对象）的属性和方法</p><ul><li><p>包装对象各自提供了许多的属性和方法，他们共有的方法是：</p><ul><li>valueOf（）方法返回包装对象实例对应的基本类型的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">123</span>).<span class="hljs-title function_">valueOf</span>()  <span class="hljs-comment">// 123</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;abc&#x27;</span>).<span class="hljs-title function_">valueOf</span>() <span class="hljs-comment">// &quot;abc&quot;</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>).<span class="hljs-title function_">valueOf</span>() <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li><p>toString()方法返回对应的字符串形式</p><p>数值，布尔值，字符串都可以使用toString(),因为数字，布尔值，字符串都是包装数据类型，undefined和null不是包装数据类型，不能使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">123</span>).<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;123&quot;</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;abc&#x27;</span>).<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;abc&quot;</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">true</span>).<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;true&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>基本数据类型与实例对象的自动转换</p><p>在基本类型的值上直接调用包装对象的属性和方法时，js引擎会自动将基本类型的值先转换为包装对象，调用包装对象的属性和方法，并在使用后销毁实例</p><p>数值，字符串，布尔值是包装数据类型，在使用的时候会自动转换成复杂数据类型，当使用完毕自动转换为基本数据类型</p><p>基本数据类型在堆里没有空间，当使用字符串.length的时候，会自动转换为复杂数据类型，在堆内存里开辟一个空间，按照索引将字符串的每一个字符排列进去，等访问结束，拿到我们要使用的内容后，这个开辟的临时空间就销毁了</p><p>基本数据类型是不会被改变的只能覆盖 <code>var num=10;num+=20;</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;abc&quot;</span>;<br>str.<span class="hljs-property">lengrh</span> <span class="hljs-comment">//3</span><br><br>上面色代码等同于，先把str转换为其对应的包装对象，这是一个临时对象<br><span class="hljs-keyword">var</span> strObj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>（str）<br><span class="hljs-comment">// String &#123;</span><br><span class="hljs-comment">//   0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3, [[PrimitiveValue]]: &quot;abc&quot;</span><br><span class="hljs-comment">// &#125;</span><br>在这个临时对象上调用length属性<br>strOj.<span class="hljs-property">length</span>；<br>调用包装对象的方法或属性后再销毁这个临时对象<br>strObj=<span class="hljs-literal">null</span>；<br></code></pre></td></tr></table></figure><p>自动生成的包装对象是只读的，无法修改，所以，字符串无法添加新的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;Hello World&#x27;</span>;<br>s.<span class="hljs-property">x</span> = <span class="hljs-number">123</span>;<br>s.<span class="hljs-property">x</span> <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性</p><h2 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h2><p>操作字符串的案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">反转字符串<br>方法<span class="hljs-number">1</span>:<br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;adgfshj gggggfsg&#x27;</span>;<br><span class="hljs-keyword">var</span> res=a.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res); <span class="hljs-comment">// gsfggggg jhsfgda</span><br><br>方法<span class="hljs-number">2</span>:<br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;adgfshj gggggfsg&#x27;</span>;<br><span class="hljs-keyword">var</span> s=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=a.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>    <span class="hljs-comment">// console.log(a[i])</span><br>    <span class="hljs-comment">// console.log(a.charAt(i))</span><br>    s += a[i];<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s)<br></code></pre></td></tr></table></figure><p>基本数据类型在堆里没有空间，当使用字符串.length的时候，会自动转换为复杂数据类型，在堆内存里开辟一个空间，按照索引将字符串的每一个字符排列进去，等访问结束，拿到我们要使用的内容后，这个开辟的临时空间就销毁了</p><p>基本数据类型是不会被改变的只能覆盖</p><p>基本数据类型在堆里没有空间，当使用字符串.length的时候，会自动转换为复杂数据类型，在堆内存里开辟一个空间，按照索引将字符串的每一个字符排列进去，等访问结束，拿到我们要使用的内容后，这个开辟的临时空间就销毁了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;啊函数的佛罗伦萨定时发个hasdf a&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(str))<br><span class="hljs-comment">//</span><br><span class="hljs-number">0</span>: <span class="hljs-string">&quot;啊&quot;</span><br><span class="hljs-number">1</span>: <span class="hljs-string">&quot;函&quot;</span><br><span class="hljs-number">2</span>: <span class="hljs-string">&quot;数&quot;</span><br><span class="hljs-number">3</span>: <span class="hljs-string">&quot;的&quot;</span><br><span class="hljs-number">4</span>: <span class="hljs-string">&quot;佛&quot;</span><br><span class="hljs-number">5</span>: <span class="hljs-string">&quot;罗&quot;</span><br><span class="hljs-number">6</span>: <span class="hljs-string">&quot;伦&quot;</span><br><span class="hljs-number">7</span>: <span class="hljs-string">&quot;萨&quot;</span><br><span class="hljs-number">8</span>: <span class="hljs-string">&quot;定&quot;</span><br><span class="hljs-number">9</span>: <span class="hljs-string">&quot;时&quot;</span><br><span class="hljs-number">10</span>: <span class="hljs-string">&quot;发&quot;</span><br><span class="hljs-number">11</span>: <span class="hljs-string">&quot;个&quot;</span><br><span class="hljs-number">12</span>: <span class="hljs-string">&quot;h&quot;</span><br><span class="hljs-number">13</span>: <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-number">14</span>: <span class="hljs-string">&quot;s&quot;</span><br><span class="hljs-number">15</span>: <span class="hljs-string">&quot;d&quot;</span><br><span class="hljs-number">16</span>: <span class="hljs-string">&quot;f&quot;</span><br><span class="hljs-number">17</span>: <span class="hljs-string">&quot; &quot;</span><br><span class="hljs-number">18</span>: <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-attr">length</span>: <span class="hljs-number">19</span><br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//---------------------------循环遍历字符串</span><br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;啊函数的佛罗伦萨定时发个hasdf a&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(str))；<span class="hljs-comment">//看看字符串包装对象怎么存储的</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=str.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str[i])<br>&#125;<br><br><span class="hljs-comment">//-----------------------------统计字符串传中各个字符出现的次数</span><br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;11adgfshjf gggggfsg22&#x27;</span>;<br><span class="hljs-keyword">var</span> obj=&#123;&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=a.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(obj[a[i]])&#123;       <span class="hljs-comment">//a[i] 是字符串里每一个字符，判断对象里有没这个属性，没有就以字符作为属性名</span><br>        obj[a[i]]++       <span class="hljs-comment">// 并赋值为1，如果有就自增1</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        obj[a[i]]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br><br><br><span class="hljs-comment">//--------------------------出现最多次的字符</span><br><br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;11adgfshjf gggggfsg22&#x27;</span>;<br><span class="hljs-keyword">var</span> obj=&#123;&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=a.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(obj[a[i]])&#123;<br>        obj[a[i]]++<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        obj[a[i]]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br><span class="hljs-keyword">var</span> max=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> j;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> obj)&#123;<br>    <span class="hljs-keyword">if</span>(obj[i]&gt;=max)&#123;<br>        max=obj[i]<br>        j=i<br>    &#125;<br><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;出现次数最多的字符是：&#x27;</span>,j,<span class="hljs-string">&#x27;出现多少次：&#x27;</span>,max)  <span class="hljs-comment">//g 次</span><br><br><span class="hljs-comment">//-------------------------------统计指定字符出现的次数</span><br><span class="hljs-comment">//-----------先找出第一次出现的位置，然后只有返回值不是-1，就继续向后查找，因为indexof，只能查找到第一个，后面的查找可以使用indexof的第二个参数，设置下次查找从上次返回值的下一位开始查找</span><br><br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;11adgfshjf gggggfsg22&#x27;</span>;<br><span class="hljs-keyword">var</span> index=a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;s&#x27;</span>);<br><span class="hljs-keyword">var</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (index!=-<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index)               <span class="hljs-comment">// 出现的索引位置 6 17</span><br>    num++<br>    index=a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;s&#x27;</span>,index+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;出现多少次：&#x27;</span>,num)；            <span class="hljs-comment">// 2次</span><br></code></pre></td></tr></table></figure><h3 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h3><p>es5中使用+拼接字符串，es6中新增了以反引号定义字符串 <code>dgfgd</code>,我们将反引号定义的字符串叫做模版字符串</p><p>模版字符串和单双引号字符串的区别</p><p>​在单双引号字符串中不能换行，不能使用变量，模版字符串可以换行且换行效果可以输出，可以使用变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-string">`&lt;p&gt;</span><br><span class="hljs-string">      &lt;a&gt;不错不错&lt;/a&gt;</span><br><span class="hljs-string">      &lt;span&gt;你好&lt;span&gt;</span><br><span class="hljs-string">     &lt;/p&gt;`</span><br></code></pre></td></tr></table></figure><p>模版字符串有兼容性问题，但是不用考虑，打包工具会转换为es5的语法</p><h4 id="…字符串的不可变"><a href="#…字符串的不可变" class="headerlink" title="(…字符串的不可变"></a>(…字符串的不可变</h4><p>（字符串的不可变指的是里面的值不可变，变量的值虽然看上去可以改变内容，但其实是地址变了，在内存中开辟了新的内存空间）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;abc&quot;</span>;<br>在内存中开辟一个内存空间存储字符串“abc”，将变量的指针指向这个字符串的内存空间<br>str=<span class="hljs-string">&quot;123&quot;</span>;<br>当给str变量重新赋值为“<span class="hljs-number">123</span>”字符串实际是，在内存中重新开辟了一个内存空间用来存储新的字符串“<span class="hljs-number">123</span>”，并将变量str的指针指向这个新的内存空间，而原来的<span class="hljs-string">&quot;abc&quot;</span>常量字符串依然在内存空间中。只不过是变量str的指针指向发生了改变<br></code></pre></td></tr></table></figure><p>由于字符串的不可变，在大量拼接字符串时会有效率问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000000000</span>;i++)&#123;<br> str+=i;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str) <span class="hljs-comment">//这个结果需要大量的时间来显示，因为会不断的开辟新的内存空间</span><br></code></pre></td></tr></table></figure><p>由于字符串时不可变的，所以字符串的 所有方法都不会修改字符串本身，操作完成会返回一个新的字符串…)</p><h3 id="字符串实例的属性"><a href="#字符串实例的属性" class="headerlink" title="字符串实例的属性"></a>字符串实例的属性</h3><p>字符串实例的length属性返回字符串的长度，字符串的lengrh属性是一个制度属性，你如你要设置不会报错</p><p>基本数据类型是不会被改变的只能覆盖</p><p>字符串里的空格也算一个字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-property">length</span><br></code></pre></td></tr></table></figure><h3 id="字符串实例方法"><a href="#字符串实例方法" class="headerlink" title="字符串实例方法"></a>字符串实例方法</h3><h4 id="根据字符返回返回位置"><a href="#根据字符返回返回位置" class="headerlink" title="根据字符返回返回位置"></a>根据字符返回返回位置</h4><h5 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf"></a>indexOf</h5><p>作用：indexOf方法用于确定一个字符串在另一个字符串中第一次出现的位置（从原字符串头部开始向后查找）。如果找不到就返回-1</p><p>格式：<code>字符串.indexOf(&#39;要查询的字符&#39;，[开始的index索引])</code></p><p>开始的索引可以省略，省略即是在整个原字符串中查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//可以匹配一个字符串片段，返回开始索引</span><br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;adgfshj gggggfsg&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;shj&#x27;</span>))<br></code></pre></td></tr></table></figure><h5 id="lastIndexOf-1"><a href="#lastIndexOf-1" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h5><p>字符串.lastIndexOf(‘要查询的字符’)  从原字符串尾部开始向前查找，返回第一个符号条件的index，没有找到则返回-1</p><p>字符串的这两个方法同数组的indexOf和lastIndexOf用法一样</p><p>案例：。。。</p><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>格式：字符串.includes(‘字符串片段’)</p><p>作用：查找字符串里有没有匹配的字符串片段，返回 true或false</p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>格式：字符串.search(‘字符串片段’)</p><p>作用：查找字符串里有没有匹配的字符串片段</p><p>返回值：有 返回指定索引</p><p>​没有 返回-1</p><p>和indexof的区别，search没有第二个参数，search可以使用正则</p><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>格式：字符串.match(‘字符串片段’)</p><p>作用：查找字符串里匹配的字符串片段</p><p>返回值：返回一个数组，里面是找到的字符串片段</p><p>实际应用：参数不是传入字符串而是传入正则</p><p>​        match可以使用正则</p><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>去除首位空格</p><p>返回去除空格后字符串</p><p>trimStart() 去除开始空格。trimEnd() 去除尾部空格</p><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><ul><li><p>字符串.charAt(index)        index是字符串的索引号，返回该索引号位置上的字符</p><p>如果没有该索引位置，返回空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;adgfshj fsg&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">87</span>))<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//循环遍历字符串</span><br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;adgfshj gggggfsg&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=a.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>    <span class="hljs-comment">// console.log(a[i])</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">charAt</span>(i))<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>字符串.charCodeAt(index)     返回该索引号上的字符的ASCII码(索引)</p></li><li><p>字符串[index]  返回index位置上的字符  该方法有兼容性问题 ，IE8+才支持，与charAt方法等效</p></li></ul><p>​案例：统计一个字符串中出现次数最多的字符</p><p>ASCII码</p><p>读作：as key码</p><p>一个编码，用来表示计算机输入的所有内容，最早把所有可以输入的内容全部转换成二进制数字保存，给电脑上的每一个键，每一个输入都编了一个二进制码，一共128个，起了名字叫做ASCII码</p><p>unicode编码</p><p>随着计算机的发展，128个不够用了，又在ascii码的基础上新增了世界上大部分国家的文字，即万国码（统一码），取名叫做unicode编码，前128个就是ascII码</p><p>随着web技术的发展，在浏览器中统一使用一种八位的unicode编码，我们叫做UTF-8</p><p>不同的编码，在不同的字符集里面，同一个序号的内容不一样GBK</p><h5 id="concat-1"><a href="#concat-1" class="headerlink" title="concat"></a>concat</h5><p>concat方法用于拼接两个或多个字符串，返回一个新的字符串，不改变原字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">字符串<span class="hljs-number">1.</span><span class="hljs-title function_">concat</span>(字符串<span class="hljs-number">2</span>[,字符串<span class="hljs-number">3</span>,....])<br><br><span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>) <span class="hljs-comment">//&#x27;abc&#x27;</span><br></code></pre></td></tr></table></figure><p>如果参数不是字符串会先将其转化为字符串再拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> one = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> two = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> three = <span class="hljs-string">&#x27;3&#x27;</span>;<br><br><span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">concat</span>(one, two, three) <span class="hljs-comment">// &quot;123&quot;</span><br>one + two + three <span class="hljs-comment">// &quot;33&quot;</span><br></code></pre></td></tr></table></figure><p>作为比对，加号运算符在两个运算数都是数值的，不会转换类型，所以的到的是一个两个字符的字符串</p><h5 id="slice-1"><a href="#slice-1" class="headerlink" title="slice"></a>slice</h5><p>字符串实例的slice方法用于从原字符串取出子字符串并返回子字符串，不改变原字符串</p><p>字符串.slice(star,end),它的第一个参数是子字符串开始的位置（包含该开始的位置），第二个参数是子字符串结束的位置但不包含该结束的位置（包前不包后）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> one = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> two = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> three = <span class="hljs-string">&#x27;3&#x27;</span>;<br><br><span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">concat</span>(one, two, three) <span class="hljs-comment">// &quot;123&quot;</span><br>one + two + three <span class="hljs-comment">// &quot;33&quot;</span><br></code></pre></td></tr></table></figure><p>如果省略第二个参数，则表示子字符串一直到原子符串的结尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaScript&#x27;</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// &quot;Script&quot;</span><br></code></pre></td></tr></table></figure><p>如果参数为负值，则表示从结尾开始倒数计算的位置，即该负值加上字符串的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaScript&#x27;</span>.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">6</span>) <span class="hljs-comment">// &quot;Script&quot;</span><br><span class="hljs-string">&#x27;JavaScript&#x27;</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">6</span>) <span class="hljs-comment">// &quot;Java&quot;</span><br><span class="hljs-string">&#x27;JavaScript&#x27;</span>.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>) <span class="hljs-comment">// &quot;p&quot;</span><br></code></pre></td></tr></table></figure><p>如果第一个参数大于第二个参数（正值的情况下），则slice方法返回一个空字符串、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaScript&#x27;</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// &quot;&quot;</span><br></code></pre></td></tr></table></figure><p>substring方法和slice放法很像，但是substring方法有些规则很违反直觉，推荐使用slice方法，substring方法不讲了，感兴趣的自己查找</p><p>substring和slice的区别，substring可以使用负整数</p><p>substring 不建议使用，优先使用slice</p><h5 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h5><p>作用：从原字符串中取出子字符串并返回子字符串，不改变原字符串</p><p>格式：字符串.substr(star, length)</p><p>返回值：截取出来的字符串</p><p>第一个参数是子字符串开始的位置（从0开始计算）包含该开始位置，第二个参数是子字符串的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaScript&#x27;</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>) <span class="hljs-comment">// &quot;Script&quot;</span><br></code></pre></td></tr></table></figure><p>如果省略第二个参数则表示子字符串从开始位置一直到原字符串的结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaScript&#x27;</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// &quot;Script&quot;</span><br></code></pre></td></tr></table></figure><p>如果第一个参数是负数则表示倒数计算的字符位置，如果第二个参数是负数则会自动被转化为0，表示子字符串的长度是0，因此会返回一个空字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;JavaScript&#x27;</span>.<span class="hljs-title function_">substr</span>(-<span class="hljs-number">6</span>) <span class="hljs-comment">// &quot;Script&quot;</span><br><span class="hljs-string">&#x27;JavaScript&#x27;</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">4</span>, -<span class="hljs-number">1</span>) <span class="hljs-comment">// &quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h5 id="split"><a href="#split" class="headerlink" title="split"></a>split</h5><p>作用：split方法按照给定规则分隔字符串，返回一个由分隔出来的子字符串组成的数组。</p><p>格式：字符串.split(分隔符，保留多少个)</p><p>第二个参数是选填，作用是设置切割完后，保留多少个，默认是全部</p><p>返回值：以数组的形式保存每一段的内容，返回值总是一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;a|b|c&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;|&#x27;</span>) <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure><p>如果分隔规则为空字符串，按照一位一位的切割，则返回数组的成员是原字符串的每一个字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;a|b|c&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure><p>如果省略参数，则返回数组的唯一成员就是原字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;a|b|c&#x27;</span>.<span class="hljs-title function_">split</span>() <span class="hljs-comment">// [&quot;a|b|c&quot;]</span><br></code></pre></td></tr></table></figure><p>案例：2021-12-09   转为 2021&#x2F;12&#x2F;09 格式</p><p>​将url地址 <a href="https://www.baidu.com/index.html?a=12&b=345&c=678">https://www.baidu.com/index.html?a=12&amp;b=345&amp;c=678</a>; 的查寻字符串放到对象里</p><p>​{a:12,b:345,c:678}</p><h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5><p>replace方法用于替换字符串中的字符，一般情况只替换第一个匹配的字符</p><p>格式：字符串.replace(‘被替换的字符’,’要替换为的字符’)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;aaa&quot;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)  <span class="hljs-comment">//&quot;baa&quot;</span><br></code></pre></td></tr></table></figure><p>案例：将’abcabcabc’中的所有a替换为w（关键字隐藏）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">方法<span class="hljs-number">1</span>：<br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;abcabcabc&#x27;</span>;<br><span class="hljs-keyword">while</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;a&#x27;</span>) !== -<span class="hljs-number">1</span>)&#123;<br>str=str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>); <span class="hljs-comment">//替换字符串后重新赋值给变量，否则字符串一直是原字符串，会死循环</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br><br>方法<span class="hljs-number">2</span>:<br><span class="hljs-comment">// 使用正则</span><br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;adgfshj gggggfsg&#x27;</span>;<br>a=a.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/f/g</span>,<span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br><br>方法<span class="hljs-number">3</span>:<br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;11adgfshjf gggggfsg22&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;f&#x27;</span>));   <span class="hljs-comment">//[&quot;11adg&quot;, &quot;shj&quot;, &quot; ggggg&quot;, &quot;sg22&quot;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;f&#x27;</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;**&#x27;</span>)); <span class="hljs-comment">//11adg**shj** ggggg**sg22</span><br></code></pre></td></tr></table></figure><ul><li>toUpperCase()  &#x2F;&#x2F;转换大写</li><li>toLowerCase()  &#x2F;&#x2F;转换小写</li></ul><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>程序在长期运行中也会产生垃圾，垃圾积攒过多会导致程序的运行过慢，我们需要一种垃圾回收机制来处理来处理程序在运行过程中产生的垃圾</p><ul><li><p>当一个对象没有任何的变量或者属性对他进行引用，此时我们将永远无法再对该对象进行操作，这个对象就是一个垃圾数据，这种对象过多会占用大量的内存空间，需要对这种对象进行清理，在js中拥有自动的垃圾回收机制，会自动将这种对象从内存中销毁，我们不需要也无法手动的进行垃圾回收操作，我们需要做的就是将不再使用的对象设置为null即可，就像是放到了垃圾箱一样，到时垃圾回收机制就会自动将垃圾清理掉</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var obj<span class="hljs-operator">=</span>new Object()<span class="hljs-comment">;  </span><br><span class="hljs-attribute">obj</span><span class="hljs-operator">=</span>null<span class="hljs-comment">;  //对象不在使用后赋值为null</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>RegExp 正则表达式（regular Expression）又名 规则表达式，正则表达式是一个复杂数据类型</p><p>作用：1 专门用来验证字符串是否符合规则</p><p>​           2  从字符串里面获取一部分符合规则的内容</p><p>语法：</p><ul><li>使用一些特殊符号，来组合成一个表达式</li><li>使用这个表达式去验证字符串，或者从字符串里面获取一些内容</li></ul><p>创建一个正则表达式</p><p>1 字面量形式创建</p><p>   var reg&#x3D;&#x2F;abcd&#x2F;</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const reg=<span class="hljs-regexp">/abcd/</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> reg)；   object<br></code></pre></td></tr></table></figure><p>2 内置构造函数创建</p><p>​var res&#x3D;new RegExp(‘abcd’);</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const reg2=<span class="hljs-keyword">new</span> RegExp(<span class="hljs-string">&#x27;abcd&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(reg2)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> reg2)<br></code></pre></td></tr></table></figure><p>意义：字符串里包含一段 abcd 字母就可以了</p><p>检测：aaaabbbbcccddd 不合格</p><p>​         123abcddhhdh 合格</p><p>正则表达式的两个方法</p><ul><li><p>匹配：验证字符串是不是符合正则规则</p><p>语法：正则.test(你要检测的字符串)</p><p>返回值：一个布尔值 ，true 或 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/abcd/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> reg)   <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdefg&#x27;</span>));   <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>捕获：从字符串里面捕获符合正则规则的那一部分片段</p><p>语法：正则.exec(你要捕获的字符串)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;11111.....&#x27;</span>,reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;abcdefg66&#x27;</span>));<br><span class="hljs-comment">//[&#x27;abcd&#x27;, index: 0, input: &#x27;abcdefg66&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure><p>返回值：</p><ul><li><p>1 字符串里面没有符合规则的片段。 –》 null</p></li><li><p>2 字符串里有符合规则的片段 </p></li><li><p>2.1 基础捕获</p></li></ul><p>  ​返回值是一个数组，索引0 是捕获来的片段，不管有多少个片段，都只捕获第一个片段，不管捕      获多少次，都是第一个片段</p><p>  ​index：0  是从哪一个索引开始拿到的</p><p>  ​input：’abcdefg66’  你输入的原字符串是哪个，我从哪个字符串里拿出来的东西</p><ul><li><p>2.2 （最后再总结）当基础表达式有小括号()的时候,返回值是一个数组，从索引[1]开始依次是每一个小括号单独捕获</p></li><li><p>2.3 （最后再总结）当正则有全局表示符g的时候，第二次捕获会从第一次捕获的结束位继续向后查找，直到找不到了为止返回null，下面一次捕获，依旧会从索引[0]位置开始查找</p></li></ul></li></ul><h5 id="正则表达式的元字符-基础元字符"><a href="#正则表达式的元字符-基础元字符" class="headerlink" title="正则表达式的元字符 - 基础元字符"></a>正则表达式的元字符 - 基础元字符</h5><p>元字符：组成正则的基本符号，以符号的形式代替文本内容，把所有的文本内容归结成一些符号来代替</p><ul><li>\s (小s)表示字符串里需要有一个空格 字符</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/\s/</span>; 等价于 / /<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc tt&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>\S （大S）表示字符串里需要一个非空格 字符</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/\S/</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27; &#x27;</span>)); <span class="hljs-comment">//fasle</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27; 1&#x27;</span>)) ; <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li><p>\t   表示你的字符串里要有一个 制表符 字符 tab缩进，注意要调整vscode的缩进方式，默认是空格，空格和tab缩进看着一样，但实际是不同的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/\t/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;  &#x27;</span>)); <span class="hljs-comment">// false 此处是两个空格</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//true 此处是一个制表符 （tab缩进）</span><br></code></pre></td></tr></table></figure></li><li><p>\d 表示字符串里要有一个数字（0到9）字符           digit （零到九中的任一）数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/\d/</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;dhasf&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure></li><li><p>\D 表示字符串里要有一个非数字</p></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/\D/</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;dhasf&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>\w (小w)表示至少有一个 数字 字母 下划线 都可以，任选其一</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/\w/</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111&#x27;</span>));   <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;dhasf&#x27;</span>)) ;   <span class="hljs-comment">//true</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;-……&amp;*（……）&#x27;</span>));   <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ul><li>\W  (大W)表示有一个非 数字 字母 下划线</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/\w/</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111&#x27;</span>));   <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;dhasf&#x27;</span>)) ;   <span class="hljs-comment">//false</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;-……&amp;*（……）&#x27;</span>));   <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>点 （.）表示字符串里要有一个非换行的任意字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/./</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;11\n11&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;-……&amp;*（……）&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>斜线（\） 表示转义符 ，把没有意义的内容转换成有意义的内容，把有意义的内容转成没有意义的内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/s/</span>; <span class="hljs-comment">//表示你的字符串里要有一个字母s</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111s&#x27;</span>)); <span class="hljs-comment">//true</span><br><br> <span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/\s/</span>; <span class="hljs-comment">//表示你的字符串里要有一个空格字符</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111s&#x27;</span>)); <span class="hljs-comment">//false</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111 s&#x27;</span>)); <span class="hljs-comment">//true</span><br><br> <span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/./</span>; <span class="hljs-comment">//表示你的字符串里要有一个非换行的任意字符</span><br> <span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/\./</span>; <span class="hljs-comment">//表示你的字符串里要有一个点 .文本</span><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\\/</span>; 表示你的字符串里面要有一个斜线文本<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111s\\&#x27;</span>));  <span class="hljs-comment">//注意在字符串里面斜线也要转义 ,因为在字符串里面斜线也是转义</span><br></code></pre></td></tr></table></figure><p>正则表达式的元字符 - 边界元字符</p><ul><li>^ (上尖角) 表示字符串开始</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^\d/</span>; 表示你的字符串需要以一个数字开头<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111s\\&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>$ 表示字符串结束</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d$/</span>; 表示你的字符串需要以一个数字结尾<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1111s\\2&#x27;</span>)); <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^\d$/</span>;  表示字符串从开头到结尾只能有一个数字，一个\d，表示的是一个数字,一个符号只表示一个位置的文本内容<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1a2&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;2&#x27;</span>));<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^\d\d$/</span>;  表示字符串从开头到结尾有<span class="hljs-number">2</span>个数字，一个\d，表示的是一个数字<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1b2&#x27;</span>)); <span class="hljs-comment">// fasle</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;22&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>正则表达式的元字符- 限定元字符</p><p> 限定元字符是写在普通元字符或者字母符号的后面，修饰前面 一个符号  的出现次数</p><ul><li>星 *   表示0 ～多次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d*/</span>; <span class="hljs-comment">//表示你的字符串里面需要出现一个 0到多个数字组成的片段</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;12&#x27;</span>));     <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;asdf1yy2yy3&#x27;</span>));  <span class="hljs-comment">//true</span><br><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^\d*$/</span>;  <span class="hljs-comment">//表示你的字符串里面只能由 0到多个数字组成</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//true  数字出现0次</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;12&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1234&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;asdf1yy2yy3&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ul><li>加号 +   表示1 ～多次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^\d+$/</span>;  <span class="hljs-comment">//表示你的字符串里面只能由 1到多个数字组成</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//fasle  数字出现0次</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;12&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1234&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;asdf1yy2yy3&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ul><li>问号 ？ 表示0～1次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^\d?$/</span>; <span class="hljs-comment">//表示你的字符串 只能由0 或者1 个数字组成</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;12&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;asdf1yy2yy3&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ul><li>{n}  表示出现n次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^\d&#123;3&#125;$/</span>; <span class="hljs-comment">//表示字符串只能由3个数字组成</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;12&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;asdf1yy2yy3&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ul><li>{n,} 表示出现 n～多次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^\d&#123;2,&#125;$/</span>; <span class="hljs-comment">//表示你的字符串只能由2到多个数字组成</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//false </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1&#x27;</span>)); <span class="hljs-comment">//false </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;12&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;asdf1yy2yy3&#x27;</span>)); <span class="hljs-comment">//false </span><br></code></pre></td></tr></table></figure><ul><li>{n,m} 表示指定出现n到m次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^\d&#123;2,3&#125;$/</span>; <span class="hljs-comment">//表示你的字符串只能由2到3数字组成</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1&#x27;</span>));  <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;12&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1244&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;asdf1yy2yy3&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>​{0,} 等价于*</p><p>​{1,} 等价于+</p><p>​{0,1} 等价于?</p><h5 id="正则的贪婪与非贪婪"><a href="#正则的贪婪与非贪婪" class="headerlink" title="正则的贪婪与非贪婪"></a>正则的贪婪与非贪婪</h5><ul><li><p>贪婪：当你给一个符号使用限定符号的时候，在你捕获的时候，他会尽可能多的去捕获内容，我们管这个特性叫做正则的贪婪性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d+/</span><br><span class="hljs-comment">//在捕获的时候会捕获能捕获到的最大长度，就是123456789</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;abc123456789abc&#x27;</span>)); <br><span class="hljs-comment">//  [&#x27;123456789&#x27;, index: 3, input: &#x27;abc123456789abc&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure></li><li><p>非贪婪：正则在捕获的时候尽可能的按照最小值来捕获,格式为 在写限定符的时候，在后面多加一个问号</p><p>每一个限定符都可以在后面使用？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d+?/</span><br><span class="hljs-comment">//在捕获的时候会捕获能捕获到的最小长度捕获，就是1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;abc123456789abc&#x27;</span>));<br><span class="hljs-comment">// [&#x27;1&#x27;, index: 3, input: &#x27;abc123456789abc&#x27;, groups: undefined]</span><br><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d*/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;abc123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;&#x27;, index: 0, input: &#x27;abc123456789abc&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;123456789&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d*?/</span><br><span class="hljs-comment">//在捕获的时候会捕获能捕获到的最小长度捕获 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;abc123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;&#x27;, index: 0, input: &#x27;abc123456789abc&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;abc123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d?/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;1&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d??/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d&#123;3&#125;/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;123&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/\d&#123;3&#125;?/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;123&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d&#123;3,&#125;/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;123456789&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/\d&#123;3,&#125;?/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;123&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d&#123;3,7&#125;/</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;1234567&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/\d&#123;3,7&#125;?/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123456789abc&#x27;</span>));<br><span class="hljs-comment">//[&#x27;123&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">练习<span class="hljs-number">1</span>：<br> 捕获一段 html 结构的字符串，捕获开始标签内的所有内容<br> <br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;&lt;p style=&quot;color:red;&quot;&gt;&lt;span&gt;yyyy&lt;/span&gt;&lt;/p&gt;&#x27;</span><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/&lt;.+&gt;/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-comment">//[&#x27;&lt;p style=&quot;color:red;&quot;&gt;&lt;span&gt;yyyy&lt;/span&gt;&lt;p&gt;&#x27;, index: 0, input: &#x27;&lt;p style=&quot;color:red;&quot;&gt;&lt;span&gt;yyyy&lt;/span&gt;&lt;p&gt;&#x27;, groups: undefined]</span><br><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/&lt;.+?&gt;/</span>      <span class="hljs-comment">//经常用来抓html结构时用的</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-comment">//[&#x27;&lt;p style=&quot;color:red;&quot;&gt;&#x27;, index: 0, input: &#x27;&lt;p style=&quot;color:red;&quot;&gt;&lt;span&gt;yyyy&lt;/span&gt;&lt;/p&gt;&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">----想匹配abcd<br>练习<span class="hljs-number">2</span><br><span class="hljs-keyword">const</span> reg3=<span class="hljs-regexp">/^abcd&#123;2&#125;$/</span>;  表示abc d出现两次<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdabcd&#x27;</span>));<span class="hljs-comment">//false</span><br> <span class="hljs-comment">// 因为一个限定符只修饰它前面的一个符号或字母 &#123;2&#125;修饰的是d</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdabcdd&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdd&#x27;</span>));<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">const</span> reg3=<span class="hljs-regexp">/abcd&#123;2&#125;/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdabcd&#x27;</span>));<span class="hljs-comment">//false </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdabcdd&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdd&#x27;</span>));<span class="hljs-comment">//true</span><br><br><br><br><br><span class="hljs-keyword">const</span> reg4=<span class="hljs-regexp">/a&#123;2&#125;b&#123;2&#125;c&#123;2&#125;d&#123;2&#125;/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdabcd&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aabbccdd&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="正则表达式的元字符-特殊字符"><a href="#正则表达式的元字符-特殊字符" class="headerlink" title="正则表达式的元字符-特殊字符"></a>正则表达式的元字符-特殊字符</h5><ul><li><p>（） 小括号  </p><ul><li>表示一个整体</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg3=<span class="hljs-regexp">/(abcd)&#123;2&#125;/</span>;  <span class="hljs-comment">//表示abcd这个整体出现两次</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdabcd&#x27;</span>));<span class="hljs-comment">//true </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdabcdd&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdd&#x27;</span>));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ul><li><p>单独捕获，单独将一些内容拿出来</p><p>在你捕获一个字符串的时候，从左边开始每一个小括号依次是数组里面的[1]开始的内容</p><p>从左向右依次数小括号的开始括号</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg6=<span class="hljs-regexp">/\d+\s+\d/</span>;  <span class="hljs-comment">//表示数字1到多个，空格（小S）一到多个，数字一到多个</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg6.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123   123&#x27;</span>));<br><span class="hljs-comment">//[&#x27;123   123&#x27;, index: 0, input: &#x27;123   123&#x27;, groups: undefined]</span><br><br><span class="hljs-keyword">const</span> reg6=<span class="hljs-regexp">/\d+(\s+)\d+/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg6.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123   123&#x27;</span>));<br><span class="hljs-comment">// [&#x27;123   123&#x27;, &#x27;   &#x27;, index: 0, input: &#x27;123   123&#x27;, groups: undefined]</span><br><br><span class="hljs-keyword">const</span> reg6=<span class="hljs-regexp">/(\d+(\s+))\d+/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg6.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123   123&#x27;</span>));<br><span class="hljs-comment">//[&#x27;123   123&#x27;, &#x27;123   &#x27;, &#x27;   &#x27;, index: 0, input: &#x27;123   123&#x27;, groups: undefined]</span><br><span class="hljs-comment">//索引0 为 &#x27;123   123&#x27;</span><br><span class="hljs-comment">//索引1 为 &#x27;123   &#x27;</span><br><span class="hljs-comment">//索引2 为 &#x27;   &#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>（?:） 表示整体匹配但不捕获，只是标志一个整体，但是捕获的时候不会单独捕获出来</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg6=<span class="hljs-regexp">/\d+(?:\s+\d+)&#123;2&#125;/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg6.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;123   123 123&#x27;</span>));<br><span class="hljs-comment">//[&#x27;123   123 123&#x27;, index: 0, input: &#x27;123   123 123&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure><ul><li>|  竖线， 占位或，表示左边或者右边的都行，大部分和（）连用，表示一个整体或者一个整体</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg7=<span class="hljs-regexp">/(abc|def)/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;def&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">练习：<br><span class="hljs-keyword">const</span> reg7=<span class="hljs-regexp">/^abc|def$/</span>; <span class="hljs-comment">//表示以abc 或者 def结尾</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;def&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc1233&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1233def&#x27;</span>));<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">const</span> reg7=<span class="hljs-regexp">/^(abc|def)$/</span>; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;def&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc1233&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1233def&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-keyword">const</span> reg7=<span class="hljs-regexp">/^ab(c|d)ef$/</span>;  <span class="hljs-comment">//表示的是字符串开头马上跟ab中间跟c或者d都可以，然后跟个ef字符串结尾</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;def&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1233def&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcef&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg7.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abdef&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li><p>[] 中括号</p><p>注意：一个[]占一个字符位置，表示里面任意一个都行</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg9=<span class="hljs-regexp">/^[abcd]$/</span>; <span class="hljs-comment">//表示整个字符串只能由一个字符组成，可以是a b c d的任意一个</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg9.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">const</span> reg7=<span class="hljs-regexp">/^[0-255]$/</span>;<span class="hljs-comment">// 表示的是 一个字符位置，可以0到2，或者 5 ，或者 5；</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;0&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;2&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;5&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;3&#x27;</span>));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ul><li>[^]         一个[^]占一个字符位置 ，表示非里面的任意一个都行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span>  reg6=<span class="hljs-regexp">/^[^abcd]$/</span>; <span class="hljs-comment">//表示你的字符串要由一份字符组成，只要不是a b c d中的任意一个就可以</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111111</span>,reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2222</span>,reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><ul><li>表示至 或者到的意思，是使用在[]里面的一个符号，表示从哪一个字符到哪一个字符，前提是他们在ASCII码是连着的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span>  reg=<span class="hljs-regexp">/^[0-9]$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;0&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;2&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;3&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-keyword">const</span>  reg2=<span class="hljs-regexp">/^[a-z]$/</span>;<span class="hljs-comment">//表示小写a 到小写z </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;z&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;Z&#x27;</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-keyword">const</span>  reg3=<span class="hljs-regexp">/^[A-Z]$/</span>;<span class="hljs-comment">//表示大写a 到小写z </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;z&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;Z&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>常见的组合形式</p><ul><li><p>[0-9a-zA-Z_]       等价于 \w  (小写w)</p></li><li><p>[^0-9a-zA-Z_]     等价于 \W (大写W)</p></li><li><p>[0-9]                    等价于    \d</p></li><li><p>[^0-9]                  等价于  \D</p><p>[ ]   中括号里一个空格 等价于 \s</p><p>[^ ]   中括号里一个^加一个空格 等价于 \S</p></li></ul><p>特殊说明 </p><p>当点（.）出现在 []或者 [^]里面的时候表示一个点文本而不再表示非换行的任意字符了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg4=<span class="hljs-regexp">/[123.]/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;2&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;3&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;.&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>小练习</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg5=<span class="hljs-regexp">/^(abc|def)&#123;2&#125;$/</span>; <span class="hljs-comment">//()圈起来一个整体，这个整体是abc 或者 def都性，&#123;2&#125;表示整体出现两次，只要有两个整体就可以，不论两次是不是一样</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcabc&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;defdef&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdef&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;defabc&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//需求：验证一个字符串，只能由数字字母下划线组成，6到12位，不能以_开头</span><br><span class="hljs-keyword">const</span> reg6=<span class="hljs-regexp">/^[a-zA-Z0-9]\w&#123;5,11&#125;$/</span>;  <span class="hljs-comment">//正确答案</span><br><span class="hljs-keyword">const</span> reg7=<span class="hljs-regexp">/^[^_]\w&#123;5,11&#125;$/</span>;<span class="hljs-comment">//这样不对，因为第一位只是控制了非_,但是没有控制是其他的特殊符号</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111111</span>,reg6.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;_ffffasd&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2222</span>,reg6.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1ffffasd&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">需求：正则验证数字范围 <span class="hljs-number">0</span>～<span class="hljs-number">255</span>    <br>思路：<br>把 <span class="hljs-number">0</span>～<span class="hljs-number">255</span> 的数字分成几类<br>一位数                     \d  表示数字<span class="hljs-number">0</span>到<span class="hljs-number">9</span><br>两位数        \d&#123;<span class="hljs-number">2</span>&#125;  <span class="hljs-number">10</span> ~<span class="hljs-number">99</span><br><span class="hljs-number">1</span>开头的三位数               <span class="hljs-number">1</span>\d&#123;<span class="hljs-number">2</span>&#125; <br><span class="hljs-number">2</span>开头 <span class="hljs-number">0</span>～<span class="hljs-number">4</span>的三位数          <span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d<br><span class="hljs-number">2</span>开头 <span class="hljs-number">5</span>的三位数             <span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]<br>正则：<br>/^(\d｜\d&#123;<span class="hljs-number">2</span>&#125;|<span class="hljs-number">1</span>\d&#123;<span class="hljs-number">2</span>&#125;)|<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d|<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])$/<br><span class="hljs-regexp">/^(\d&#123;1,2&#125;|1\d&#123;2&#125;|2[0-4]\d|25[0-5])$/</span>   将上面的简化为下面的值<br>  /^(<span class="hljs-number">1</span>?\d&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;|<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d|<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])$/       <span class="hljs-number">1</span>有没有都行，后面带一位数或者两位数<br>  <br>  <br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^(1?\d&#123;1,2&#125;|2[0-4]\d|25[0-5])$/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;9&#x27;</span>));  <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;199&#x27;</span>));  <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;245&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;255&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;256&#x27;</span>)); <span class="hljs-comment">//false</span><br><br><br><span class="hljs-comment">//正则验证数字是一件很复杂的事情，验证数字一般不用正则我们可以直接使用 比较运算符来验证</span><br></code></pre></td></tr></table></figure><h5 id="正则表达式的预查"><a href="#正则表达式的预查" class="headerlink" title="正则表达式的预查"></a>正则表达式的预查</h5><ul><li><p>正向预查</p><ul><li><p>正向肯定预查</p><p>当我在捕获一个内容的时候，后面必须跟着是我选择的某一个才可以</p><p>符号：  （?&#x3D;）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//例子： ES2015  ES2016 ES2017 都是js的语法标准，正向肯定预查：我要捕获 后面必须写着 2015 或者 2016 的ES</span><br><br><span class="hljs-comment">//正向肯定预查 字符串是ES205 或者 ES2016 是可以捕获的，但是我只捕获ES 不需要 2015 或者 2016</span><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/ES(?=2015|2016)/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;ES2015&#x27;</span>));  <br><span class="hljs-comment">//[&#x27;ES&#x27;, index: 0, input: &#x27;ES2015&#x27;, groups: undefined]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;ES2016&#x27;</span>));<br><span class="hljs-comment">//[&#x27;ES&#x27;, index: 0, input: &#x27;ES2016&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure></li><li><p>正向否定预查</p><p>当我在捕获一个内容的时候，后面必须跟着不是我选择的某一个才可以</p><p>符号： （?!）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//正向否定预查 我只捕获ES 后面跟着的不是 2015 或者 2016</span><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/ES(?!2015|2016)/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;ES2015&#x27;</span>)); <span class="hljs-comment">//null 捕获不到</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;ES2016&#x27;</span>)); <span class="hljs-comment">//null 捕获不到</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;ES2017&#x27;</span>));<br> <span class="hljs-comment">//[&#x27;ES&#x27;, index: 0, input: &#x27;ES2017&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>负向预查</p><ul><li><p>负向肯定预查</p><p>当我在捕获一个内容的时候，前面必须是我选择的某一个才可以</p><p>符号： （?&lt;&#x3D;）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/(?&lt;=2015|2016)ES/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;2015ES&#x27;</span>)); <br><span class="hljs-comment">//[&#x27;ES&#x27;, index: 4, input: &#x27;2015ES&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;2016ES&#x27;</span>)); <br><span class="hljs-comment">//[&#x27;ES&#x27;, index: 4, input: &#x27;2016ES&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;2017ES&#x27;</span>));<br><span class="hljs-comment">//nulljs</span><br></code></pre></td></tr></table></figure></li><li><p>负向否定预查</p><p>当我在捕获一个内容的时候，前面必须不是我选择的某一个才可以</p><p>符号：（?&lt;!）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/(?&lt;!2015|2016)ES/</span>;  <span class="hljs-comment">//我还是要2015，但是前面的不能跟着2015 或者 2016 ，其他的都可以</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;2015ES&#x27;</span>)); <br><span class="hljs-comment">//null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;2016ES&#x27;</span>)); <br><span class="hljs-comment">//null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;2017ES&#x27;</span>));<br><span class="hljs-comment">////[&#x27;ES&#x27;, index: 4, input: &#x27;2017ES&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="重复出现-唯一可能出现的面试题"><a href="#重复出现-唯一可能出现的面试题" class="headerlink" title="重复出现  唯一可能出现的面试题"></a>重复出现  唯一可能出现的面试题</h5><ul><li><p>\num  </p><p>num是一个正整数； \1 \2 \3</p><p>num是一个数字，表示的是正则第num个可被捕获的小括号（），这个可被捕获的小括号位置是什么 出现一份一模一样的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/(abc|def)\d+/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc123&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;def1234&#x27;</span>)); <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/(abc|def)\d+\1/</span>; <span class="hljs-comment">//  \1表示重复出现第一个() 一模一样的内容一遍</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc123&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;def1234&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc123abc&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abc123def&#x27;</span>))<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;def123def&#x27;</span>))<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/[abcd]\d+[abcd]\d+/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a123b123&#x27;</span>)); <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/([abcd])\d+[abcd]\d+\1/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a123b123&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a123b123a&#x27;</span>));<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">const</span> reg3=<span class="hljs-regexp">/([abcd])\d+([abcd])\d+\1\2/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a123b123ab&#x27;</span>));<span class="hljs-comment">//true \1表示和第一个小括号的内容一样，\2表示和第二个小括号的内容一样</span><br><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/(?:[abcd])\d+([abcd])\d+\1/</span>; <span class="hljs-comment">// \1 表示和第一个可被捕获的小括号一样，?:表示匹配但不捕获，所以重复的是第二个小括号里的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a123b123a&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a123b123b&#x27;</span>));<span class="hljs-comment">//true  </span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d&#123;2,4&#125;/</span>;<span class="hljs-comment">//表示字符串里有2到4个连着的字符就可以</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1&#x27;</span>));<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;12&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;123&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;1234&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;12345&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;123456&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* </span><br><span class="hljs-comment">需求验证一个邮箱</span><br><span class="hljs-comment">- 名字：9到15位，不能以_开头，只能由数字字母下划线组成</span><br><span class="hljs-comment">  只能是qq 163 sina邮箱</span><br><span class="hljs-comment">  后缀只能是 .com 或者 .cn</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^[0-9a-zA-Z]\w&#123;8,14&#125;@(qq|163|sina)\.(com|cn)$/</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;340144299@qq.com&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* </span><br><span class="hljs-comment">需求：</span><br><span class="hljs-comment">        我要能拿到手机号的运营商（通过手机号前3位的号端来判断运营商）</span><br><span class="hljs-comment">        +86有可能有有可能没有</span><br><span class="hljs-comment">        需要一个完整的手机号</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        我的手机号是18737165345，我的生日是19890903</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^(?:\+86 ?)?((187|185)\d&#123;8&#125;)$/</span>;<br><span class="hljs-comment">//? 有可能有，有可能没有，?: 匹配但不捕获  ()小括号单独捕获</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;18737165345&#x27;</span>));<br><span class="hljs-comment">// [&#x27;18737165345&#x27;, &#x27;18737165345&#x27;, &#x27;187&#x27;, index: 0, input: &#x27;18737165345&#x27;, groups: undefined]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;+86 18737165345&#x27;</span>));<br><span class="hljs-comment">//[&#x27;+86 18737165345&#x27;, &#x27;18737165345&#x27;, &#x27;187&#x27;, index: 0, input: &#x27;+86 18737165345&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;+8618737165345&#x27;</span>));<br><span class="hljs-comment">//[&#x27;+8618737165345&#x27;, &#x27;18737165345&#x27;, &#x27;187&#x27;, index: 0, input: &#x27;+8618737165345&#x27;, groups: undefined] </span><br><br><br><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/(?:\+86 )?((187|185)\d&#123;8&#125;)/</span>;<br><span class="hljs-comment">//有时捕获是在一段文本里拿，所以不要开头 结尾 ^$</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;我的手机号是：18737165345&#x27;</span>));<span class="hljs-comment">//null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;我的手机号是：18737165345&#x27;</span>));<br><span class="hljs-comment">//[&#x27;18737165345&#x27;, &#x27;18737165345&#x27;, &#x27;187&#x27;, index: 7, input: &#x27;我的手机号是：18737165345&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure><h5 id="正则表达式的标识符"><a href="#正则表达式的标识符" class="headerlink" title="正则表达式的标识符"></a>正则表达式的标识符</h5><p>标志符是写在正则表达式外面，用来修饰整个正则表达式的</p><p>标识符：</p><ul><li>i   忽略大小写</li><li>g 全局</li><li>粘性全局</li></ul><p>语法：&#x2F;abcd&#x2F;igy</p><p>​         new RegExp(‘abcd’,’igy’)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//----  is</span><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^[abcd]*$/</span>;<span class="hljs-comment">// * 为0到多个 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdA&#x27;</span>));<span class="hljs-comment">//fasle</span><br><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/^[abcd]*$/i</span>;  <span class="hljs-comment">//i 忽略大小写</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcdA&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-----  g 全局</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 匹配和捕获的时候，都是只能找到第一个</span><br><span class="hljs-comment"> 当他又全局标识符的时候，你捕获的第二次会从第一次结束的位置开始查找</span><br><span class="hljs-comment"> 直到找不到了返回null</span><br><span class="hljs-comment"> 再后面一次的时候，又回到索引[0]的位置开始捕获</span><br><span class="hljs-comment"> 匹配和捕获都是影响下一次开始位的</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">const</span> str=<span class="hljs-string">&#x27;abc123abc456qbc789abc&#x27;</span>;<br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d&#123;3&#125;/</span>;<span class="hljs-comment">//在捕获的时候，不论执行多少遍都只能捕获到第一个</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-comment">//捕获三次拿到的都是123 [&#x27;123&#x27;, index: 3, input: &#x27;abc123abc456qbc789abc&#x27;, groups: undefined]</span><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/\d&#123;3&#125;/g</span>;<br><span class="hljs-comment">//当有全局标识符，你捕获第二次的时候会从第一次的结束为开始查找</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-comment">//结束为是索引[5]   </span><br><span class="hljs-comment">//[&#x27;123&#x27;, index: 3, input: &#x27;abc123abc456qbc789abc&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-comment">//查找的开始位是索引[6] ，捕获到的开始位是[9] ,捕获到的结束位是[11]  </span><br><span class="hljs-comment">//[&#x27;456&#x27;, index: 9, input: &#x27;abc123abc456qbc789abc&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-comment">//第三次查找的开始位是索引[12] 捕获到的开始位是[15] ,捕获到的结束位是[17]</span><br><span class="hljs-comment">//[&#x27;789&#x27;, index: 15, input: &#x27;abc123abc456qbc789abc&#x27;, groups: undefined]</span><br><span class="hljs-comment">//直到找不到了，返回null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-comment">//查找开始位是18，找不到了就返回null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(str));<br><span class="hljs-comment">//再后面一次的捕获，又回到索引[0]位置开始捕获</span><br><span class="hljs-comment">//g的匹配和捕获都是影响开始位的</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//------ y 粘性全局</span><br><span class="hljs-keyword">const</span> str=<span class="hljs-string">&#x27;abc123abc456qbc789abc&#x27;</span>;<br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/\d&#123;3&#125;/g</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(str)); <span class="hljs-comment">//g 123</span><br><span class="hljs-keyword">const</span> reg3=<span class="hljs-regexp">/\d&#123;3&#125;/y</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">exec</span>(str)); <span class="hljs-comment">//null </span><br><span class="hljs-comment">//粘性捕获的时候 第一次必须是从索引位0的位置就刚好能捕获到内容 ，第二次必须是从第一次结束位开始就刚好能捕获到内容才可以</span><br><br><br><span class="hljs-keyword">const</span> str2=<span class="hljs-string">&#x27;123456789abc&#x27;</span>;<br><span class="hljs-keyword">const</span> reg2=<span class="hljs-regexp">/\d&#123;3&#125;/y</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(str2));<br><span class="hljs-comment">//[&#x27;123&#x27;, index: 0, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">exec</span>(str2));<br><span class="hljs-comment">//[&#x27;456&#x27;, index: 3, input: &#x27;123456789abc&#x27;, groups: undefined]</span><br></code></pre></td></tr></table></figure><h5 id="两种创建正则表达式的区别"><a href="#两种创建正则表达式的区别" class="headerlink" title="两种创建正则表达式的区别"></a>两种创建正则表达式的区别</h5><ul><li><p>字面量创建正则表达式</p><p> 语法：var reg&#x3D;&#x2F;abcd&#x2F;igy;</p><p>区别：1不能进行字符串的拼接</p><p>​         2 在书写基础元字符的时候直接写\xx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-------------1不能进行字符串的拼接</span><br><span class="hljs-comment">//验证字符串good</span><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/good/</span>;<span class="hljs-comment">//验证字符串good,只能这样写，不能使用变量</span><br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;good&#x27;</span>;<br><span class="hljs-keyword">const</span> reg2=<span class="hljs-string">&#x27;/&#x27;</span>+str+<span class="hljs-string">&#x27;/&#x27;</span>;<span class="hljs-comment">//这样得到的是字符串‘good’而不是正则，不能使用正则的test 和 exec 方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-------------在书写基础元字符的时候直接写\xx</span><br><span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/\d\s\w/</span>;<span class="hljs-comment">//得到正则 /\d\s\w/</span><br></code></pre></td></tr></table></figure></li><li><p>内置构造函数创建正则</p><p>语法：var reg&#x3D;new RegExp(‘abcd’,’igy’);</p><p>区别 ：1 可以进行字符串的拼接</p><p>​ 2 在书写基础元字符的时候要写 \\xx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-------1 可以进行字符串的拼接</span><br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;good&#x27;</span>;<br><span class="hljs-keyword">const</span> reg2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(str);<span class="hljs-comment">//返回正则 /good/</span><br><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;go&#x27;</span>+<span class="hljs-string">&#x27;od&#x27;</span>);<span class="hljs-comment">//返回正则 /good/</span><br><br><span class="hljs-comment">//这是因为该构造函数的第一参数就是要传一个字符串，我们使用变量或者使用字符串的拼接操作</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//------在书写基础元字符的时候要写 \\\xx</span><br><span class="hljs-keyword">const</span> reg2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\s\d\w&#x27;</span>);<span class="hljs-comment">//得到正则 /sdw/</span><br><span class="hljs-comment">//这是因为在字符串里也有转义字符，也是\ ,比如当在书写n的时候，表示文本 n ，当在书写\n的时候，表示换行的意思，当你在字符串里书写\s的时候，他会把s转换成有意义的内容，但是\s确实没有实际意义，所以就变成一个普通s文本  在字符串里就是一个普通的s文本</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;\s&#x27;</span>);<span class="hljs-comment">//s s </span><br><span class="hljs-comment">//所以我们的正则应该这样写</span><br><span class="hljs-keyword">const</span> reg3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\\s\\d\\w&#x27;</span>);<span class="hljs-regexp">/得到正则 /</span>\s\d\w/<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//练习1</span><br><span class="hljs-comment">//捕获一个字符串里面所有三位数</span><br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;dssdf123sdghf456hadsjf789adsf&#x27;</span><br><span class="hljs-comment">//结果是 123 456 789</span><br><span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/\d&#123;3&#125;/g</span>;<br><span class="hljs-comment">//先捕获一次看看能不能捕获到，返回null则说明一次都没有，不为null则是可以捕获到得到，则将捕获到的数据放到一个数组里，再进行下一次捕获</span><br><span class="hljs-keyword">var</span> tmp=reg.<span class="hljs-title function_">exec</span>(str);<br><span class="hljs-keyword">var</span> res=[];<span class="hljs-comment">//准备一个空的数组存贮捕获到到的数据</span><br><span class="hljs-keyword">while</span>(tmp)&#123;<br>    res.<span class="hljs-title function_">push</span>(tmp[<span class="hljs-number">0</span>])<br>    tmp=reg.<span class="hljs-title function_">exec</span>(str);<span class="hljs-comment">//进行下一次捕获，重新给tmp赋值，好进行下一次的判断</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<span class="hljs-comment">//[&#x27;123&#x27;, &#x27;456&#x27;, &#x27;789&#x27;]</span><br><br><br></code></pre></td></tr></table></figure><h5 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h5><p>字符串和正则合作的方法这些方法都是字符串的方法，只不过参数位置可以写正则</p><ul><li><p>字符串对象的search方法，返回第一个满足条件的匹配结果在整个字符串中的位置，如果没有任何匹配，则返回-1</p><p>语法：<br>  字符串.search(字符串片段)<br>  字符串.search(正则表达式)<br>返回值：如果有就是对应的索引，如果没有就是返回-1</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;_x_x&#x27;</span>.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/x/</span>);<span class="hljs-comment">//1</span><br><span class="hljs-string">&#x27;sdfs123sddd&#x27;</span>.<span class="hljs-title function_">search</span>(<span class="hljs-string">&#x27;123&#x27;</span>);<br><span class="hljs-string">&#x27;sdfs123sddd&#x27;</span>.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/\d&#123;3&#125;/</span>);<br></code></pre></td></tr></table></figure><ul><li><p>字符串对象的replace方法可以替换匹配的值，他接受两个参数，第一个是正则表达式，表示所有模式，第二个是替换掉内容</p><p>语法：<br> 字符串.replace(字符串片段，要替换的内容)<br>    返回值：只能替换第一个查找到的内容，返回替换好的字符串<br> 字符串.replace(正则表达式，要替换的内容)<br>    返回值：没有全局标识符g的时候，只能替换第一个查找到的内容，返回替换好的字符串，有全局标识符时候，会把字符串内所有满足正则规则的内容全部替换，返回替换好的字符串</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;aaa&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<span class="hljs-comment">//&#x27;baa&#x27;</span><br><span class="hljs-string">&#x27;aaa&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/a/</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<span class="hljs-comment">//&#x27;baa&#x27; </span><br><span class="hljs-string">&#x27;aaa&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/a/g</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<span class="hljs-comment">//&#x27;bbb&#x27; 全局替换</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">//练习2</span><br><span class="hljs-comment">//全部替换字符串内的三位数为**</span><br><span class="hljs-comment">//一旦你有了全局表示符g直接使用replace即可</span><br><br><br><br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;dssdf123sdghf456hadsjf789adsf&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\d&#123;3&#125;/g</span>,<span class="hljs-string">&#x27;**&#x27;</span>));<span class="hljs-comment">//dssdf**sdghf**hadsjf**adsf 不会修改原字符串</span><br></code></pre></td></tr></table></figure><ul><li><p>match()</p><p>语法：字符串.match(字符串片段)；</p><p>​返回值：查找到字符串内一个满足字符串片段的内容返回，返回格式和exec一模一样</p><p>​            字符串.match(正则表达式)；</p><p>​返回值：当正则表达式没有全局标识符g的时候，返回值和exec方法一模一样</p><p>​                           当正则表达式有全局标识符g的时候，返回一个数组，里面是所有满足条件的内容</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> newStr=<span class="hljs-string">&#x27;hello word 你好 hello word 你好hello word 你好hello word 你好&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStr.<span class="hljs-title function_">match</span>(<span class="hljs-string">&#x27;你好&#x27;</span>));<br><span class="hljs-comment">//[&#x27;你好&#x27;, index: 11, input: &#x27;hello word 你好 hello word 你好hello word 你好hello word 你好&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStr.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/你好/</span>));<br><span class="hljs-comment">//[&#x27;你好&#x27;, index: 11, input: &#x27;hello word 你好 hello word 你好hello word 你好hello word 你好&#x27;, groups: undefined]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStr.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/你好/g</span>));<br><span class="hljs-comment">//[&#x27;你好&#x27;, &#x27;你好&#x27;, &#x27;你好&#x27;, &#x27;你好</span><br><br><span class="hljs-comment">//---匹配中文</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStr.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[\u4e00-\u9fa5]/g</span>));<br><span class="hljs-comment">//[&#x27;你&#x27;, &#x27;好&#x27;, &#x27;你&#x27;, &#x27;好&#x27;, &#x27;你&#x27;, &#x27;好&#x27;, &#x27;你&#x27;, &#x27;好&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStr.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[\u4e00-\u9fa5]+/g</span>));  <span class="hljs-comment">//+表示一次到多次</span><br><span class="hljs-comment">//[&#x27;你好&#x27;, &#x27;你好&#x27;, &#x27;你好&#x27;, &#x27;你好&#x27;]</span><br></code></pre></td></tr></table></figure><ul><li><p>正则匹配中文</p><p>在正则表达式里面\u 表示查找中文，后面要带上中文的四位 unicode编码。但是我们不知道每一个中文的所对应的unicode编码，所以我们可以些一个范围</p><p>[\u4e00-\u9fa5] 表示任意一个中文字符</p></li></ul><h5 id="案例：表单验证"><a href="#案例：表单验证" class="headerlink" title="案例：表单验证"></a>案例：表单验证</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs html">//需求<br>        /* <br>        表单验证：<br>        随着用户的输入，随时进行表单验证<br>        文本框右侧有一个字体图标，用户输入满足条件时显示对勾，否则显示叉(学生写)<br>        文本框下显示用户输入的规则：非下划线开头，只能由数字字母下划线组成，6～8位<br>        有一段文本提示，当不满足的时候显示的文本内容为红色<br>        <br>        <br>        */                                                                  <br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">color</span>: <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">      &#125;  </span><br><span class="language-css">      <span class="hljs-selector-class">.errColor</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.levelSpan</span>&#123;</span><br><span class="language-css">         <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">         <span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">         </span><br><span class="language-css">     &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.levelSpan</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)<span class="hljs-selector-class">.action</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>:red;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.levelSpan</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)<span class="hljs-selector-class">.action</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>:yellow;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.levelSpan</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>)<span class="hljs-selector-class">.action</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>:green;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>        姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;textWarn&quot;</span>&gt;</span>姓名非下划线开头，只能由数字字母下划线组成，6～12位组成<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> &gt;</span><br>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mmText&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;levelSpan&quot;</span>&gt;</span>弱<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;levelSpan&quot;</span>&gt;</span>中<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;levelSpan&quot;</span>&gt;</span>强<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        表单验证：</span></span><br><span class="hljs-comment"><span class="language-javascript">        随着用户的输入，随时进行表单验证</span></span><br><span class="hljs-comment"><span class="language-javascript">        文本框右侧有一个字体图标，用户输入满足条件时显示对勾，否则显示叉(学生写)</span></span><br><span class="hljs-comment"><span class="language-javascript">        文本框下显示用户输入的规则：非下划线开头，只能由数字字母下划线组成，6～8位</span></span><br><span class="hljs-comment"><span class="language-javascript">        有一段文本提示，当不满足的时候显示的文本内容为红色</span></span><br><span class="hljs-comment"><span class="language-javascript">        </span></span><br><span class="hljs-comment"><span class="language-javascript">        </span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> timer=<span class="hljs-number">0</span>;</span><br><span class="language-javascript">       <span class="hljs-comment">//给姓名输入框绑定事件</span></span><br><span class="language-javascript">      userName.<span class="hljs-property">oninput</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> reg=<span class="hljs-regexp">/^[0-9a-zA-Z]\w&#123;5,7&#125;$/</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(reg.test(userName.value))</span></span><br><span class="language-javascript">            <span class="hljs-built_in">clearTimeout</span>(timer)</span><br><span class="language-javascript">            <span class="hljs-comment">//防抖，设置一个定时器</span></span><br><span class="language-javascript">            timer=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(reg.<span class="hljs-title function_">test</span>(userName.<span class="hljs-property">value</span>))&#123;</span><br><span class="language-javascript">                    textWarn.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;errColor&#x27;</span>)</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    textWarn.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;errColor&#x27;</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,<span class="hljs-number">300</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">       <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">        </span></span><br><span class="hljs-comment"><span class="language-javascript">            一个密码强度验证</span></span><br><span class="hljs-comment"><span class="language-javascript">            假定三个内容</span></span><br><span class="hljs-comment"><span class="language-javascript">            - 数字</span></span><br><span class="hljs-comment"><span class="language-javascript">            - 字母</span></span><br><span class="hljs-comment"><span class="language-javascript">            - 特殊符号 ‘@#%’</span></span><br><span class="hljs-comment"><span class="language-javascript">            当密码由三个之中的任意一个，强度就是 弱</span></span><br><span class="hljs-comment"><span class="language-javascript">            当密码由三个之中的任意两个，强度就是 中</span></span><br><span class="hljs-comment"><span class="language-javascript">            当密码由三个之中的任意三个，强度就是 强</span></span><br><span class="hljs-comment"><span class="language-javascript">                                                                                                                                                                           </span></span><br><span class="hljs-comment"><span class="language-javascript">            分析：准备正则</span></span><br><span class="hljs-comment"><span class="language-javascript">            准备三个正则，分别判断 数字 字母 特殊符号</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript">    <span class="hljs-comment">//    获取等级的spn</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> levelSpan=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.levelSpan&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----&#x27;</span>,levelSpan)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        mmText.<span class="hljs-property">oninput</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//在事件的一开始，分别将3个span标签的action类型去掉</span></span><br><span class="language-javascript">            levelSpan.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>)=&gt;</span>&#123;</span><br><span class="language-javascript">                item.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;action&#x27;</span>)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            <span class="hljs-comment">//准备正则 分别验证密码</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> numReg=<span class="hljs-regexp">/\d+/</span>;<span class="hljs-comment">//+ 一到多个</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> ziMuReg=<span class="hljs-regexp">/[a-z]/i</span>;<span class="hljs-comment">//i 表示不区分大小写</span></span><br><span class="language-javascript">            <span class="hljs-comment">//const fuhaoReg=/[@#%\$]/</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> fuhaoReg = <span class="hljs-regexp">/[\W_]/</span></span><br><span class="language-javascript">            <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-javascript">             设置一个私有变量，写在函数里面，初始值为0，表示你的每一次书写都会把level变成0</span></span><br><span class="hljs-comment"><span class="language-javascript">            </span></span><br><span class="hljs-comment"><span class="language-javascript">            */</span></span><br><span class="language-javascript">           <span class="hljs-keyword">var</span> numInt=<span class="hljs-number">0</span>;</span><br><span class="language-javascript">           <span class="hljs-comment">//依次使用3个正则验证，满足一次就++ 一次，三个都判断完毕就能直接得到level等级</span></span><br><span class="language-javascript">           <span class="hljs-keyword">if</span>(numReg.<span class="hljs-title function_">test</span>(mmText.<span class="hljs-property">value</span>)) numInt++;</span><br><span class="language-javascript">           <span class="hljs-keyword">if</span>(ziMuReg.<span class="hljs-title function_">test</span>(mmText.<span class="hljs-property">value</span>)) numInt++;</span><br><span class="language-javascript">           <span class="hljs-keyword">if</span>(fuhaoReg.<span class="hljs-title function_">test</span>(mmText.<span class="hljs-property">value</span>)) numInt++;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;密码强度等级--&#x27;</span>,numInt)</span><br><span class="language-javascript">            <span class="hljs-comment">//获取到密码的级别登记后给相应等级的span标签添加action类</span></span><br><span class="language-javascript">           </span><br><span class="language-javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;numInt;i++)&#123;</span><br><span class="language-javascript">                levelSpan[i].<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;action&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="js的组成"><a href="#js的组成" class="headerlink" title="js的组成"></a>js的组成</h2><h3 id="javascript-组成"><a href="#javascript-组成" class="headerlink" title="javascript 组成"></a>javascript 组成</h3><ul><li><p>ECMAScript ：js语法，js基础  我们学习的是ECMAScript标准规定的基本语法，无法实现页面交互效果</p></li><li><p>DOM 页面对象模型</p></li><li><p>BOM：浏览器对象模型</p><p>DOM和BOM是web APIs，web APIs是W3C组织的标准</p></li></ul><h3 id="API与Web-APIs"><a href="#API与Web-APIs" class="headerlink" title="API与Web APIs"></a>API与Web APIs</h3><ul><li><p>api就是给程序员提供的一种工具，以便能更轻松的实现想要的完成的功能，而又无需了解源码或内部工作机制的细节，直接使用即可</p></li><li><p>Web APIs是浏览器提供的一套操作浏览器功能和页面元素的api（DOM和BOM）</p></li><li><p>web API很多都是方法（函数），一般都有输入和输出（函数的传参和返回值）</p></li></ul><p>学习web Api可以结合前面学习内置对象方法的思路学习</p><p>案例：网上查看详细的api</p><p>js时针案例：</p><p><a href="https://baijiahao.baidu.com/s?id=1672202857658257853&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1672202857658257853&amp;wfr=spider&amp;for=pc</a></p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM，全称是Document Object Model文档对象模型，是w3c推荐的处理html的标准编程接口。</p><p>js是通过一系列DOM接口来对html文档进行操作的，可以改变网页的内容，结构和样式</p><p>一套操作页面元素的属性和方法</p><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p>dom是一个以树状结构存在的内容，dom的顶级是Document表示当前文档，因为在pc端的文档是插入浏览器里运行的，所以在pc端，document上面还有一个window</p><p>操作dom，从document，各种标签，文本，属性，样式的操作</p><p>window下有一个document对不对？ 答案对</p><p>在手机端document上不一定是window，比如在微信里是wechat，但是window下有一个document是一定的</p><p>看dom树图片</p><ul><li><p>文档：一个html网页就是一份文档，在DOM中使用document表示</p></li><li><p>元素：html文档中的所有标签都是元素，DOM中使用element表示</p></li><li><p>节点：网页中的所有内容都是节点（标签，属性，文本，注释等），在DOM中节点使用node表示</p><p>节点是构成html文档的最基本的单元，网页中的每一个部分都可以称为是一个节点，</p><p>比如：html标签（元素），属性，文本，注释，整个文档都是一个节点</p><p>根据节点的类型不同，对节点进行了分类：比如标签是元素节点，属性是属性节点，文本是文本节点（空格换行也是文本节点），文档是文档节点</p><p>js中常用的节点分类</p><ul><li><p>文档节点：一个html网页就是一个文档，在DOM中使用document表示</p><p>document是页面中最大的节点，只能有一个，是承载所有节点的容器，不属于元素，根节点</p></li><li><p>元素节点：html文档中的所有标签都是元素节点</p><ul><li><p>html是一个页面中最大的元素节点，承载所有其他节点，是根元素节点</p></li><li><p>其他元素节点：</p><p>head body div p ul table…都是元素节点，只是不同的标签在页面中表现形式不一样</p></li></ul></li><li><p>属性节点：元素的属性</p><p>属性节点不作为独立节点出现，必须依赖于元素，没有元素，属性节点就是文本</p></li><li><p>文本节点：html标签中的文本内容 </p><p>每一段文本内容都是一个文本节点，包含空格和换行</p><p>一般作为元素节点的子节点存在，用来表示该元素节点在页面上显示的内容</p></li><li><p>注释节点：页面中书写的注释内容</p><p>作为独立节点出现，作为说明文本使用</p></li></ul></li><li><p>对象：DOM把文档，元素，节点都转换为一个对象</p></li><li><p>模型：使用模型来表示对象之间的关系，这样可以方便我来获取对象（dom树）</p></li><li><p>我们获取过来的DOM元素是一个对象，所以称为文档对象模型</p></li></ul><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><h5 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h5><p>​作用 ：用来描述这个节点的信息，相同类型的不同节点，有相同的属性名，但是值不一样</p><ul><li><p>节点的类型不同，属性和方法也都不尽相同，一般节点至少拥有nodeType（节点类型），nodeName（节点名），nodeValue（节点值）这三个基本属性</p><ul><li><p>文档节点</p><ul><li>节点名（nodeName）为#document</li><li>节点类型（nodeType）为9</li><li>节点值（nodeValue）为null</li></ul></li><li><p>元素节点</p><ul><li>节点名（nodeName）为大写标签名（全大写）</li><li>节点类型（nodeType）为1</li><li>节点值（nodeValue）为null</li></ul></li><li><p>属性节点</p><ul><li>节点名（nodeName）为属性名</li><li>节点类型（nodeType）为2</li><li>节点值（nodeValue）为属性值</li></ul></li><li><p>文本节点</p><ul><li><p>节点名（nodeName）：所有文本节点的名称全部为：  #text</p></li><li><p>节点类型（nodeType）为3</p></li><li><p>节点值（nodeValue）为<strong>文本内容</strong>（包括文字，空格和换行）</p></li></ul></li><li><p>注释节点</p><ul><li>节点名：所有注释节点的名称都为  #comment</li><li>节点类型（nodeType）为8</li><li>节点值：注释内容 （包含换行和空格）</li></ul></li></ul><p>在实际开发中，节点操作主要操作的是元素节点</p></li></ul><h5 id="节点操作："><a href="#节点操作：" class="headerlink" title="节点操作："></a>节点操作：</h5><p>不光操作元素还要操作 注释节点，文本节点，属性节点</p><p>获取节点（获取元素节点，文本节点，属性节点等…）</p><p>创建节点：通过js的语法来创建一个标签，文本，注释等</p><p>插入节点：把创建的节点插入到另一个节点，出现父子结构</p><p>删除节点：把一个已经存在的节点删除</p><p>替换节点：使用创建的节点去替换一个已经存在的节点</p><p>克隆节点：把一个已经存在的节点复制一份一模一样的</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>事件就是用户和文档或浏览器窗口中发生的交互行为，比如点击按钮，鼠标移动，按下键盘上的某个键，关闭窗口，简单的理解：触发响应机制</li><li>html和js之间的交互是通过事件实现的,事件是可以被js侦测到的行为</li></ul><h4 id="事件是由三部分组成的（事件三要素）-："><a href="#事件是由三部分组成的（事件三要素）-：" class="headerlink" title="事件是由三部分组成的（事件三要素） ："></a>事件是由三部分组成的（事件三要素） ：</h4><p>事件源，事件类型，事件处理函数（程序）</p><ul><li><p>事件源：   在谁身上绑定事件   比如：按钮</p></li><li><p>事件类型，如何触发，什么事件，比如：鼠标点击事件（click）鼠标经过事件  </p><p>on是绑定事件的方式 onclick</p></li><li><p>事件处理函数（程序）：当行为发生的时候，执行哪一个函数。通过一个函数赋值的方式 </p></li><li><p>执行事件是的步骤：1:获取事件源     2:注册（绑定）事件  3:添加事件处理程序（采用函数赋值的形式）</p></li></ul><h3 id="事件注册的方式"><a href="#事件注册的方式" class="headerlink" title="事件注册的方式"></a>事件注册的方式</h3><p>事件注册&#x2F;事件绑定：即给元素添加事件</p><p>事件注册的两种方式：传统方式  和 事件监听注册方式</p><hr><ul><li><p>传统注册事件的方式：利用on开头的事件    此方法没有兼容性问题</p></li><li><p>特点：</p><p>​注册事件的唯一性，同一个元素的同一个事件只能设置一个事件处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p><p>​因为传统方式的注册事件实际是赋值的行为</p></li><li><p>采用传统注册事件的方式注册事件时的绑定方式</p><ul><li>1我们可以开始标签中通过事件对应的事件属性设置一些js代码来绑定事件，这样当事件被触发时这些代码就会执行</li></ul></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;button <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;今天天气很不错&#x27;);&quot;</span>&gt;普通按钮&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>onclik是鼠标点击时元素时触发</p><p>这种通过在标签上设置事件属性来执行代码的写法不符合结构，表现，分为相分离的原则，结构和行为耦合，不方便维护，不推荐使用</p><p>​-  2:在js中获取对象，通过对对象的指定属性(onclick是元素的一个属性)绑定回调函数的形式来响应事件，这样当事件触发时其对应的函数将会被调用    </p><pre><code class="hljs">     格式：事件源.事件类型=事件处理程序</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;id属性的属性值&#x27;</span>);   <span class="hljs-comment">//获取按钮对象</span><br>btn.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;       <span class="hljs-comment">//为按钮对象的单击事件绑定的函数，称为单击响应函数</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;今天下雨了&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>–</p><ul><li><p>浏览器在加载一个html文件时，是按照自上向下的顺序加载的，读取到一行就执行一行，如果将script标签写在页面的上面（head内，body前）在代码执行时页面还没有加载，DOM对象也还没有加载，获取DOM对象时就会获取不到，解决这个问题的方法，这种方法会先加载js再加载html元素，会造成元素渲染的延迟</p><ul><li><p>script标签写在前头时，给window对象绑定onload事件，onload事件会在整个页面加载完成之后再触发，该事件对应的响应函数将会在页面加载完成后执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>页面要执行的js代码<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将script标签写在body结束标签的前面，页面元素的后面，这样会在页面元素加载完后再加载script</p></li></ul></li></ul><h4 id="常见的事件"><a href="#常见的事件" class="headerlink" title="常见的事件"></a>常见的事件</h4><p>click 鼠标点击事件</p><p>focus 获取焦点事件</p><p>blur 失去焦点事件</p><p>。。。。。</p><p><strong>注意：</strong>传统注册事件的方式：利用on开头的事件，特点：注册事件的唯一性，同一个元素的同一个事件只能设置一个事件处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p><h3 id="获取页面中的元素"><a href="#获取页面中的元素" class="headerlink" title="获取页面中的元素"></a>获取页面中的元素</h3><p>浏览器为我们提供了文档节点对象document，这个对象是Window对象的属性可以在页面中直接使用，文档节点代表的是整个网页  <code>console.log(document) </code></p><p>获取元素节点要通过document对象调用</p><p>通过js获取页面中的元素分为两类标签</p><ul><li>获取特殊元素（body，html，head）</li></ul><p>获取html，返回html元素对象 <code> document.documentElement</code></p><p>head  :  document.head</p><p>获取body ,返回body元素对象  <code> document.body </code></p> <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><br>- 常规元素 <br>  - 元素的id名，可以直接当做一个变量来使用，这个变量就代表着这个元素<br>  <br>    &lt;<span class="hljs-keyword">div</span> id=<span class="hljs-string">&quot;sy&quot;</span>&gt;<span class="hljs-number">6666</span>&lt;/<span class="hljs-keyword">div</span>&gt;<br>  <br><span class="hljs-comment">---js</span><br><br>    console.<span class="hljs-built_in">log</span>(sy)<span class="hljs-comment">;//返回的就是这个div元素</span><br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart">- 通过id属性获取一个元素节点对象<br><br>​```<span class="hljs-keyword">var</span> element=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;id属性的属性值&#x27;</span>)```          ?? 不能在元素范围内使用name属性获取<br><br>参数id是大小写敏感的字符串   <br><br>返回值：返回一个匹配到Id的DOM element对象即元素对象，若在当前<span class="hljs-built_in">document</span>中没有找到，则返回<span class="hljs-keyword">null</span><br><br></code></pre></td></tr></table></figure><p>console.log(typeOf element);  &#x2F;&#x2F;查看返回值类型<br>console.dir(element)<br>&#x2F;&#x2F;consoel.dir方法打印我们返回的元素对象，可以更好的查看元素对象里的属性和方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> 通过标签名获取一组元素节点对象<br><br><span class="hljs-bullet">  -</span> document.getElementsByTagName(&#x27;标签名&#x27;)     在document的范围下查找匹配条件的元素<br><br><span class="hljs-bullet">  -</span> 父元素A.getElementsByTagName(&#x27;标签名&#x27;)；      在元素A的范围下查找匹配条件的子元素<br><br><span class="hljs-code">    父元素必须指明是哪一个元素对象，获取到的元素不包含父元素自己</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><pre><code class="hljs">var divBox=document.getElementsByTagName(&#39;div&#39;);var divA=divBox[0].getElementsByTagName(&#39;a&#39;);console.log(divA)<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>返回值：是一个伪数组，数组的常用方法使用不了<br><br>将所有查询到元素对象都会封装到数组中返回,即使只查询一个符合条件的元素对象也会封装到数组中返回，如果在页面中没有匹配到的元素，返回的是空的伪数组<br><br><span class="hljs-bullet">  -</span> 因为得到的是一个对象集合，所以在操作里面的元素时需要遍历   使用for循环遍历数组，使用索引获取元素<br>  <br></code></pre></td></tr></table></figure>  var aBob=document.getElementsByTagName(&#39;a&#39;);  for(var i=0;i&lt;=b.length;i++)&#123;      console.log(aBox[i])  &#125;  <figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><br>  ​- 得到的元素对象是动态的，即元素变化，返回值也会变化<br><br>- 通<span class="hljs-built_in">过name</span>属性获取一组元素节点对象<span class="hljs-built_in">，name</span>属性大多是设置在表单元素上的，但其实所有的元素都可以设<span class="hljs-built_in">置name</span>属性<br><br>  格式：<span class="hljs-built_in"> document</span>.getElementsByName(<span class="hljs-string">&#x27;name属性的属性值&#x27;</span>)       ?? 不能在元素范围内使<span class="hljs-built_in">用name</span>属性获取<br><br>  返回值：是一个伪数组，数组的常用方法使用不了<br><br>  ​                将所有查询到元素对象都会封装到数组中返回,即使只查询一个符合条件的元素对象也会封装到数组中返回，如果在页面中没有匹配到的元素，返回的是空的伪数组<br><br>  ​        表单元素，通<span class="hljs-built_in">过name</span>属性获取一组元素节点对象，返回一个数组<br><br>- 通过h5新增的方法获取（有兼容性问题，ie9以上才支持）<br><br>  - 根据类名获取某些元素集合<br><br>    ​<span class="hljs-built_in">document</span>.getElementByClassName(<span class="hljs-string">&#x27;类名&#x27;</span>)<br><br>    ​元素.getElementByClassName(<span class="hljs-string">&#x27;类名&#x27;</span>)<br><br>    返回值：是一个伪数组，数组的常用方法使用不了<br><br>    将所有查询到元素对象都会封装到数组中返回,即使只查询一个符合条件的元素对象也会封装到数组中返回，如果在页面中没有匹配到的元素，返回的是空的伪数组<br><br></code></pre></td></tr></table></figure>var bubu=document.getElementsByClassName(&#39;bubu&#39;)[0].getElementsByClassName(&#39;cell&#39;);console.log(bubu);//获取原属范围内的class类名为cell的元素<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br>  <br><br>- 根据选择器获取元素，选择器需要加符号  .className  #id值    (ie低版本有兼容性问题)<br><br>  - 格式：ducument(或元素).<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;选择器&#x27;</span>)<br><br>    ​   元素.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;选择器&#x27;</span>)<br><br>    能css中写的选择器在这里都可以使用<br><br>  - 返回值：返回指定选择器的第一个元素对象，没有选择器匹配到的元素则返回<span class="hljs-keyword">null</span><br><br>  ```js<br>  <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>)<br>  <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;#box&#x27;</span>)<br>  <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;dBox&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;bubu&quot;</span> name=<span class="hljs-string">&#x27;66&#x27;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cell&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fan&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;66&quot;</span>&gt;</span>33</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>yy<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sun&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;77&#x27;</span>&gt;</span>33<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;/div&gt;<br>    <br><span class="hljs-keyword">var</span> a=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#dBox &gt; #fan.cell&#x27;</span>)<br><span class="hljs-keyword">var</span> b=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#fan ~ #sun&#x27;</span>)<br><span class="hljs-keyword">var</span> c=a.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>)<br><span class="hljs-keyword">var</span> d=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#dBox &gt; a:nth-child(1)&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d);<br></code></pre></td></tr></table></figure>- 查找与指定选择器匹配的所有元素- 返回值：是一个伪数组，数组的常用方法使用不了  将所有查询到元素对象都会封装到数组中返回,即使只查询一个符合条件的元素对象也会封装到数组中返回，如果在页面中没有匹配到的元素，返回的是空的伪数组- 使用querySelectorAll方法获取的元素合集可以使用foreach，不是数组的foreach而是人家自带的，使用方式时一样的- ```  document.querySelectorAll(&#39;.box&#39;)  document.querySelectorAll(&#39;#box&#39;)  document.querySelectorAll(&#39;div&#39;)  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><br><br>关于DOM操作，我们主要针对于元素的操作，主要有创建 增删改查 <br><br><span class="hljs-section">### 操作元素</span><br><br><span class="hljs-bullet">-</span> 元素的属性  <br><br><span class="hljs-bullet">  -</span> 原生属性<br><br><span class="hljs-code">    id clss src href  type  name  border（table标签）style(给元素设置行内样式）source</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">  -</span> 自定义属性<br><br><span class="hljs-code">    index abc aaa  </span><br><span class="hljs-code"></span><br><span class="hljs-code">    自定义属性不是标签原生自带的属性，是我们自己定义的属性，是为了将数据保存在页面中而不需要将数据保存在数据库中，方便直接使用数据</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">  -</span> H5自定义属性<br><br><span class="hljs-code">    date-XXXX 以data-开头的属性</span><br><span class="hljs-code"></span><br><span class="hljs-code">    h5规定自定义属性以data-开头作为属性名并且赋值（其实也可以不以data-开头，但是这样不容易区分是内置属性还是自定义属性</span><br><span class="hljs-code">    </span><br><span class="hljs-code">    </span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> 改变网页标题 document.title=&#x27;new title&#x27;<br><br>我们可以通过DOM（属性）操作元素来改变元素里面的内容，元素的属性等<br><br><span class="hljs-section">#### 操作元素的原生属性</span><br><br>格式：<br><br>读：元素.属性名    获取元素的该属性值<br><br>写：元素.属性名=值  设置<br><br>只能获取标签自带的内置属性不能获取自定义属性<br><br>class除外，操作类名使用 元素.className<br><br><span class="hljs-bullet">-</span> 操作常见元素的属性<br><br>如果需要读写元素节点的属性，直接使用 <span class="hljs-code">```元素.属性名 ```    </span>src href id alt title等<br><br></code></pre></td></tr></table></figure></code></pre><p>var boj&#x3D;document.getElementById(‘id属性的属性值’);<br>console.log（obj.id）<br>console.log（obj.name）<br>console.log（obj.value）<br>var img&#x3D;document.getElementByTagName(‘img’);<br>img.src&#x3D;’..&#x2F;.&#x2F;a.jpg’</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>但是<span class="hljs-keyword">class</span>属性不能采用这种方式，读写<span class="hljs-keyword">class</span>属性时需要使用 ```元素.className```<br><br>#### 操做表单元素的属性<br><br>利用DOM可以操作如下表单元素的属性：type value checked selected disabled等<br><br></code></pre></td></tr></table></figure><p>var input&#x3D;document.getElementByTagName(‘input’);<br>input.value&#x3D;’777’<br>&#x2F;&#x2F;表单里的值通过value属性来读写<br>input.type&#x3D;’password’</p><p>var button&#x3D;document.getElementByTagName(‘button’);<br>button.onclick&#x3D;function(){<br>  &#x2F;&#x2F;this是事件函数的调用者<br>  &#x2F;&#x2F;按钮禁用<br>    this.disable&#x3D;true;<br>}</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>```<span class="language-javascript">js</span><br><span class="language-javascript">----发送按钮倒计时</span><br><span class="language-javascript"></span><br><span class="language-javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span>&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-javascript"></span><br><span class="language-javascript">-----js</span><br><span class="language-javascript">     <span class="hljs-comment">//获取元素</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> fsbtn=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">      <span class="hljs-comment">//给按钮绑定点击事件</span></span><br><span class="language-javascript">      fsbtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">         <span class="hljs-comment">//点击后禁用定时器</span></span><br><span class="language-javascript">         <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span>=<span class="hljs-literal">true</span>;</span><br><span class="language-javascript">          <span class="hljs-comment">//倒计时初始值</span></span><br><span class="language-javascript">          <span class="hljs-keyword">var</span> num=<span class="hljs-number">3</span>;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerText</span>=num;</span><br><span class="language-javascript">          <span class="hljs-comment">//设置定时器，每隔一秒调用一次回调函数</span></span><br><span class="language-javascript">          <span class="hljs-keyword">var</span> timeIn=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">                  <span class="hljs-comment">//当倒计时倒数倒0的时候，清除定时器</span></span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(timeIn);</span><br><span class="language-javascript">                    <span class="hljs-comment">//按钮取消禁用</span></span><br><span class="language-javascript">                    fsbtn.<span class="hljs-property">disabled</span>=<span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                    <span class="hljs-comment">//按钮内容为发送</span></span><br><span class="language-javascript">                    fsbtn.<span class="hljs-property">innerText</span>=<span class="hljs-string">&#x27;发送&#x27;</span>;</span><br><span class="language-javascript">                     <span class="hljs-comment">//倒计时计数恢复初始值，已备下一次倒计时使用 </span></span><br><span class="language-javascript">                    num=<span class="hljs-number">3</span>;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">//倒计时 数字自减，并显示在页面上</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerText</span>= --num; </span><br><span class="language-javascript">                &#125;;</span><br><span class="language-javascript">                </span><br><span class="language-javascript">          &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">      &#125;)</span><br></code></pre></td></tr></table></figure><h4 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h4><p>不能使用点语法操作自定义属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-index</span>=<span class="hljs-string">&#x27;1&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>或者使用js设置自定义属性<br>element.setAttribute(&#x27;data-index&#x27;,2)<br></code></pre></td></tr></table></figure><ul><li><p>获取（写入）属性</p><ul><li><p>获取属性</p><p>element.getAttribute(‘属性名’)     </p><p>&#x2F;&#x2F;不论设置元素属性时设置的是什么类型的数据，获取到的都是字符串</p></li><li><p>设置属性</p><p>element.setAttribute(‘属性名’,’属性值’)；</p></li><li><p>删除属性</p></li></ul><p>​         element.removeAttribute(‘属性名’)       标签的原生属性也可以删除，比如a标签的href属性</p></li></ul><p>这种方式主要用来操作自定义属性，H5自定义属性，但也可以操作内置属性</p><p>但推荐内置属性还是使用element.属性名的方式来操作，自定义属性推荐使用setAttribute</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">element.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>); <br>element.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>,<span class="hljs-string">&#x27;abc&#x27;</span>); <span class="hljs-comment">//注意以这种方式设置class属性，写的是class而不是className</span><br><br> d.<span class="hljs-property">href</span>=<span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> d.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;href&#x27;</span>));  <span class="hljs-comment">//检测获取到的数据类型  string</span><br><span class="hljs-comment">//如果设置元素属性时设置的是什么类型的数据，获取到的都是字符串</span><br></code></pre></td></tr></table></figure><h4 id="H5自定义属性"><a href="#H5自定义属性" class="headerlink" title="H5自定义属性"></a>H5自定义属性</h4><p>dataset方法有兼容性问题，只有ie11才开始支持，所以不推荐使用，也可以不讲，可以使用上一套方法操作</p><p>每一个元素身上都有一个dataset属性，它是一个对象，里面包含了设置在元素上的所有H5自定义属性</p><p>key是除了data-以外的内容：vlue是这个属性的属性值</p><p>操作H5自定义属性，直接在dataset里面进行操作即可（使用的是操作对象属性方法）</p><p>格式：标签上写data-index&#x3D;’010’</p><p>​           读    element.dataset.index     Element.dataset[‘index’]</p><p>​            写         Element.dataset[‘a] &#x3D;”011”   原对象里有是修改属性的值，没有是向对象里增加属性，映射到标签上    是 data-a&#x3D;”011”</p><p>​删除属性   delete element.datasert.index       删除dataset对象里的index成员</p><p>​这种方式设置的自定义属性里面有多个-链接的单词，我们获取时采用驼峰命名法</p><p>​如：<code> element.dataset.myIndex</code>    <code>element.dataset[&#39;myIndex&#39;]</code></p><p>等同于</p><p>element.setAttribute(‘data-index’)</p><h4 id="操作元素的类名"><a href="#操作元素的类名" class="headerlink" title="操作元素的类名"></a>操作元素的类名</h4><p>作用：修改元素的class属性，来达到修改元素样式的目的，使用于样式较多或者功能复杂的情况</p><p>使用步骤：需要在css样式表中写入class类名所对应的样式，再通过该方式绑定在元素上</p><p>class是个保留字，所以使用className来操作元素的类名属性</p><ul><li>按照原生属性操作</li></ul><p>​   设置类名  元素.className&#x3D;”box”</p><p>​   修改类名    元素.className&#x3D;”新值1 新值2”</p><p>​注意：clssName会直接更改元素的类名，会覆盖原先的类名</p><p>​   删除类名   获取原类名，执行操作字符串的方法， 截取字符串等</p><p>​或者重新写一遍</p><ul><li><p>H5标准提供的API</p><p>元素身上都有一个classList属性 ,里面包含了该元素的所有的类名</p><p>这个classList提供了一系列的方法来操作</p><ul><li><p>add()</p><p>元素.classList.add(‘你要添加的类名’)</p></li><li><p>remove()</p><p>元素.classList.remove(‘你要移除的类名’)</p></li><li><p>toggle()   toggle 开关</p><p>元素.classList.toggle(‘你要切换到的类名’)</p><p>当元素有这个类名时，就删除，当元素没有这个类名时就添加</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">-----点击显示下来框，通过给元素添加删除属性名<br>.<span class="hljs-property">top</span>-box&#123;<br>            <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>%;<br>            <span class="hljs-attr">height</span>: 50px;<br>            <span class="hljs-attr">position</span>: absolute;<br>            <span class="hljs-attr">top</span>:<span class="hljs-number">0</span>;<br>            <span class="hljs-attr">left</span>:<span class="hljs-number">0</span>;<br>            background-<span class="hljs-attr">color</span>: aquamarine;<br>            <span class="hljs-attr">transition</span>:all 1s;<br>        &#125;<br>        .<span class="hljs-property">show</span>&#123;<br>            <span class="hljs-attr">top</span>:-50px;<br>        &#125;<br>        .<span class="hljs-property">btn</span>&#123;<br>            margin-<span class="hljs-attr">top</span>: 150px;<br>        &#125;<br>--------<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top-box&quot;</span>&gt;</span></span><br><span class="language-xml">下拉框</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>-------<br><span class="hljs-keyword">var</span> topBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.top-box&#x27;</span>);<br><span class="hljs-keyword">var</span> btn=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn&#x27;</span>);<br>btn.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>topBox.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;show&#x27;</span>)；<span class="hljs-comment">// 给元素动态添加类名,有就删除，没有就添加</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>案例：密码输入框，掩文和明文状态的切换（input标签的type属性为text或者password之间切换）</p><p>​关闭广告栏 （dispaly：none）</p><p>​下拉菜单在鼠标滑过时才显示</p><p>​页面开关灯</p><p>​排他按钮，点击一个按钮前先清除其他所有按钮的选中状态再设置点击按钮的样式</p><h4 id="操作元素样式"><a href="#操作元素样式" class="headerlink" title="操作元素样式"></a>操作元素样式</h4><p>我们可以通过js来操作元素的样式，来修改元素的大小，颜色，位置等</p><p>样式分为两大类：行内样式 非行内样式</p><ul><li>行内样式<ul><li>操作元素原生的样式属性</li></ul></li></ul><p>​            获取格式：元素.style           操作元素的行内样式（可读写）</p><p>​获取到的内容是一个对象，里面包含元素所有的可设置样式,我们想要获取哪个样式就使用操作对象的方式直接获取就可以了,但是只能获取到行内，如果我们的样式是写在css样式表中的，样式可以起作用，但是通过元素.style的方式获取不到css样式表设置的样式</p><p>​设置：元素.style.指定样式&#x3D;值</p><p>​                        实际是操作的元素的行内样式，行内样式权重（1000）比较高</p><p>​                         使用情况，样式比较少或者功能简单的情况下使用</p><p>​                        js里的样式采用驼峰命名的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">element.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span>=<span class="hljs-string">&#x27;16px&#x27;</span>;<br><span class="hljs-comment">//获取设置元素原生属性style里的样式</span><br>element.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span>=<span class="hljs-string">&#x27;red&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><p>非行内样式</p><ul><li><p>获取非行内样式</p><ul><li><p>window.getComputedStyle(要获取样式的元素)  这是window对象里的一个方法</p></li><li><p>返回值：一个对象，里面包含所有可设置的样式，每一个样式都有值，没有设置的样式采用默认值</p></li><li><p>获取指定样式：需要获取哪个样式，直降使用访问对象的方式在返回的样式对象里访问即可</p><p>只能获取不能设置或修改样式</p></li><li><p>兼容性：标准浏览器适用</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> style=<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getComputedStyle</span>(changeBox); <br><span class="hljs-comment">//获取id为changeBox的元素的非行内样式 得到的是一个对象里面是所有可以设置的样式</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(style.<span class="hljs-property">width</span>);<br><span class="hljs-comment">//使用点运算符获取对象里的样式使，如果样式中带有中划线-，我们在js中要使用驼峰的形式书写样式，因为在js中-表示的是减法运算符，会执行减法的操作</span><br><span class="hljs-comment">//   console.log(style.background-color);//报错</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(style.<span class="hljs-property">backgroundColor</span>);<span class="hljs-comment">//得到的结果会给我们转换为rbg值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(style[<span class="hljs-string">&#x27;background-color&#x27;</span>]);<span class="hljs-comment">//使用方括号运算符获取css样式对象里的样式</span><br></code></pre></td></tr></table></figure><ul><li><p>元素.currentStyle  属性</p><ul><li><p>兼容性：IE低版本适用</p></li><li><p>返回值：返回值是一个对象，里面包含元素所有可设置的样式，每一个样式都有值，没有设置的采用默认值</p></li><li><p>获取指定样式：需要获取哪个样式，直降使用访问对象的方式在返回的样式对象里访问即可</p><p>只能获取不能设置或修改样式</p></li></ul></li></ul></li></ul><p><strong>注意：</strong> 使用点运算符获取对象里的样式使，如果样式中带有中划线-，我们在js中要使用驼峰的形式书写样式，因为在js中-表示的是减法运算符，会执行减法的操作</p><p>使用方括号运算符获取css样式对象里的样式，在字符串中可以写中划线-</p><p>这两种获取元素非行内样式的方式有兼容性问题，但是不能使用短路表达式来处理兼容性问题，因为他们是报错；</p><ul><li>什么情况下使用短路表达式</li></ul><p>使用短路表达式兼容前提是，代码执行不能报错即方法或者属性执行没有问题，只是拿不到值的时候可以使用短路表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//----------封装一个函数获取元素的样式（处理兼容性问题）    </span><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">      @param &#123;ELEMENT&#125; element - 要获取样式的元素</span><br><span class="hljs-comment">      @param &#123;STRING&#125;  style - 要获取的样式字符串</span><br><span class="hljs-comment">      @return &#123;STRING&#125; 获取到的元素样式的值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      */</span><br><br>     <span class="hljs-comment">//-----处理获取元素样式的兼容性问题的函数</span><br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStyle</span>(<span class="hljs-params">element,style</span>)&#123;<br>      <span class="hljs-comment">//判断当前浏览器的window对象里有没有getComputedStyle属性，有则返回true，没有则返回false</span><br>      <span class="hljs-comment">//在低版本的ie浏览器中的window对象里没有getComputedStyle属性</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;getComputedStyle&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)&#123;<br>        <span class="hljs-comment">//有 则是标准浏览器</span><br>       <span class="hljs-keyword">return</span>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getComputedStyle</span>(element)[style]<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//IE 低版本</span><br>        <span class="hljs-keyword">return</span> element.<span class="hljs-property">currentStyle</span>[style]<br>      &#125;<br>  &#125;<br>  <span class="hljs-title function_">getStyle</span>(div,<span class="hljs-string">&#x27;width&#x27;</span>)；<span class="hljs-comment">//调用函数获取元素的width样式</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@param</span> &#123;参数类型&#125; 参数名 - 对参数的描述信息<br><span class="hljs-variable">@return</span> &#123;函数返回值的类型&#125; 函数返回值的描述<br>作用：对函数的参数，返回值进行解释<br></code></pre></td></tr></table></figure><ul><li><p>设置元素样式</p><p>设置元素样式只有一种方式，即我们只能设置元素的行内样式，因为非行内样式css样式表是属于在html的外在文件，而我们js不能操作电脑上的文件</p><p>而非要修改非行内样式，只能修改html文件里的style标签的内容或者css文件，不能使用js操作</p><p>（我们js实际是可以通过操作内嵌样式表的style标签通过innerText的方式修改样式，但是一般没人这样做）</p><p>所以我们修改设置元素的样式只能修改行内样式</p><p>格式：元素.style.样式名&#x3D;’样式值’</p></li></ul><h4 id="操作元素内容"><a href="#操作元素内容" class="headerlink" title="操作元素内容"></a>操作元素内容</h4><p>三种：innerHTML      innerText       value</p><ul><li><p>innerHTML属性，通过这个属性可以获取到元素内部的html代码，即双标签的标签体，对于单标签而言这个属性没有作用</p><p>可读写的属性，可以获取元素里的内容也可写入内容</p><p>推荐使用</p><p>格式：元素.innnerHTML   可读写的属性</p><p>获取元素的超文本内容，获取标签内的所有内容：文本，html标签，保留空格和换行</p><p>返回值：以字符串的形式返回</p><p>写入时：当写入的字符串中包含htnl结构的时候，会自动解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> boj=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;id属性的属性值&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">innnerHTML</span>)；  <span class="hljs-comment">//获取</span><br>obj.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&#x27;&lt;em&gt;我是&lt;/em&gt;新的内容&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>innerText属性  </p><p>作用：操作元素的文本内容 可读写的属性</p><p>读：  <code>element.innerText </code> 获取元素内的所有文本内容</p><p>​（包含后代元素内的文本，但不包含html标签，并去除空格和换行）</p><p> 写： <code>element.innerText=&#39;hello</code></p><p>​完全覆盖式的写入，当写入内容的字符串中出现html的时候，不会自动解析，按原样输出</p></li><li><p>元素的原生value属性</p><p>读写属性   元素.value      元素.value&#x3D;’你要设置的值’</p></li></ul><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"> -------选项卡切换，互斥选择<br> &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;change-box&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left-btn&quot;</span>&gt;</span>左侧<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-btn&quot;</span>&gt;</span>右侧<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-btn&quot;</span>&gt;</span>右侧<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-btn&quot;</span>&gt;</span>右侧<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>    <br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;change-page&quot;</span>&gt;</span>11111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;change-page&quot;</span>&gt;</span>2222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;change-page&quot;</span>&gt;</span>3333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;change-page&quot;</span>&gt;</span>44444<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br>  <br>   -------------推荐使用<br>   <span class="hljs-keyword">var</span> allSpan=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.change-box span&#x27;</span>);<br>        <span class="hljs-keyword">var</span> allpage=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.change-page&#x27;</span>);<br>        <span class="hljs-comment">//页面一进来设置第一选项和卡片显示</span><br>        allSpan[<span class="hljs-number">0</span>].<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;bg-color&#x27;</span>; <br>        allpage[<span class="hljs-number">0</span>].<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span>;<br><br>        allSpan.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)&#123;<br>            <span class="hljs-comment">//给每一个元素设置一个自定义属性，这样我们可以在点击之后知道点击的是哪个元素</span><br>            item.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>,index);<br>            <span class="hljs-comment">//给数组中的每一个元素给绑定点击事件</span><br>            item.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-comment">//给所有元素清除背景颜色</span><br>                allSpan.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>                    item.<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;&#x27;</span><br>                &#125;)<br>                <span class="hljs-comment">//给点击的元素增加背景颜色</span><br>                item.<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;bg-color&#x27;</span><br>                <span class="hljs-comment">//在点击元素的时候获取元素的data-index属性就可以知道点击的是哪一个元素了</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>                <span class="hljs-string">&#x27;点击的元素索引&#x27;</span>,item.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>)<br>                )<br>                <span class="hljs-comment">//将所有的页面隐藏</span><br>                allpage.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>                    item.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;none&#x27;</span>;<br>                &#125;)<br>                <span class="hljs-comment">//将点击了对应索引的页面显示</span><br>                allpage[item.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>)].<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span><br><br>            &#125;<br>        &#125;)<br>        <br> --------不推荐<br>   <span class="hljs-keyword">var</span> leftBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.left-btn&#x27;</span>)<br>   <span class="hljs-keyword">var</span> rightBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.right-btn&#x27;</span>)<br>   leftBox.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>     rightBox.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;bg-color&#x27;</span>)<br>     leftBox.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;bg-color&#x27;</span>)<br>   &#125;<br>   rightBox.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>     leftBox.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;bg-color&#x27;</span>)<br>     rightBox.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;bg-color&#x27;</span>)<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">-----------表单全选<br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;<br>    &lt;div class=&quot;top&quot;&gt;<br>        &lt;label for=&quot;all&quot;&gt;全选&lt;/label&gt;<br>        &lt;input id=&quot;all&quot; type=&quot;checkbox&quot;&gt;&lt;br&gt;<br>        &lt;hr&gt;<br>    &lt;/div&gt;<br>    &lt;div class=&quot;cell-input&quot;&gt;<br>        &lt;label for=&quot;red&quot;&gt;红色&lt;/label&gt;<br>        &lt;input id=&quot;red&quot; type=&quot;checkbox&quot;&gt; &lt;br&gt;<br>        &lt;label for=&quot;green&quot;&gt;绿色&lt;/label&gt;<br>        &lt;input id=&quot;green&quot; type=&quot;checkbox&quot;&gt;&lt;br&gt;<br>        &lt;label for=&quot;green&quot;&gt;绿色&lt;/label&gt;<br>        &lt;input id=&quot;green&quot; type=&quot;checkbox&quot;&gt;&lt;br&gt;<br>        &lt;label for=&quot;green&quot;&gt;绿色&lt;/label&gt;<br>        &lt;input id=&quot;green&quot; type=&quot;checkbox&quot;&gt;&lt;br&gt;<br>        &lt;label for=&quot;green&quot;&gt;绿色&lt;/label&gt;<br>        &lt;input id=&quot;green&quot; type=&quot;checkbox&quot;&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br>-----------------------------<br>var allBtn=document.querySelector(&#x27;#all&#x27;);// 全选按钮<br>var cellBtn=document.querySelectorAll(&#x27;.cell-input input[type=&quot;checkbox&quot;]&#x27;);// 获取全部的选择<br>//给全选按钮绑定事件<br>allBtn.onclick=function()&#123;<br>    //当点击按钮的时候遍历所有选项，给所有选项设置选中属性<br>    cellBtn.forEach(function(item)&#123;<br>        //遍历的每一个选项的选中状态与全选按钮的状态一样<br>        item.checked=allBtn.checked<br>    &#125;)<br>&#125;<br>//给每一个选则绑定点击事件，每次选择后检测一下是不是所有的选择都是选中状态，如是全部选中就给全选按钮设置选中状态<br>cellBtn.forEach(function(item)&#123;<br>        //遍历的每一个选项,给每一个选项设置点击事件<br>       <br>        item.onclick=function()&#123;<br>            var isAllChecked=true; //使用一个变量记录是否都选中，假设全都选中<br>            //点击每一个选项，就循环遍历查看一下每一个选项的选中状态<br>            cellBtn.forEach(function(item)&#123;<br>                //如果有一个选项的没有选中，就设置isAllChecked为false<br>                if(!item.checked) isAllChecked=false;<br>            &#125;)<br>            //循环遍历完之后就可以知道，是不是所有的选项都选中了<br>            //将最终的结果给全选按钮赋值<br>            allBtn.checked=isAllChecked;<br>        &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h3><p>获取节点的常用的两种方式</p><p>1:利用DOM提供的方法获取元素，这种方式获取节点逻辑性不强且很繁琐。（比较老的用法不太推荐）</p><p>​ducument.getElementById();</p><p>   ducument.getElementByTagName();</p><p>   ducument.querySelector()等</p><p>2:利用节点层级关系通过节点的属性来获取元素</p><p>即利用父子兄弟节点关系来获取元素，这种方式获取节点更加简单，逻辑性强但是兼容性稍差</p><p>节点基础概念在上面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">---------------------------------案例准备<br>&lt;!-- 准备一系列节点 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 你好世界 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    hello world</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h4><h5 id="父子节点"><a href="#父子节点" class="headerlink" title="父子节点"></a>父子节点</h5><p>根据DOM树，可以把节点划分为不同的层级，常见的是父子兄弟层级，</p><ul><li><p>父级节点</p><p>格式：元素.parentNode</p><p>作用：返回该元素的父节点（亲爸爸），如果指定的节点没有父级节点则返回null</p><p>父节点：大部分都是元素，有特殊的document</p></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(div.parentNode.parentNode.parentNode);   <br><span class="hljs-comment">//找到document后的parentNode返回null</span><br></code></pre></td></tr></table></figure><ul><li><p>父元素节点</p><p>格式：元素.parentELement</p><p>返回元素的父元素节点</p></li><li><p>子节点</p><ul><li>格式：元素.childNodes</li></ul><p>作用：返回包含在指定节点内的子节点的伪数组，该集合是即时更新的集合</p><p>注意：返回值里包含了所有的子节点，包括元素节点，文本节点等（文本节点包括文字，空格，换行），如果想要通过这个属性只获取元素子节点需要再做处理（遍历返回值，判断每一项的nodeType），所以不推荐使用该属性获取子节点</p><ul><li>格式：元素.firstChild</li></ul><p>作用：返回第一个子节点，没有则返回null，同样是包含所有的类型的节点</p><ul><li>格式：元素.lastChild</li></ul><p>作用：返回最后一个子节点，没有则返回null，同样是包含所有类型的节点</p><p>以上三个属性不是值返回子元素节点，所以不推荐使用</p><p>使用typeof 检测节点类型 返回的是object</p><ul><li><p>格式：parentNode.children    这是一个只读属性，没有兼容性问题，这个属性必须掌握</p><p>作用：parentNode.children属性只返回parentNode节点内的所有的子元素节点（伪数组），其余类型的节点不会返回 </p><p>如果元素内没有子元素节点则返回的是[]</p></li><li><p>格式：parentNode.firstElementChild    有兼容性为题，ie9以上才支持</p><p>作用：返回第一个子元素，找不到则返回null</p></li><li><p>格式：parentNode.lastElementChild    有兼容性为题，ie9以上才支持</p><p>作用：返回最后一个子元素，找不到则返回null</p></li></ul><p>获取到元素节点后我们可以对元素进行操作</p><p><strong>总结：</strong></p><p>在实际开发中使用parenNode.children属性（没有兼容性问题且直接返回子元素节点）</p><p>返回所有子元素节点:parenNode.children</p><p>返回第一个子元素节点 :parenNode.children[0]</p><p>返回最后一个子元素节点:parenNode.children[parenNode.children.length-1]</p></li></ul><h5 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h5><ul><li><p>元素.nextElementSibling            有兼容性问题，ie9以上才支持</p><p>返回当前元素下一个兄弟节点，找不到则返回null。 （弟弟元素）</p></li><li><p>元素.previousElementSibling      有兼容性问题，ie9以上才支持    </p><p>翻译：previous 在…以前   sibling兄弟姐妹</p><p>返回当前元素上一个兄弟元素节点，找不到则返回null。（哥哥元素）</p></li><li><p>元素.nextSibling    （弟弟节点）</p><p>返回下一个兄弟节点，包含元素节点或者文本节点等</p></li><li><p>元素.previousSibling  （哥哥节点）</p><p>返回元素的上一个兄弟节点，包含元素节点或者文本节点</p><p>获取兄弟节点的以上四个属性都不够完美，需要我们自己封装一个没有兼容性问题的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getNextElementSibling</span>(<span class="hljs-params">element</span>)&#123;<br><span class="hljs-keyword">var</span> el=element;<br><span class="hljs-keyword">while</span>(el=el.<span class="hljs-property">nextSibling</span>)&#123;<br><span class="hljs-keyword">if</span>(el.<span class="hljs-property">nodeType</span>===<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> el;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h5><ul><li><p>格式：元素.attributes</p><p>返回该元素的所有属性节点    </p><p>属性节点是元素身上设置的属性，每一个属性都是一个节点</p></li></ul><h5 id="创建添加节点"><a href="#创建添加节点" class="headerlink" title="创建添加节点"></a>创建添加节点</h5><p>想要在页面中通过js添加一个新的节点需要分两步：创建节点，添加节点</p><ul><li></li></ul><p>  document.creatElement(‘标签名’) </p><p>  作用：创建指定标签名的html元素</p><p>  返回值：返回一个元素节点</p><ul><li><p>创建文本节点</p><p>document.creatTextNode(‘文本内容’)</p></li><li><p>添加节点</p><p>父节点.appendChild(要添加进去的子节点) </p><p>作用：在父节点的末尾添加一个子节点，类似于class中的::aftetr伪元素</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> li=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">creatElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-keyword">var</span> ul=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>ul.<span class="hljs-title function_">appendChild</span>(li);<br>在获取到的ul标签里添加一个新创建的li标签<br><br>---------<br><br><span class="hljs-keyword">var</span> div=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>div.<span class="hljs-property">innerText</span>=<span class="hljs-string">&#x27;布布妈妈&#x27;</span>;<br>div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;77&#x27;</span>);<br>div.<span class="hljs-property">id</span>=<span class="hljs-string">&#x27;88&#x27;</span>;<br>box.<span class="hljs-title function_">appendChild</span>(div)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&#x27;</span>,div)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> img=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>img.<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;../imgs/cat.png&#x27;</span>;<br>img.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;图片加载成功&#x27;</span>);<br>&#125;<br>img.<span class="hljs-property">onerror</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;图片加载失败&#x27;</span>);<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(img)<br></code></pre></td></tr></table></figure><ul><li><p>在父元素中指定元素的前面添加子节点，类似于class中的::before伪元素</p><p>父节点.insertBefore(子节点,指定元素)</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">ul.<span class="hljs-title function_">insertBefore</span>(li,ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>])<br>在ul的第一个子元素前添加新的节点li<br></code></pre></td></tr></table></figure><h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><ul><li>父节点.removeChild(子节点)</li></ul><p>作用：将子节点从父节点里移除</p><p>返回值是被删除的节点</p><p>该方法可以在创建的节点里删除，也可以直接从页面元素里删除父节点中的一个子节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ul=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>ul.<span class="hljs-title function_">removeChild</span>(ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//删除ul中的第一个子元素</span><br></code></pre></td></tr></table></figure><ul><li><p>节点.remove()</p><p>作用：把自己从父节点中移除</p></li></ul><h5 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h5><p>​用一个节点替换一个已经存在的节点，可以直接替换页面元素可以替换我们自己创建的节点</p><p>格式：父节点.replaceChild(新节点，旧节点)；</p><p>作用：在父节点下，用新节点替换旧节点，所有的节点都可以替换，但是不能用元素节点替换属性节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 准备一系列节点 --&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 你好世界 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    hello world</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>----js<br><br> <span class="hljs-keyword">var</span> p=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br> p.<span class="hljs-property">innerText</span>=<span class="hljs-string">&#x27;我是新来的&#x27;</span>;<br> box.<span class="hljs-title function_">replaceChild</span>(p,box.<span class="hljs-property">firstElementChild</span>);  <br> <span class="hljs-comment">//将div#box的第一个元素节点替换成新创建的p标签</span><br></code></pre></td></tr></table></figure><h5 id="复制节点（克隆节点，拷贝节点）"><a href="#复制节点（克隆节点，拷贝节点）" class="headerlink" title="复制节点（克隆节点，拷贝节点）"></a>复制节点（克隆节点，拷贝节点）</h5><p>作用：把某一个节点复制一份一模一样的</p><p>格式：要被复制的节点.cloneNode(参数) </p><p>返回值：返回被复制节点的一个副本</p><p>参数：参数为空或者false，是浅拷贝，即只拷贝节点本身，不拷贝节点里的子节点等内容</p><p>​            参数为true时，则是深拷贝，会复制节点本身以及节点里子节点等内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 准备一系列节点 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 你好世界 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    hello world<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>-------------<br>  var newBox=box.cloneNode();//只赋值了box元素，不包含元素的内容<br>  var newBox=box.cloneNode(true);<br>  console.log(newBox);<br>  document.body.appendChild(newBox)<br></code></pre></td></tr></table></figure><p>三种动态创建元素方式及区别</p><ul><li><p>document.write()</p></li><li><p>element.innerHTML  </p></li><li><p>document.createElement()</p></li></ul><p>区别：</p><ul><li><p>document.write </p><p>是直接将内容写入页面的内容流，但是文档流执行完毕，document.write会导致页面全部重绘</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;box&quot;</span>&gt;<br>    布布妈妈<br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>write写入<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>-----------------------------------<br><span class="hljs-keyword">var</span> p=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br>p.<span class="hljs-property">innerText</span>=<span class="hljs-string">&#x27;希望赶快好起来&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p)<br>box.<span class="hljs-title function_">appendChild</span>(p)<br><span class="hljs-keyword">var</span> btn=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>----------------页面绘制完后点击按钮使用write写入内容，会导致页面的全部重绘<br>btn.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;p&gt;郑州加油&lt;/p&gt;&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>innerHTML 是将内容写入某个DOm节点，不会导致页面的全部重绘</p><p>innerHTML 创建多个元素效率更高（不要以拼接字符串的形式，而要采取数组形式拼接），结构稍微复杂</p></li><li><p>creatElement（） 创建多个元素效率稍微低一点点，但是结构更加清晰</p><p>创建节点，插入节点会频繁操作DOM，页面浪费性能最大的就是操作dom，所以要尽量减少操作DOM</p></li><li><p>总结：在不同的浏览器下，innerHTML以数组形式效率要比creatElement高</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> box1=document.querySelector(<span class="hljs-string">&#x27;#box1&#x27;</span>);<br><span class="hljs-comment">// 方法1： innerHTML以拼接字符串的形式来创建添加元素，一次次的创建添加这样的效率很低</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br>    box1.innerHTML+=<span class="hljs-string">&#x27;&lt;span&gt;你好&lt;span&gt;&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 方法2:  innerHTML 先将要创建的元素通过数组将字符串拼接好，再一次性的使用innerHTML创建添加，效率最高</span><br><span class="hljs-keyword">var</span> arr=[];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br>    arr.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&lt;span&gt;你好&lt;span&gt;&#x27;</span>)<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr)<br>box1.innerHTML=arr.join(<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment">// 方法3 ：以document.creatElement()创建元素  效率比方法2要低</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br>    <span class="hljs-keyword">var</span> a=document.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    a.innerHTML=<span class="hljs-string">&#x27;你好&#x27;</span>;<br>    box1.appendChild(a)<br>&#125;<br></code></pre></td></tr></table></figure><p>案例作业：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 动态添加表格数据 ，原表格无数据--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span>  <br><br>--------------------------<br><br>   var userList=[<br>        <span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;孙悟空&#x27;</span>,age:<span class="hljs-number">1800</span>,gender:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>        <span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;猪八戒&#x27;</span>,age:<span class="hljs-number">1800</span>,gender:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>        <span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;沙僧&#x27;</span>,age:<span class="hljs-number">1800</span>,gender:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>        <span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;唐三藏&#x27;</span>,age:<span class="hljs-number">1800</span>,gender:<span class="hljs-string">&#x27;男&#x27;</span>&#125;<br>    ]<br>    var str=<span class="hljs-string">&#x27;&#x27;</span>;<br>    userList.forEach(<span class="hljs-keyword">function</span>(<span class="hljs-type">item</span>)&#123;<br>        str+=`<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">                    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">                        $</span><span class="language-xquery">&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.name</span>&#125;</span><span class="language-xml"></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">                    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">                        $</span><span class="language-xquery">&#123;<span class="hljs-type">item</span>.age&#125;</span><span class="language-xml"></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">                    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">                        $</span><span class="language-xquery">&#123;<span class="hljs-type">item</span>.gender&#125;</span><span class="language-xml"></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span>`<br>    &#125;)<br>    <br>    var tbody<span class="hljs-built_in">=document</span>.querySelector(<span class="hljs-string">&#x27;tbody&#x27;</span>)<br>    tbody.innerHTML=str;<br>    console.log(str)<br>    console.log(div)<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>文档碎片（筐）</p><p>我们可以使用js创建一个文档碎片节点，它的作用是可以承载（其他）节点，当我们把筐向页面元素里添加的时候，筐是不会进入页面的，是把筐里的内容倒进去</p><p>格式：document.createDocumentFragment()</p><p>返回值：一个文档碎片节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js">  <br>----<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-comment">&lt;!-- 动态增加表格数据, 保留原数据--&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>bubu<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>nan<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br>-----------<br>    <span class="hljs-keyword">var</span> userList=[<br>        &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">1800</span>,<span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">1800</span>,<span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;沙僧&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">1800</span>,<span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;唐三藏&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">1800</span>,<span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;<br>    ]<br>    <span class="hljs-comment">//创建一个文档碎片节点 筐</span><br>    <span class="hljs-keyword">var</span> frg=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createDocumentFragment</span>()<br>    userList.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>       <span class="hljs-keyword">var</span> tr=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;tr&#x27;</span>)<br>       tr.<span class="hljs-property">innerHTML</span>= <span class="hljs-string">`&lt;td&gt;</span><br><span class="hljs-string">                        <span class="hljs-subst">$&#123;item.name&#125;</span></span><br><span class="hljs-string">                    &lt;/td&gt;</span><br><span class="hljs-string">                    &lt;td&gt;</span><br><span class="hljs-string">                        <span class="hljs-subst">$&#123;item.age&#125;</span></span><br><span class="hljs-string">                    &lt;/td&gt;</span><br><span class="hljs-string">                    &lt;td&gt;</span><br><span class="hljs-string">                        <span class="hljs-subst">$&#123;item.gender&#125;</span></span><br><span class="hljs-string">                    &lt;/td&gt;`</span><br>        <span class="hljs-comment">//把每次循环创建好的tr标签添加到筐里</span><br>        frg.<span class="hljs-title function_">appendChild</span>(tr)<br>    &#125;)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(frg)<br>   <span class="hljs-keyword">var</span> tbody=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>)<br>   <span class="hljs-comment">//将筐插入进tbody，实际插入的是筐内的内容，筐不进入</span><br>   tbody.<span class="hljs-title function_">appendChild</span>(frg)<br></code></pre></td></tr></table></figure></li></ul><h5 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h5><p>offset翻译为偏移量，通过offset系列相关属性可以得到该元素的位置，大小等</p><p>offset系列常用属性，返回数值不能带单位</p><ul><li><p>获取元素自身的大小（宽高）</p><ul><li>元素.offsetWidth   </li><li>元素.offsetHeight</li></ul><p>返回值：得到元素的 内容+padding+border 区域的宽&#x2F;高度 </p><p>返回值不带单位</p><p>元素设置display：none后，返回值为0</p></li><li><p>获取元素距离带有定位父元素的位置</p><ul><li><p>E.offset.offsetParent  </p><p>返回元素<strong>带有定位</strong>的父元素，如果没有父元素或父元素没有开启定位则返回body</p><p>（元素本身可以没有开启绝对定位，假设我们给这个元素开启绝对定位时，他会根据谁来定位，返回的offsetParent就是谁）</p></li><li><p>E.offset.offsetTop  </p><p>返回元素相对带有定位的父元素，上方的偏移量，</p><p>如果没有父元素或父元素没有开启定位就相对于body</p></li><li><p>E.offset.offsetLeft  </p><p>返回元素相对带有定位的父元素左边框的偏移量，</p><p>如果没有父元素或父元素没有开启定位就相对于body</p></li></ul><p>当我们在css中给元素设置定位时，采用的时right和bottom的时候，会自动给我们转换为left和top的值返回</p></li><li><p>offset和style的区别</p><ul><li><p>offset可以得到任意样式表中样式值</p></li><li><p>offset获取到的数值没有单位</p></li><li><p>offsetWith和offsetHeight 为可见框尺寸 包含 conten（ width height） padding border</p></li><li><p>offsetWidth，offsetHeight 属性为只读属性，不能赋值</p></li><li><p>style 只能得到行内样式表中的样式值</p></li><li><p>shyle.width 返回的是带有单位的字符串</p></li><li><p>style.width 返回的是不包含 padding 和border，可读写属性</p><p>所以，我们想要获取元素的大小位置，使用offset更合适，修改元素的值，使用style改变</p></li></ul></li></ul><h5 id="client"><a href="#client" class="headerlink" title="client"></a>client</h5><p>client（翻译 客户端）系列相关属性可以获取元素可视区域的相关信息，可以动态得到该元素的边框大小，元素大小</p><ul><li>元素.clientWidth</li></ul><p>​        返回值：自身content（width）+padding 的宽度，不包含边框.   ???自己获取时包含了border？？</p><p>​      返回数值不带单位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">获取浏览器窗口的尺寸：<br>- <span class="hljs-variable constant_">BOM</span>级别的获取<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span><br>拿到的是包含浏览器滚动条的尺寸<br>- <span class="hljs-variable constant_">DOM</span> 级别的获取<br>其实就是获取页面的那一部分的尺寸<br>  通过<span class="hljs-variable constant_">DOM</span>节点获取浏览器窗口尺寸，不包含滚动条<br>  本质是获取的时html的width<br>  格式：<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentELement</span>.<span class="hljs-property">clientWidth</span>;<br></code></pre></td></tr></table></figure><ul><li><p>元素.clientHeight </p><p>返回值：自身包括content（height）+padding 的高度，不包含边框 </p><p>​返回数值不带单位</p></li><li><p>元素.clientTop </p><p>返回元素上边框的大小 boder-top</p></li><li><p>元素.clientLeft。 </p><p>返回元素左边框的大小  border-left</p></li></ul><h2 id="事件注册（绑定事件）"><a href="#事件注册（绑定事件）" class="headerlink" title="事件注册（绑定事件）"></a>事件注册（绑定事件）</h2><p>即给元素添加事件</p><p>事件注册的两种方式：传统方式（dom0级事件）  和 事件监听注册方式（dom2级事件）</p><p>传统方式 event.onclick&#x3D;function(){};此方法没有兼容性问题</p><p>事件监听注册方式：</p><ul><li><p>addEventListenter() 方法</p><p>标准浏览器使用</p><p>ie9之前的ie浏览器不支持此方法，可以使用attachEvent()方法替代</p></li></ul><h3 id="addEventListener-事件监听"><a href="#addEventListener-事件监听" class="headerlink" title="addEventListener 事件监听"></a>addEventListener 事件监听</h3><ul><li><p>格式：eventTarget.addEventListener(type,listener[,usercapture])</p><p>eventTarget.addEventListener()方法将指定的监听器注册到eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数</p></li><li><p>该方法接收三个参数</p><ul><li><p>type ：事件类型<strong>字符串</strong>，比如 ‘click’  ‘mouseover’  不带on</p></li><li><p>listener：事件处理函数，事件触发时就会调用该监听函数</p></li><li><p>usecapture ：可选参数 布尔值 默认值为false 为执行冒泡事件流，再在事件冒泡阶段调用事件处理程序，true为执行捕获事件流，在事件捕获阶段调用事件处理程序</p></li></ul></li><li><p>格式：事件源.addEventListener(‘事件类型’,事件处理函数)</p></li><li><p>此方法可以给同一个元素的同一个事件添加多个监听器（事件处理程序），会按照书写顺序依次执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">box1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;元素被点击了&#x27;</span>)<br>      &#125;)<br>box1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;元素被点击了22&#x27;</span>)<br>      &#125;)     <br></code></pre></td></tr></table></figure></li></ul><h2 id="删除事件（事件解绑）"><a href="#删除事件（事件解绑）" class="headerlink" title="删除事件（事件解绑）"></a>删除事件（事件解绑）</h2><ul><li><p>传统方法的删除事件</p><p>因为是赋值行为，所以解绑时再次赋值为null即可</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">element.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;nihau&#x27;</span>);<br><br>element.<span class="hljs-property">onlick</span>=<span class="hljs-literal">null</span>;   <span class="hljs-comment">//删除元素element上的事件 传统绑定事件的方式删除方法为直接赋值为null</span><br><br>&#125;<br><br>div.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<br>&#125;<br><span class="hljs-comment">//设置一个按钮，当点击按钮时将div的click事件解绑</span><br>btn.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>div.<span class="hljs-property">onclick</span>=<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>知识点铺垫：复杂数据类型比较时比较的是数据在堆内存中的地址</p><ul><li><p>事件监听器的删除事件</p><p>格式：元素.removeEventLIstener(‘事件类型’,要解绑的事件处理函数) </p><p>注意：如果想要解绑事件监听器注册事件，在事件绑定的时候一定要把函数单独书写成一个具名函数，以函数名的形式绑定事件处理函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,event1)   <span class="hljs-comment">//此处为函数名 不需要加小括号。不要使用匿名函数 </span><br><br><span class="hljs-title class_">Var</span> event1=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   .....<br>  div.<span class="hljs-title function_">removeEventLIstener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,even1)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>当一个事件触发的时候，对本次事件的描述</p><p>​事件发生后，根事件相关的一系列信息数据的集合都放在这个对象里，他有很色属性和方法</p><p>例子：客服，接电话时会记录通话信息，地址，什么事，需要什么帮助</p><p>比如点击行为：</p><p>当点击浏览器触发点击行为，要执行事件处理函数，需要记录信息：谁绑定了这个事件，点击了哪个元素，点击坐标，按下哪一个按键，当前触发事件的类型</p><p>键盘事件：会得到键盘相关的信息，如按了哪个键，按下的是不是组合键</p><ul><li><p>标准浏览器：</p><p>在事件处理函数中接收一个形参event，是系统帮我们设定事件对象，当我们注册事件时，event对象会被系统自动创建</p><p>我们不需要传递实参过去，在事件触发的时候，由浏览器自动传递实参进去</p><p>(在事件处理函数中可以直接使用event，我们可以不用显示设置形参)</p><p>每一次事件触发，都会获取一个新的事件处理对象，是对当前这一次事件的描述</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">eventTarget.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event)<br>&#125;<br>eventTarget.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br> <br>&#125;)   <br><span class="hljs-comment">//这个event即是事件对象 我们还经常写 e或者evt</span><br></code></pre></td></tr></table></figure><ul><li><p>常见的事件对象的属性和方法</p></li><li><ul><li><p>e.target 返回的是触发事件的对象（元素） ，即点击了哪个元素就返回哪个元素</p><p>this返回的是绑定事件的对象 （元素）</p><p>触发事件的对象和绑定事件的对象不一定就是同一个，因为有事件流</p><p>e.target也有兼容性</p></li><li><p>e.currentTarget与this一样，返回的事绑定事件的元素 只不过currentTarget 有兼容性问题 ie6&#x2F;7&#x2F;8不认识，所我们平时使用this就可以了</p></li><li><p>e.type 返回事件的类型 </p></li><li><p>e.preventDefaule()  阻止默认事件（默认行为） 标准 比如阻止链接在点击后跳转，阻止提交按钮点击后提交</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>a.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>   <span class="hljs-comment">//只有一种阻止默认事件的方式</span><br>e.<span class="hljs-title function_">preventDefaulet</span>();<br>&#125;)<br><br><span class="hljs-comment">//传统注册事件方式 有三种阻止默认事件的方式</span><br>a.<span class="hljs-property">onlick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-comment">//普通浏览器 </span><br>e.<span class="hljs-title function_">preventDefault</span>();<br><br><span class="hljs-comment">//return false也可以阻止默认行为 ，没有兼容性问题，但是return 后的代码就不在执行了，而且只限于传统注册事件的方式</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>；<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>e.stopPropagation() 阻止冒泡 标准   propagation 传播</p></li></ul></li></ul><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>事件的传播</p><p>当你在一个元素上触发行为的时候，会按照<strong>结构父级</strong>的顺序向上传播 <strong>行为</strong> ，直到window为止</p><p>当触发事件的时候，会按照结构父级的顺序向上传递同类型事件</p><p>事件对象里有一个path属性，表示当前事件的传播路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs js">----课堂展示案例<br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        #out&#123;<br>            width: 300px;<br>            height: 300px;<br>            background-color: rgb(43, 86, 226);<br>            border: 1px solid red;<br>            margin: 20px;<br>        &#125;<br>     #center&#123;<br>            width: 200px;<br>            height: 200px;<br>            background-color: rgb(43, 226, 98);<br>            border: 1px solid red;<br>            margin: 20px;<br>        &#125;<br>        #inner&#123;<br>            width: 100px;<br>            height: 100px;<br>            background-color: blueviolet;<br>            border: 1px solid red;<br>            margin: 20px;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=&quot;out&quot;&gt;<br>        &lt;div id=&quot;center&quot;&gt;<br>            &lt;div id=&quot;inner&quot;&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    <br>    &lt;script&gt;<br>        //当我们点击inner的时候点击行为会从inner到window向上传播<br>        inner.onclick=function(e)&#123;<br>            console.log(&#x27;点击了inner&#x27;,e);<br>        &#125;<br>        //给inner设置了移入的行为，只会触发同类型的事件，不会触发祖先元素绑定的点击事件<br>        inner.onmouseenter=function()&#123;<br>            console.log(&#x27;移入--了inner&#x27;);<br>        &#125;<br>        center.onclick=function()&#123;<br>            console.log(&#x27;点击了center&#x27;);<br>        &#125;<br>        center.onmouseenter=function()&#123;<br>            console.log(&#x27;移入--了center&#x27;);<br>        &#125;<br>        out.onclick=function()&#123;<br>            console.log(&#x27;点击了out&#x27;);<br>        &#125;<br><br>        document.body.onclick=function()&#123;<br>            console.log(&#x27;点击了body&#x27;);<br>        &#125;<br>        document.documentElement.onclick=function()&#123;<br>            console.log(&#x27;点击了html&#x27;);<br>        &#125;<br>        document.onclick=function()&#123;<br>            console.log(&#x27;点击了doucment&#x27;);<br>        &#125;<br><br>        window.onclick=function()&#123;<br>            console.log(&#x27;点击了window&#x27;);<br>        &#125;<br><br>    &lt;/script&gt;<br><br>&lt;script&gt;<br>  //----事件监听绑定事件<br>   inner.addEventListener(&#x27;click&#x27;,function(e)&#123;<br>  console.log(&#x27;点击了inner&#x27;,e.target,e.path);<br>&#125;,true)<br><br>    center.addEventListener(&#x27;click&#x27;,function(e)&#123;<br>      console.log(&#x27;点击了center&#x27;,e.target,e.path);<br>    &#125;,true)<br><br>   out.addEventListener(&#x27;click&#x27;,function(e)&#123;<br>     console.log(&#x27;点击了out&#x27;,e.target,e.path);<br>   &#125;,true)<br><br> document.body.addEventListener(&#x27;click&#x27;,function(e)&#123;<br>      console.log(&#x27;点击了body&#x27;,e.target,e.path);<br>    &#125;,true)<br><br>   document.documentElement.addEventListener(&#x27;click&#x27;,function(e)&#123;<br>     console.log(&#x27;点击了html&#x27;,e.target,e.path);<br>   &#125;,true)<br><br> document.addEventListener(&#x27;click&#x27;,function(e)&#123;<br>     console.log(&#x27;点击了document&#x27;,e.target,e.path);<br>   &#125;,true)<br><br> window.addEventListener(&#x27;click&#x27;,function(e)&#123;<br>     console.log(&#x27;点击了window&#x27;,e.target,e.path);<br>   &#125;,true)<br><br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ul><li><p>事件目标. target属性</p><ul><li><p>准确触发事件的那个元素</p></li><li><p>在事件对象有一个target属性表示事件目标，表示本次事件触发的时候，准确触发事件的的元素，而不是绑定事件的事件源</p></li></ul></li><li><p>事件流</p></li></ul><p>​    事件发生时会元素节点之间按照特定的顺序传播，这个传播过程即为DOM事件流</p><p>DOM事件流分为3个阶段</p><ul><li><p>捕获阶段 像是我们向水里扔一块石头，首先它会有一个下降的过程，从最顶层向事件发生的最具体元素的捕获过程</p><p>​     从 window 到 目标 的顺序来执行所有的事件（ducument html body div (目标阶段)）    </p></li><li><p>（当前目标阶段？？？）</p></li><li><p>冒泡阶段 像是小泡泡一样 再最顶层（具体元素）之后浮到水面上</p><p>从 目标 到 window 的顺序来执行所有的事件</p><p>（目标元素 body html document window）</p></li></ul><p>注意：</p><ul><li><p>js代码中只能执行捕获或者冒泡中的一个阶段</p></li><li><p>onclick 只能得到冒泡阶段</p></li><li><p>addEventLister((type,listener[,usercapture])   的第三个参数决定事件是按照冒泡还是捕获来执行</p><p>第三个参数为可选参数 ，取值为布尔值 true或false  默认值为false</p><p>false 表示：执行冒泡事件流，在事件冒泡阶段调用事件处理程序</p><p>true表示：执行捕获事件流，在事件捕获阶段调用事件处理程序</p></li><li><p>在实际开发中我们很少使用事件捕获</p></li><li><p>有些事件没有冒泡如 blur focus mouseenter  museleave  ？？</p></li><li><p>事件冒泡 有时候会带来麻烦，有时可以帮助很巧妙的做某些事情。。。 ？？</p></li></ul><h4 id="阻止事件传播"><a href="#阻止事件传播" class="headerlink" title="阻止事件传播"></a>阻止事件传播</h4><p>因为事件的传播，会导致在一个元素触发行为，会执行多个元素的绑定的事件处理函数</p><p>阻止事件传播的方式：</p><ul><li><p>事件对象.stopPropagation()        propagation 传播</p><p>标准浏览器</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-------try catch语句 语法</span><br><span class="hljs-comment">//如果try代码块里的语句没有报错，那么catch就不执行了</span><br><span class="hljs-comment">//如果try里面的语句报错了，那么就执行catch里面的代码</span><br><span class="hljs-comment">//在catch 接收的参数err是try里面报错信息</span><br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;尝试代码1&#x27;</span>)<br>   <span class="hljs-comment">// throw new Error(&#x27;777&#x27;);//这是我们手动抛出的错误</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//js抛出的错误也可以在catch的err参数接收</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;尝试代码2&#x27;</span>)<br>&#125;<span class="hljs-keyword">catch</span>(err)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;***&#x27;</span>,err);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;备用代码&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 尝试代码1  *** Error: 777  备用代码</span><br> <br></code></pre></td></tr></table></figure><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件委托也称为事件代理 </p><p>事件委托的原理：</p><p>不需要给每个子节点都添加绑定事件，而是将子元素的事件绑定到给他们共同的结构父节点上，这样在点击子节点时利用事件冒泡执行设置在父节点上的事件监听函数</p><p>可以通过函数的事件对象的target属性 获取被点击的是哪个节点</p><p>通过节点的nodeName和tagName判断是什么标签，注意标签名要大写</p><p>案例 ul li</p><p>​如果点击ul，event.target就是ul；    如果点击li，event.target就是li</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">---css<br>    ul&#123;<br>            <span class="hljs-attr">padding</span>: 20px;<br>            background-<span class="hljs-attr">color</span>: chartreuse;<br>       &#125;<br>       ul li&#123;<br>            <span class="hljs-attr">border</span>: 1px solid red;<br>       &#125;<br>---html<br>&lt;ul&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1我是第1个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2我是第2个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3我是第3个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4我是第4个li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  &lt;/ul&gt;<br>---js<br>      <span class="hljs-keyword">var</span> ul=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>); <span class="hljs-comment">//获取ul</span><br>      <span class="hljs-comment">//给ul绑定点击事件</span><br>        ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;点击li，通过事件冒泡将点击事件传播给ul，执行ul绑定的事件处理函数&quot;</span>);<br>            e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<span class="hljs-comment">//事件对象的兼容处理</span><br>            <span class="hljs-keyword">var</span> target=e.<span class="hljs-property">target</span>||e.<span class="hljs-property">srcElement</span>;<span class="hljs-comment">//事件目标的兼容性处理</span><br>            <span class="hljs-comment">// taret</span><br>            <span class="hljs-comment">// target就是事件目标，事件触发事件的元素，通过元素节点名可以知道点击哪个元素</span><br>           <span class="hljs-keyword">if</span>(target.<span class="hljs-property">nodeName</span>===<span class="hljs-string">&quot;LI&quot;</span>)&#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击的是li标签&#x27;</span>)<br>           &#125; <br>           <span class="hljs-keyword">if</span>(target.<span class="hljs-property">nodeName</span>===<span class="hljs-string">&quot;UL&quot;</span>)&#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击的是ul标签&#x27;</span>)<br>           &#125; <br><br>        &#125;)<br></code></pre></td></tr></table></figure><ul><li>事件委托的优点：</li></ul><p>1:减少元素事件的绑定</p><p>2:只操作一次DOM，提高了程序的性能</p><p>3:对新添加进来的子元素也可以执行事件，不需要在从新绑定事件</p><h3 id="阻止浏览器默认行为"><a href="#阻止浏览器默认行为" class="headerlink" title="阻止浏览器默认行为"></a>阻止浏览器默认行为</h3><ul><li><p>浏览器默认行为：不需我们手动绑定，本身就带有的事件行为</p><ul><li>a标签  自带点击行为</li><li>form标签 自带表单提交，当我们点击了submit按钮后自动表单提交</li><li>在页面只能够框选文字，自带框选效果，背景颜色</li><li>鼠标右键单击，自动弹出菜单</li></ul></li><li><p>阻止浏览器的默认行为要在同类型的事件里面阻止</p><p>阻止a标签的自动跳转，那么就在a标签的点击事件里面阻止</p><p>阻止form标签的表单提交，那就在form标签的submit事件里阻止</p><p>方法：事件对象.preventDefault()       标准浏览器</p><p>兼容性处理（不讲了）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;a href=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;点击跳转&lt;/a&gt;<br>--------js<br><span class="hljs-keyword">var</span> a=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        a.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我被点击了&#x27;</span>);<br>            e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>            <span class="hljs-comment">//阻止a标签点击事件的默认行为</span><br>                  <span class="hljs-comment">//-------------------------阻止默认行为的兼容处理1</span><br>            <span class="hljs-keyword">if</span>(e.<span class="hljs-property">preventDefault</span>)&#123;<br>                <span class="hljs-comment">//标准浏览器</span><br>                e.<span class="hljs-title function_">preventDefault</span>()<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                e.<span class="hljs-property">returnValue</span>=<span class="hljs-literal">false</span><br>            &#125;<br>                   <span class="hljs-comment">//---------------------------阻止默认行为的兼容处理2</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                e.<span class="hljs-title function_">preventDefault</span>()<br>            &#125;<span class="hljs-keyword">catch</span>(err)&#123;<br>                e.<span class="hljs-property">returnValue</span>=<span class="hljs-literal">false</span><br>            &#125;<br>            <span class="hljs-comment">//--------------------------------阻止默认行为方法</span><br>            <span class="hljs-comment">//阻止默认行为 直接return flse也可以阻止a标签的默认行为，（有的情况下不好使）但一般情况下都好使</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//在mac上测试不起作用</span><br>          <br>        &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//---阻止在页面中选中文字</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onselectstart</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>   e.<span class="hljs-title function_">preventDefault</span>();<span class="hljs-comment">//------阻止选中文字的默认行为，就无法选中文字了</span><br>   <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请支付后在选择&#x27;</span>)<br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//----右键单击事件</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">oncontextmenu</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>      e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>      <span class="hljs-comment">//阻止右键单击事件的默认行为  菜单</span><br>      <span class="hljs-keyword">try</span>&#123;<br>             e.<span class="hljs-title function_">preventDefault</span>()<br>         &#125;<span class="hljs-keyword">catch</span>(err)&#123;<br>             e.<span class="hljs-property">returnValue</span>=<span class="hljs-literal">false</span><br>         &#125;<br>     &#125;<br></code></pre></td></tr></table></figure></li></ul><p>js中事件分类：</p><p> 鼠标事件  键盘事件 浏览器事件 表单事件 拖拽事件 触摸事件（移动端） 其他事件</p><p>js中的原生事件（js自带的事件）没有大写字母，全是小写</p><h3 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h3><ul><li><p>click  鼠标点击 鼠标左键单击</p></li><li><p>dblclick 鼠标左键双击</p></li></ul><p>​如果同时绑定了鼠标单击和双击事件，每一个双击会触发两个单击行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> table= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;table&#x27;</span>)<br>table.<span class="hljs-property">ondblclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;鼠标左键双击&#x27;</span>);<br>&#125;<br>table.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;鼠标左键单击&#x27;</span>);<br>&#125;<br><br>----使用js触发绑定在元素的click事件<br> btn.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击按钮了&#x27;</span>)<br> &#125;<br><br> btn.<span class="hljs-title function_">click</span>();<span class="hljs-comment">//使用js触发绑定在元素的click事件</span><br><br> <span class="hljs-comment">//创建出来一个事件，参数 是你想要创建的事件类型</span><br> <span class="hljs-keyword">var</span> myEvent=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Event</span>(<span class="hljs-string">&#x27;dblclick&#x27;</span>);<br> <span class="hljs-comment">//在btn上触发创建出来的事件，如果元素上绑定的有相应的事件处理函数，就会执行相应的事件出来函数</span><br> btn.<span class="hljs-title function_">dispatchEvent</span>(myEvent);<br></code></pre></td></tr></table></figure><ul><li><p>contextmenu 鼠标右键单击 鼠标右键触发菜单</p></li><li><p>mousewheel  鼠标滚轮事件</p></li></ul><p>​给元素绑定鼠标滚轮事件后，在元素上滚动滚轮时触发，在元素外滚轮不会触发</p><ul><li><p>mousemove 鼠标移动</p></li><li><p>mouseover  鼠标移入</p></li><li><p>mouseout  鼠标移出</p></li><li><p>mouseenter 鼠标移入</p></li><li><p>mouseleave 鼠标移出</p><ul><li><p>mouseenter 和 mouseover的区别</p><p>mouseenter和mouseleave 事件不会进行事件传播即移入移出子元素不会向祖先元素传播</p></li></ul><p>Mouseover鼠标经过自身盒子会触发，经过自身盒子内部的子盒子依旧会触发绑定的回调函数，因为会冒泡</p><p>mouseenter只会在经过自身盒子会触发，经过自身盒子内部的子盒子不会触发回调函数，不会冒泡</p><p>根mouseenter搭配鼠标离开mouseleave同样不会冒泡</p></li><li><p>focus 获取鼠标焦点</p></li><li><p>blur  失去鼠标焦点</p></li><li><p>mousedown 鼠标按下</p></li></ul><p>  鼠标按下，不单指鼠标左键按下，鼠标右键，滚轮健，只要是鼠标上的健按下都会触发</p><ul><li><p>mouseup  鼠标弹起</p><p>​一个click事件会触发一个down一个up</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> table= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;table&#x27;</span>)<br>table.<span class="hljs-property">ondblclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;鼠标左键双击&#x27;</span>);<br>&#125;<br>    <br>table.<span class="hljs-property">onmousedown</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;鼠标按下&#x27;</span>)<br>&#125;<br>table.<span class="hljs-property">onmouseup</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;鼠标抬起&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>selectstart 开始选择</p></li></ul><p>当想在页面或者元素中选中文档时触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">onselectstart</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要选中文字&#x27;</span>)<br> &#125;<br>-----<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onselectstart</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>   e.<span class="hljs-title function_">preventDefault</span>();<span class="hljs-comment">//阻止选中文字的默认行为，就无法选中文字了</span><br>   <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请支付后在选择&#x27;</span>)<br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//禁用右键菜单</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;contextmenu&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br> e.<span class="hljs-title function_">preventDefault</span>();<br>&#125;)<br><span class="hljs-comment">//禁止选中文字</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;selectstart&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br> e.<span class="hljs-title function_">preventDefault</span>();<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h3><p>event对象代表事件的状态，根事件相关的一系列信息的集合，现阶段我们主要是用鼠标事件对象mouseEvent和键盘事件对象 keyboardEvent</p><p>鼠标事件对象</p><ul><li><p>按下的是哪一个按键</p><p>想要获取按下的是哪一个按钮要给元素绑定mousedown事件，不要绑定click事件，因为点击鼠标右键的时候不会触发click事件而是会出菜单</p><p>鼠标事件对象里面有一个button属性，记录按下的是哪一个按键</p><p>0 表示左键</p><p>1 表示滚轮</p><p>2 表示右键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">box1.<span class="hljs-property">onmousedown</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>  e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<span class="hljs-comment">// 处理事件对象兼容</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>光标的坐标（重点）</p><p>这三套坐标只要是鼠标事件，任何鼠标事件都好使</p><ul><li><p>e.clientX    e.clientY    </p><p>返回光标相对于浏览器窗口可视区域左边的位置  （X坐标）</p><p>返回光标相对于浏览器窗口可视区域上边的位置  （y坐标）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">页面滚动展示<br></code></pre></td></tr></table></figure></li><li><p>e.pageX     e.pageY    </p><p>返回光标相对于页面文档的左边的位置（X坐标）   ie9+ 支持</p><p>返回光标相对于页面文档的上边的位置（y坐标）   ie9+ 支持</p></li><li><p>e.screenX   e.screenY</p><p>返回光标相对于电脑屏幕的x坐标    Y坐标   </p></li><li><p>e.offsetX和e.offsetX</p><p>返回光标距离 触发事件的元素 的左上角的位置</p><p><strong>注意的是光标触发事件的元素（不是事件源，而是实际在身上点击的）</strong></p><p>如果不想按照里面的光标触发元素的左上角来计算坐标，而是按照事件来计算坐标，</p><p>处理方式：给里面的元素添加css样式 pointer- events：none；</p><p>​                如果不使用css，则需要使用js来计算，光标距离事件源的位置</p><p>​offsetParent 是获取偏移量时的参考的父元素（如果父元素没有设置定位则相对于body）</p><p>​offsetLeft  （ 如果祖先元素没有设置定位则相对于body的x位置）</p><p>e.pageX是光标距离页面左侧的距离，元素.offsetleft是元素距离页面</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js">------css<br>    body&#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attr">width</span>: 2000px;<br>        <span class="hljs-attr">height</span>: 2000px;<br>    &#125;<br>    .<span class="hljs-property">box1</span>&#123;<br>    <br>        <span class="hljs-comment">/* 里面的元素：在你计算坐标的时候不哟啊考虑我 */</span><br>        pointer-<span class="hljs-attr">events</span>: none; <br>        <br>        <span class="hljs-attr">width</span>: 200px;<br>        <span class="hljs-attr">height</span>:200px;<br>        background-<span class="hljs-attr">color</span>: aquamarine;<br>        <span class="hljs-attr">border</span>: 1px solid red;<br>        <span class="hljs-attr">margin</span>:50px;<br>        margin-<span class="hljs-attr">top</span>: 50px;<br><br><br>    &#125;<br>    .<span class="hljs-property">box2</span>&#123;<br>        <span class="hljs-attr">width</span>: 500px;<br>        <span class="hljs-attr">height</span>: 500px;<br>        background-<span class="hljs-attr">color</span>: <span class="hljs-title function_">rgb</span>(<span class="hljs-number">67</span>, <span class="hljs-number">63</span>, <span class="hljs-number">129</span>);<br>        <span class="hljs-attr">border</span>: 1px solid red;<br>        <span class="hljs-attr">margin</span>:100px;<br>    &#125;<br>------html<br>  &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;box2&quot;</span> id=<span class="hljs-string">&quot;box2&quot;</span> &gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &lt;/div&gt;<br>------js   <br><br>box2.<span class="hljs-property">onmousedown</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">e</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;----------&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;clientX&#x27;</span>,e.<span class="hljs-property">clientX</span>,<span class="hljs-string">&#x27;-----&#x27;</span>,<span class="hljs-string">&#x27;clientY&#x27;</span>,e.<span class="hljs-property">clientY</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pageX&#x27;</span>,e.<span class="hljs-property">pageX</span>,<span class="hljs-string">&#x27;-----&#x27;</span>,<span class="hljs-string">&#x27;clientY&#x27;</span>,e.<span class="hljs-property">pageY</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;offsetX&#x27;</span>,e.<span class="hljs-property">offsetX</span>,<span class="hljs-string">&#x27;-----&#x27;</span>,<span class="hljs-string">&#x27;offsetY&#x27;</span>,e.<span class="hljs-property">offsetY</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;screenX&#x27;</span>,e.<span class="hljs-property">screenX</span>,<span class="hljs-string">&#x27;-----&#x27;</span>,<span class="hljs-string">&#x27;screenX&#x27;</span>,e.<span class="hljs-property">screenX</span>);<br>    <br>    <span class="hljs-comment">//----不使用css，使用js来计算，光标距离事件源的位</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">pageX</span>,box1.<span class="hljs-property">offsetLeft</span>,<span class="hljs-string">&#x27;----&#x27;</span>,e.<span class="hljs-property">pageX</span>-box2.<span class="hljs-property">offsetLeft</span>);（自己写的）<br>    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">offsetX</span>+box1.<span class="hljs-property">offsetLeft</span>-box2.<span class="hljs-property">offsetLeft</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">offsetY</span>+box1.<span class="hljs-property">offsetTop</span>-box2.<span class="hljs-property">offsetTop</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.pageX)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> 实时获取页面中光标的位置 显示到页面中<br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">  获取光标的位置</span><br><span class="hljs-comment">  page 一套</span><br><span class="hljs-comment">  client 一套</span><br><span class="hljs-comment">  如果没有滚动条无所谓，一但有滚动条则拿到的都是相对窗口的</span><br><span class="hljs-comment">  offset一套</span><br><span class="hljs-comment">  因为你页面一定会有其他的元素，所以不合适</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>document.onmousemove=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.pageX, e.pageY);<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//----案例：跟随鼠标移动的图片</span><br><span class="hljs-keyword">var</span> img=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">pageX</span>, e.<span class="hljs-property">pageY</span>);<br>    img.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=e.<span class="hljs-property">pageX</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>    img.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>=e.<span class="hljs-property">pageY</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;<br>图拍绝对定位，通过偏移量让元素动起来，且图片不会占位置<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-comment">//在页面中移动，给document注册事件</span><br><span class="hljs-comment">//mouseover事件 只要我们的鼠标移动1px，就会触发这个事件</span><br><span class="hljs-comment">//只要我们的鼠标一移动，就会获取最新的鼠标坐标，给图片设置偏移量就可以让图片跟着鼠标动起来</span><br><span class="hljs-keyword">var</span> x=e.<span class="hljs-property">pagex</span>;<br><span class="hljs-keyword">var</span> y=e.<span class="hljs-property">pagey</span>;<br>pic.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=x+<span class="hljs-string">&#x27;px&#x27;</span>;<br>pic.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>=y+<span class="hljs-string">&#x27;px&#x27;</span>;<br><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">   .<span class="hljs-property">text</span>-box&#123;<br>        <span class="hljs-attr">width</span>: 400px;<br>        <span class="hljs-attr">height</span>: 400px;<br>        background-<span class="hljs-attr">color</span>: chartreuse;<br>        <span class="hljs-attr">border</span>: 1px solid red;<br>        <span class="hljs-attr">position</span>: absolute;<br>    &#125;<br>-----html<br> &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;text-box&quot;</span>&gt;&lt;/div&gt;<br>------js<br>    <span class="hljs-keyword">var</span> textBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.text-box&#x27;</span>);<br>    textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        <span class="hljs-comment">//鼠标在盒子内点击，获取鼠标在盒子内的坐标</span><br>         <span class="hljs-comment">//获取点击模态框时鼠标落下时光标在元素内的位置</span><br>         <span class="hljs-keyword">var</span> x=e.<span class="hljs-property">offsetX</span>;<br>         <span class="hljs-keyword">var</span> y=e.<span class="hljs-property">offsetY</span>;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">e</span>)&#123;<br>            <span class="hljs-comment">//使用光标在页面中的坐标减去光标在盒子内坐标就是盒子的定位</span><br>            textBox.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=e.<span class="hljs-property">pageX</span>-x+<span class="hljs-string">&#x27;px&#x27;</span>;<br>            textBox.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>=e.<span class="hljs-property">pageY</span>-y+<span class="hljs-string">&#x27;px&#x27;</span>;<br>        &#125;<br>        <span class="hljs-comment">//给元素绑定监听事件，当鼠标移动的时候给元素重新定位</span><br>        textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,fn)<br>        <span class="hljs-comment">//给元素绑定监听事件，当鼠标抬起的时候，清除鼠标移动事件</span><br>        textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            textBox.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,fn);<br>        &#125;)<br>    &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//---在指定的元素中显示跟随者光标走的提示文本</span><br><br>     .<span class="hljs-property">text</span>-box&#123;<br>        <span class="hljs-attr">width</span>: 400px;<br>        <span class="hljs-attr">height</span>: 400px;<br>        background-<span class="hljs-attr">color</span>: chartreuse;<br>        <span class="hljs-attr">border</span>: 1px solid red;<br>        <span class="hljs-attr">margin</span>: 100px;<br>    &#125;<br>    .<span class="hljs-property">text</span>-del&#123;<br>        <span class="hljs-attr">width</span>: 80px;<br>        <span class="hljs-attr">height</span>: 20px;<br>        background-<span class="hljs-attr">color</span>: cornflowerblue;<br>        <span class="hljs-attr">position</span>:fixed  <span class="hljs-comment">//提示文本相对于浏览器窗口定位</span><br>        <span class="hljs-attr">display</span>: none;<br>    &#125;<br><br>-----html<br><br> &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;text-box&quot;</span>&gt;<br> &lt;/div&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-del&quot;</span>&gt;</span>提示文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br> <br>---js<br><br>    <span class="hljs-keyword">var</span> textBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.text-box&#x27;</span>);<br>    <span class="hljs-keyword">var</span> textDel=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.text-del&#x27;</span>);<br>    textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseover&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>       textDel.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span>;<br>    &#125;)<br>    textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseout&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        textDel.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;none&#x27;</span><br>    &#125;)<br>    textBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>        <span class="hljs-comment">//给坐标+5是为了处理闪烁的问题</span><br>       <span class="hljs-keyword">var</span> x=e.<span class="hljs-property">clientX</span>+<span class="hljs-number">5</span>;<br>       <span class="hljs-keyword">var</span> Y=e.<span class="hljs-property">clientY</span>+<span class="hljs-number">5</span>;<br>       <span class="hljs-comment">//记住要带单位</span><br>       textDel.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=x+<span class="hljs-string">&#x27;px&#x27;</span>;<br>       textDel.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>=Y+<span class="hljs-string">&#x27;px&#x27;</span>;<br>    &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs js">-----------京东商品展示的放大镜效果，注意选择图片最大是正方形，知道尺寸<br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        /* 图片展示框 */<br>        .goods-box&#123;<br>            width: 300px;<br>            height: 250px;<br>            background-color: cyan;<br>            border: 1px solid red;<br>            position: relative;<br>        &#125;<br>        /* 展示的图片 */<br>        img&#123;<br>            width: 100%;<br>        &#125;<br>        /* 遮罩层，相对于图片展示框定位 */<br>        .masker&#123;<br>            width: 200px;<br>            height: 170px;<br>            background-color: rgba(244,39,123,0.3);<br>            position: absolute;<br>            display: none;<br>            cursor:progress;<br>            /* 设置计算光标在元素父元素内的位置时不要考虑我 */<br>            pointer-events: none;    <br>            <br>        &#125;<br>        /* 大图片展示框，相对于图片展示框定位  */<br>        .big-goods&#123;<br>            width: 400px;<br>            height: 300px;<br>            background-color: rgba(60, 52, 129, 0.3);<br>            position: absolute;<br>            top:0;<br>            left: 315px;<br>            display: none;<br>            overflow:hidden;<br>        <br>        &#125;<br>        /* 大图，相对于大图展示框定位 */<br>        .big-goods img&#123;<br>            width: 150%;<br>            position: absolute;<br>        <br>        &#125;<br><br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;!-- 图片展示框 --&gt;<br>    &lt;div class=&quot;goods-box&quot;&gt;<br>        &lt;!-- 图片展示 --&gt;<br>        &lt;img src=&quot;../图片素材/by.jpeg&quot; alt=&quot;&quot;&gt;<br>        &lt;!-- 遮罩层 --&gt;<br>        &lt;div class=&quot;masker&quot;&gt;&lt;/div&gt;<br>        &lt;!-- 大图展示框 --&gt;<br>        &lt;div class=&quot;big-goods&quot;&gt;<br>            &lt;!-- 大图 --&gt;<br>            &lt;img src=&quot;../图片素材/by.jpeg&quot; alt=&quot;&quot;&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        // 获取图片展示框<br>var goodsBox=document.querySelector(&#x27;.goods-box&#x27;)<br>// 获取遮罩层<br>var masker=document.querySelector(&#x27;.masker&#x27;)<br>// 获取大图框<br>var bigGoods=document.querySelector(&#x27;.big-goods&#x27;)<br>//获取大图元素<br>var bigImg=document.querySelector(&#x27;.big-goods img&#x27;);<br><br>//鼠标进入商品展示框就显示遮罩和大图<br>goodsBox.addEventListener(&#x27;mouseover&#x27;,function()&#123;<br>    masker.style.display=&#x27;block&#x27;;<br>    bigGoods.style.display=&#x27;block&#x27;;<br>&#125;)<br><br>//鼠标移除商品展示框就隐藏遮罩和大图<br>goodsBox.addEventListener(&#x27;mouseout&#x27;,function()&#123;<br>    masker.style.display=&#x27;none&#x27;;<br>    bigGoods.style.display=&#x27;none&#x27;;<br>&#125;)<br>// 给图片展示框注册鼠标移动事件<br>goodsBox.addEventListener(&#x27;mousemove&#x27;,fn);<br><br>function fn(e)&#123;<br>         e=e||window.event;   <br>        //e.offsetX为光标在元素展示筐内的位置，本可以直接赋值给遮罩层的移动距离 <br>        //asker.offsetwidth 是msker盒子的宽高<br>        var x=e.offsetX-masker.offsetWidth/2;  //e.offsetX等同于 e.pageX-goodsBox.offsetLeft <br>        var y=e.offsetY-masker.offsetHeight/2;//e.offsetY 等同于 e.pageY-goodsBox.offsetTop<br>        //遮罩层最大移动距离=图片展示框的尺寸-遮罩层的尺寸<br>        var maxX=goodsBox.offsetWidth-masker.offsetWidth;<br>        var maxY=goodsBox.offsetHeight-masker.offsetHeight;<br><br> <br>        //设置遮罩层移动的范围<br>        if(x&lt;=0)&#123;<br>            x=0;<br>        &#125;else if(x&gt;=maxX) &#123;<br>            console.log(222);<br>            x=maxX<br>        &#125;<br>        if(y&lt;=0)&#123;<br>            y=0;<br>        &#125;else if(y&gt;=maxY) &#123;<br>            console.log(222);<br>            y=maxY<br>        &#125;<br><br>        //设置遮罩层的移动距离<br>        masker.style.left=x+&#x27;px&#x27;;<br>        masker.style.top=y+&#x27;px&#x27;;<br><br><br>        //-----处理大图移动<br>         //计算大图最大移动距离=大图的尺寸-大图框的尺寸<br>         var bigMaxWidth=bigImg.offsetWidth-bigGoods.offsetWidth;<br>         var bigMaxHeight=bigImg.offsetHeight-bigGoods.offsetHeight;<br>          //获取大图的移动距离=遮罩层移动距离*大图最大移动距离/遮罩层最大移动距离<br>         var  bigx=x*bigMaxWidth/maxX<br>         var  bigy=y*bigMaxHeight/maxY<br>         console.log(bigx,bigy);<br>        //给大图设置移动距离<br>         bigImg.style.left=-bigx+&#x27;px&#x27;;<br>         bigImg.style.top=-bigy+&#x27;px&#x27;;<br>    &#125;<br><br><br><br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><p>表单事件绑定给表单元素和form标签</p><ul><li><p>onchange </p><p>表单内容改变时触发</p><p>当表单失焦的时候比较如果和聚焦时内容不一样才叫做改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ipt=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br>---<br>ipt.<span class="hljs-property">onchange</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>         <span class="hljs-string">&#x27;表单内容改变了&#x27;</span><br>      )<br>  &#125;<br>---  <br>ipt.<span class="hljs-property">oninput</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;输入内容&#x27;</span>)<br>  &#125; <br>--<br>ipt.<span class="hljs-property">onfocus</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;聚焦&#x27;</span>)<br>  &#125;<br>ipt.<span class="hljs-property">onblur</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;失焦&#x27;</span>)<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>oninput 表单输入事件</p><p>当input和textarea内值改变时就会触发</p><p>只要在表单内输入内容就会触发</p></li><li><p>onfocus  表单聚焦事件</p></li><li><p>onblur 表单失焦时触发</p></li><li><p>onsubmit 表单提交事件</p><p>事件是绑定给form标签使用的</p><p>当点击form里的submit时侯触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;form action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>-----<br>    <span class="hljs-keyword">var</span> inp=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)<br>    <span class="hljs-keyword">var</span> form=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;form&#x27;</span>)<br>    <span class="hljs-comment">//-------表单提交事件要绑定给form标签，而不是提交按钮</span><br>    form.<span class="hljs-property">onsubmit</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;表单提交&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//阻止表单提交后刷新页面</span><br>    &#125;<br>    <span class="hljs-comment">//-------表单重置事件要绑定给form标签，而不是提交按钮</span><br>    form.<span class="hljs-property">onreset</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;重置表单内容&#x27;</span>);<br>        <span class="hljs-comment">// return false; //阻止表单提交后刷新页面</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>onreset 表单重置事件</p><p>事件是绑定给form标签使用的</p><p>当点击reset按钮时才能触发</p></li></ul><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘事件不是所有元素都能触发，表单元素（有选中的效果），document（是否在当前页面），window可以触发（是否在当前tab窗口）</p><ul><li><p>keydown  </p><p>键盘上某个按键按下时触发 能识别所有的按键，实际开发中经常使用</p><p>中文输入法也好使</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ipt=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br>----<br>    ipt.<span class="hljs-property">onkeydown</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;键盘按下了&#x27;</span>)<br>    &#125;<br>   --------<br>   ipt.<span class="hljs-property">onkeypress</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;键盘按下&#x27;</span>)<br>    &#125;<br>    ---<br>      ipt.<span class="hljs-property">onkeyup</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;键盘抬起了&#x27;</span>)<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>keypress </p><p>必须要准确嵌入到文本筐里内才会触发，即出现在文本框里的内容要和按下的按键一致时才可以触发</p><p> 它不能识别功能键 ctrl shift 左右上下箭头等，但是keycode属性能区分大小写</p></li><li><p>keyup</p><p>键盘上某个按键松开(抬起)时触发，任意按键</p></li></ul><p>（不对：onkeydown和onkeyup 不区分字母大小写，onkeypress 区分字母大小写）</p><p>三个事件的执行顺序是 keydown    keypress     keyup</p><h4 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h4><p>键盘事件对象的信息：</p><ul><li><p>按下哪个键</p><ul><li><p>事件对象里有一个key属性</p><p>作用：表示你按下的那个按键</p><p>可以区分大小写，所有的按键都适用</p><p>兼容问题：   ie低版本不能使用</p><p>键盘事件对象的key属性2018以后新增的属性，不经常用，因为兼容性问题</p></li><li><p>事件对象里有一个keycode属性</p><p>作用：表示你按下的那个按键，但是以编码的顺序返回（ASC II值中的顺序）</p><p>兼容问题：在火狐FireFox&lt;2的火狐浏览器不支持，但是现在低版本的火狐已经装不上了，市面很少，所以其兼容性可以不用考虑</p><p>​在火狐低版本可以使用键盘事件对象的which属性</p><p>处理兼容：var code&#x3D;e.keycode||e.which</p></li></ul></li><li><p>按下的是不是组合按键</p><p>事件对象里的altkey属性：表示alt键   mac上 option键</p><p>事件对象里的ctrlkey属性：表示ctrl键</p><p>事件对象里的shiftkey属性：表示shift键</p><p>事件对象里的metakey属性：表示win键（菜单键） mac上command键 </p><p>   ie浏览器 不支持 键盘对象的metakey属性，在ie浏览器中只能靠键盘码去捕获了</p><p>这四个属性的值都是布尔值</p><p>表示你在按下其他按键的时候，如果这四个属性的某一个值为true，表示同时按下了这个按键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> inp=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br>inp.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>        <span class="hljs-comment">//判断组合按键</span><br>        <span class="hljs-comment">//按下大写A，即shift+a</span><br>      <span class="hljs-keyword">if</span>(e.<span class="hljs-property">shiftKey</span>&amp;&amp;e.<span class="hljs-property">keyCode</span>==<span class="hljs-number">65</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你按下的是shift+a&#x27;</span>);<br>      &#125;;<br>      <span class="hljs-keyword">if</span>(e.<span class="hljs-property">shiftKey</span>&amp;&amp;e.<span class="hljs-property">ctrlKey</span>&amp;&amp;e.<span class="hljs-property">altKey</span>&amp;&amp;e.<span class="hljs-property">keyCode</span>==<span class="hljs-number">65</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你按下的是shift+ctrl+alt+a&#x27;</span>);<br>      &#125;  <br>  <br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><p>案例：检测用户按下s后使页面的输入框获取光标 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//京东</span><br><span class="hljs-keyword">var</span> inp=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br> <span class="hljs-comment">//---此处不应用keydown因为按下后没有及时松开，input框获取光标后会将s字母输入在input框内，所以keyup</span><br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>              e=e||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>              <span class="hljs-comment">//判断用户按下的是s键，就将页面中的input框获取光标</span><br>            <span class="hljs-keyword">if</span>(e.<span class="hljs-property">keyCode</span>==<span class="hljs-number">83</span>)&#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你按下的是s键&#x27;</span>);<br>              inp.<span class="hljs-title function_">focus</span>();<span class="hljs-comment">//页面input框获取光标</span><br>            &#125;;<br>      &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//---------京东的邮件查询</span><br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;style&gt;<br>----------------css<br>.text-con&#123;<br>    margin:200px 0 0 0;<br>    width: 300px;<br>    height: 30px;<br>    border: 1px solid red;<br>    position: relative;<br>&#125;<br>.text-title&#123;<br>    width: 300px;<br>    height: 30px;<br>    border: 1px solid blueviolet;<br>    position: absolute;<br>    display: none;<br>    top:-30px;<br>    left:0;<br>&#125;<br>input&#123;<br>    width: 300px;<br>    height: 30px;<br>    outline: none;<br>&#125;<br>--------------------<br>&lt;/style&gt;<br>&lt;/head&gt;<br>------------html<br>&lt;div class=&quot;text-con&quot;&gt;<br>    &lt;div class=&quot;text-title&quot;&gt;<br>    &lt;/div&gt;<br>  &lt;input class=&quot;text-input&quot; type=&quot;text&quot;&gt;<br>&lt;/div&gt;<br>&lt;body&gt;<br>    &lt;script&gt;<br>------------js<br>        var inp=document.querySelector(&#x27;input&#x27;);<br>        var textBox=document.querySelector(&#x27;.text-title&#x27;);<br>        //此处为什么用keyup而不是用keydown和keypress，是因为keydown和keypress当按键按下触发时，文字还没有落入文本框<br>        //keyup当事件触发时，文字已将落入文本框了<br>        inp.addEventListener(&#x27;keyup&#x27;,function(e)&#123;<br>                e=e||window.event;<br>                //判断用户按下的是s键，就将页面中的input框获取光标<br>              <br>                if(inp.value==&#x27;&#x27;)&#123;<br>                   //如果输入框内容为空则隐藏提示框<br>                    textBox.style.display=&#x27;none&#x27;;<br>                &#125;else&#123;<br>                    textBox.style.display=&#x27;block&#x27;;<br>                    textBox.innerText=inp.value;<br>                &#125;<br><br>        &#125;)<br>        //当input框失去焦点是就隐藏提示框<br>        inp.addEventListener(&#x27;blur&#x27;,function(e)&#123;<br>                e=e||window.event;<br>                //判断用户按下的是s键，就将页面中的input框获取光标<br>                    textBox.style.display=&#x27;none&#x27;;<br>        &#125;)<br>        //当input框获取焦点是就显示提示框<br>        inp.addEventListener(&#x27;focus&#x27;,function(e)&#123;<br>                e=e||window.event;<br>                //判断用户按下的是s键，就将页面中的input框获取光标<br>                if(inp.value!=&#x27;&#x27;)&#123;<br>                    textBox.style.display=&#x27;block&#x27;;<br>                &#125;           <br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-----留言板案例</span><br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        li &#123;<br>            list-style: none;<br>            background-color: cornflowerblue;<br>            height: 30px;<br>            line-height: 30px;<br>            width: 500px;<br>            margin-top: 10px;<br>            border-radius: 10px;<br>            margin-top: 5px;<br>            margin-right: 5px;<br>            overflow: hidden;<br>            text-overflow: ellipsis;<br>        &#125;<br><br><br><br>        ul &#123;<br>            background-color: aqua;<br>        &#125;<br><br>        li&gt;button &#123;<br>            float: right;<br>            background-color: lightcoral;<br>            margin-top: 3px;<br>            margin-right: 10px;<br>            border-radius: 5px;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;80&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;<br>    &lt;p&gt;&lt;span&gt;还能输入340个字&lt;/span&gt;&lt;/p&gt;<br>    &lt;input id=&quot;btn1&quot; type=&quot;button&quot; value=&quot;发布&quot;&gt;<br><br>    &lt;ul&gt;<br>        &lt;!-- &lt;li&gt;1111 &lt;button class=&quot;button&quot; type=&quot;button&quot;&gt;删除&lt;/button&gt; &lt;/li&gt; --&gt;<br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        var btn1 = document.querySelector(&#x27;#btn1&#x27;);<br>        var text = document.querySelector(&#x27;textarea&#x27;);<br>        var ul = document.querySelector(&#x27;ul&#x27;);<br>        var span = document.querySelector(&#x27;span&#x27;)<br><br>        text.addEventListener(&#x27;input&#x27;, function () &#123;<br>            if (text.value.length &gt; 340) &#123;<br>                text.value = text.value.substring(0, 340)<br>                span.innerHTML = &#x27;不能再输了&#x27;<br>            &#125; else &#123;<br>                span.innerHTML = `还可以输入$&#123;340 - text.value.length&#125;个字`<br>            &#125;<br>        &#125;)<br>        btn1.addEventListener(&#x27;click&#x27;, function () &#123;<br>            if (text.value) &#123;<br>                ul.innerHTML = `&lt;li&gt;$&#123;text.value&#125;&lt;button class=&quot;button&quot; type=&quot;button&quot;&gt;删除&lt;/button&gt; &lt;/li&gt;` + ul<br>                    .innerHTML;<br>                text.value = &#x27;&#x27;;<br>                span.innerHTML = &#x27;还可以输入340个字&#x27;<br>            &#125; else &#123;<br>                alert(&#x27;请输入内容&#x27;)<br>            &#125;<br>        &#125;)<br><br>        //事件委托<br>        ul.addEventListener(&#x27;click&#x27;, function (e) &#123;<br>            e = e || window.event;<br>            // console.log(e.target, e.target.nodeName);<br>            if (e.target.nodeName == &#x27;BUTTON&#x27;) &#123;<br>                console.log(&#x27;点击了删除按钮&#x27;)<br>                //将button的父元素节点删除<br>                e.target.parentElement.remove();<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="拖拽事件"><a href="#拖拽事件" class="headerlink" title="拖拽事件"></a>拖拽事件</h3><p>drag翻译 拖拽</p><p>有一些标签天生可以拖拽，比如img标签，一般元素如果想触发拖拽行为，需要给被拖拽的元素添加一个属性</p><p>draggable&#x3D;”ture”</p><ul><li><p>拖拽事件需要两个元素完成一个完整的拖拽</p><ul><li>拖拽元素</li><li>目标的元素</li></ul></li><li><p>ondragstrat    拖拽开始</p><p>是绑定在被拖拽的元素上的 ，在按下鼠标开始拖拽的那一瞬间触发开始拖拽事件</p></li><li><p>ondrag   拖拽移动</p><p>是绑定在被拖拽的元素上的</p></li><li><p>ondragend   拖拽结束</p><p>是绑定在被拖拽的元素上的</p></li><li><p>ondragenter  拖拽元素进入目标元素</p><p>绑定给目标元素</p><p>当光标进入目标元素那一瞬间触发</p></li><li><p>ondragleave   拖拽元素离开目标元素</p><p>绑定给目标元素</p><p>当光标离开目标元素那一瞬间触发</p></li><li><p>ondragover   拖拽元素在目标元素里移动</p><p>绑定给目标元素</p></li><li><p>ondrop   拖拽元素在目标元素内放手</p><p>绑定给目标元素</p><p>必须在dragover事件内阻止默认行为</p></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs arcade">   &lt;div class=<span class="hljs-string">&quot;box1&quot;</span> id=<span class="hljs-string">&quot;box1&quot;</span>  draggable=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>  <span class="hljs-comment">//拖拽元素</span><br>    &lt;/div&gt;<br>    &lt;div class=<span class="hljs-string">&quot;box2&quot;</span> id=<span class="hljs-string">&quot;box2&quot;</span> &gt;<br>     <span class="hljs-comment">//目标元素</span><br>    &lt;/div&gt;<br>--------<br>   <span class="hljs-comment">//------被拖拽元素上绑定的事件</span><br>        box1.ondragstart=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<br>            <span class="hljs-string">&#x27;拖拽开始&#x27;</span><br>            )<br>        &#125;<br>         box1.ondrag=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<br>            <span class="hljs-string">&#x27;拖拽移动了～&#x27;</span><br>            )<br>        &#125;<br>        box1.ondragend=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<br>            <span class="hljs-string">&#x27;拖拽结束了～wuwu～&#x27;</span><br>            )<br>        &#125;<br><br>        <span class="hljs-comment">//--------目标元素上绑定的拖拽事件</span><br>        box2.ondragenter=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;拖拽元素进入目标元素&#x27;</span>);<br>        &#125;<br>        box2.ondragleave=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;拖拽元素--离开--目标元素&#x27;</span>);<br>        &#125;<br>        box2.ondragover=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>            e.preventDefault();<span class="hljs-comment">//为了在目标元素内放手，要在dragover内阻止默认行为</span><br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;拖拽元素--在--目标元素--内移动&#x27;</span>);<br>            <br>        &#125;<br>        box2.ondrop=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;拖拽元素--在--目标元素--放手&#x27;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><p>（同下移动端事件）</p><p>移动端兼容性比较好，我们不需要考虑以前js所提到的那些兼容性问题，可以放心使用原生js书写效果，但是移动端也有自己独特的地方，比如，触摸事件 touch，andriod 和ios都有。</p><p>touch对象代表一个触摸点，触摸点可能是一根手指也可能是一根触摸笔，触屏事件可以响应用户手指对屏幕或触控板的操作</p><ul><li><p>常见的触屏事件：</p><ul><li><p>touchstart 手指触摸到一个DOM元素时触发</p></li><li><p>touchmove 手指在一个DOM元素上滑动时触发</p></li><li><p>touchend 手指从一个DOM 元素上移除时触发</p><p>移动端事件只有这三个，移动端所有事件都是用这个三个事件决定的</p><p>按下去记录时间，抬起来记录一个时间，超过1s就是长按，300ms以内轻触</p><p>按下去记录手指坐标，随时记录手指坐标来知道是左滑，上滑，右滑，下滑</p></li></ul></li><li><p>触摸事件对象</p></li></ul><p>touchEvent 触摸事件对象描述手指在触摸平面删的状态变化，可以描述一个或多个触摸点，使开发者可以检测触点的移动，增加和减少等</p><p>​- 触摸事件对象.touchs  </p><p>​ 正在触摸屏幕的所有手指的列表</p><p>​- 触摸事件对象.targetTouches </p><p>​正在触摸当前DOM元素上的手指的列表数组</p><p>​因为我们一般都是触摸元素，经常使用的事件对象里的targettouches，可以获取到触摸元素的所有手指</p><p>​通过获取数组成员的方法获取到某一个手指的指定信息</p><p>​- 触摸事件对象.changedTouches  </p><p>​手指状态发生了改变的列表，从无到有，从有到无的变化</p><p>​当我们手指离开屏幕时就没有了touches和targetTouches列表，但是会有changedTouches</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;触摸开始&#x27;</span>,e)</span><br><span class="language-javascript">        <span class="hljs-comment">//   console.log(e.touchs); //正在触摸屏幕的所有手指的列表</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   console.log(e.targetTouches); //正在触摸当前DOM元素上的手指的列表</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   console.log(e.changedTouches);//手指状态发生了改变的列表，从无到有，从有到无的变化</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      </span><br><span class="language-javascript">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(&#x27;触摸移动&#x27;,e)</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      </span><br><span class="language-javascript">        <span class="hljs-comment">//手指离开DOM元素事件</span></span><br><span class="language-javascript">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchend&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//当我们手指离开屏幕时就没有了touches和targetTouches列表，但是会有changedTouches</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;手指离开&#x27;</span>,e)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br><br>        #div&#123;<br>            width: 300px;<br>            height: 300px;<br>            border:1px solid red;<br>            background: #fdf9f9;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=&quot;div&quot;&gt;<br><br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        var startX=0;<br>        var moveX=0;<br>        var isMove=false;<br><br>        div.addEventListener(&#x27;touchstart&#x27;,function(e)&#123;<br>            console.log(&#x27;触摸开始&#x27;,e)<br>            div.style.backgroundColor=&#x27;#807e7e&#x27;<br>            startX=e.targetTouches[0].clientX;<br>            console.log(&#x27;X----&#x27;,startX)<br>        //   console.log(e.touchs); //正在触摸屏幕的所有手指的列表<br>        //   console.log(e.targetTouches); //正在触摸当前DOM元素上的手指的列表<br>        //   console.log(e.changedTouches);//手指状态发生了改变的列表，从无到有，从有到无的变化<br>        &#125;)<br>        div.addEventListener(&#x27;touchmove&#x27;,function(e)&#123;<br>            isMove=true;<br>            moveX=e.targetTouches[0].clientX-startX;<br>            // console.log(&#x27;触摸移动&#x27;,e)<br>            console.log(&#x27;move---&#x27;,moveX)<br>        &#125;)<br>        //手指离开DOM元素事件<br>        div.addEventListener(&#x27;touchend&#x27;,function(e)&#123;<br>            div.style.backgroundColor=&#x27;white&#x27;<br>            //当我们手指离开屏幕时就没有了touches和targetTouches列表，但是会有changedTouches<br>            console.log(&#x27;手指离开&#x27;,e)<br>            if(isMove&amp;&amp;Math.abs(moveX)&gt;50)&#123;<br>                if(moveX&lt;0)&#123;<br>                    console.log(&#x27;左滑&#x27;)<br>                &#125;else&#123;<br>                console.log(&#x27;右滑&#x27;)<br>                &#125;<br>            &#125;<br>            // startX=e.targetTouches[0].clientX;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h3><ul><li>transitioned 过渡结束事件</li></ul><p>当给元素设置了过渡属性时，过渡结束时触发，有几个属性过渡，在结束时触发几次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">    .<span class="hljs-property">box1</span>&#123;<br>       <span class="hljs-attr">width</span>: 200px;<br>       <span class="hljs-attr">height</span>:200px;<br>       background-<span class="hljs-attr">color</span>: aquamarine;<br>       <span class="hljs-attr">border</span>: 1px solid red;<br>       <span class="hljs-attr">transition</span>: all 1s;<br><br>   &#125;<br>   .<span class="hljs-property">box1</span>:hover&#123;<br>       <span class="hljs-attr">width</span>:300px;<br>       background-<span class="hljs-attr">color</span>: chartreuse;<br>   &#125;<br>----<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> -----<br>  box1.<span class="hljs-property">ontransitionend</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;过渡结束了&#x27;</span> )<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>selectstart 开始选择</li></ul><p>当想在页面或者元素中选中文档时触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">onselectstart</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我要选中文字&#x27;</span>)<br> &#125;<br>-----<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onselectstart</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>   e.<span class="hljs-title function_">preventDefault</span>();<span class="hljs-comment">//阻止选中文字的默认行为，就无法选中文字了</span><br>   <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请支付后在选择&#x27;</span>)<br>&#125; <br></code></pre></td></tr></table></figure><ul><li><p>visibilitychange 窗口显示和隐藏</p><p>只绑定给document,当切换选项卡或者显示或缩小窗口时会触发</p><p>document身上有一个属性，叫做visibilityState属性可以表示当前页面是显示还是隐藏状态 hidden或者visibilitySate</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-variable language_">document</span>.<span class="hljs-property">onvisibilitychange</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;窗口显示状态变化了&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeDocument</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 可以给document添加一个显示隐藏的监听器</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;标签页状态变化&#x27;</span>)<br>        <span class="hljs-comment">// document身上有一个属性，叫做visibilityState属性可以表示当前页面是显示还是隐藏状态 hidden或者visibilitySate</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span>==<span class="hljs-string">&#x27;hidden&#x27;</span>)&#123;<br>            <span class="hljs-comment">//页面隐藏了</span><br>            <br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//页面显示了</span><br><br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>audio和video标签都有一个事件叫做 timeupdate</p><p>只要时间变换就会触发，如果音视频暂停了就不会触发了，大概是1s 四次，即250ms捕获一次音乐的变化</p><p>audio元素有一个属性duration表示总时间</p><p>currentTime属性表示当前时间，以秒为单位</p></li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>bom（browser object Model）浏览器对象模型 它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window；</p><h3 id="bom与dom的区别"><a href="#bom与dom的区别" class="headerlink" title="bom与dom的区别"></a>bom与dom的区别</h3><p>bom是由一系列相关的对象构成，并且每个对象都提供了很多方法和属性</p><p>Dom 文档对象模型，就是吧文档当作一个对象来看待，其顶级对象是document。dom主要学习的是操作页面元素，dom是w3c标准规范</p><p>Bom是浏览器对象模型，吧浏览器当作一个对象，bom的顶级对象是window，bom学习的是浏览器窗口交互的一些对象，bom是由浏览器厂商在各自浏览器上定义的，兼容性较差</p><p>bom比dom更大，它包含Dom</p><p>window （document location navigation screen history）</p><h3 id="bom的构成"><a href="#bom的构成" class="headerlink" title="bom的构成"></a>bom的构成</h3><ul><li><p>window对象是浏览器的顶级对象，当打开一个页面的时候就有一个window对象，它具有双重角色</p><ul><li><p>它是一个全局对象，定义在全局作用域内的变量，函数都会成为window对象的属性和方法，在调用时可以直接省略window，比如 window.alert()</p><p>Window下一个特殊的属性 window.name，所以我们在给变量命名的时候不要使用name作变量名</p></li><li><p>它是js访问浏览器窗口的一个接口</p><p>浏览器给我们提供一套操作浏览器的属性和方法</p><p>所有和BOM相关的api都是window.xxx;在js代码书写的时候可以省略window不写-</p></li></ul></li><li><p>浏览器尺寸</p><p>指的是浏览器的可视窗口的尺寸，浏览器有可能会出现滚动条，在一般浏览器上滚动条算是浏览器的一部分，在MAC上，是不算的（mac上的滚动条是压在页面上的）</p><p>window对象上有两个属性获取浏览器的尺寸（包含滚动条的尺寸）</p><ul><li><p>window.innerWidth 属性     window可省略不写  获取页面可视区域的宽度，也就是页面的宽度</p><p>  （包含滚动条的尺寸）</p></li><li><p>window.innerHeight 属性</p></li><li><p>window.outerwidth 属性 获取浏览器外部宽度 即整个浏览器的宽度 包括边栏</p></li><li><p>window.outerHeight 属性</p></li></ul></li></ul><h3 id="浏览器事件"><a href="#浏览器事件" class="headerlink" title="浏览器事件"></a>浏览器事件</h3><ul><li><p>onload。页面加载完毕</p></li><li><p>onscroll  滚动</p></li><li><p>onresize 窗口尺寸改变</p></li><li><p>onoffline  网络断开</p><p>一般会在网络断开时跳转到一个缓存页面，做用户提示</p></li><li><p>ononline 网络恢复  由没网到恢复</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//在控制台network调整网络状态展示</span><br>window.ononline=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;网络恢复&#x27;</span>)<br>   &#125;<br> window.onoffline=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;没网了&#x27;</span>)<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>onhashchange   当地址栏的地址hash值改变时触发</p></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//改变url的hash值测试</span><br>window.onhashchange=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;hash变化了&#x27;</span>)<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ul><li><p>窗口加载事件</p><ul><li><p>window.onload是窗口（页面）加载事件</p><p>当文档内容（包括图片 ，音视频，脚本文件 css文件）全部加载完毕就会触发该事件，调用处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;资源加载完毕&#x27;</span>)<br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListerner</span>(<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;)<br></code></pre></td></tr></table></figure></li></ul><p>作用：当需要将js代码写在页面元素的上方时，可以加上window.onload给其设置事件处理函数，当页面元素加载完后再执行里面的代码</p><p>window.onload传统注册事件方式只能写一次，如果有多个，后面的会覆盖前面的</p><p>window.addEventListener 则可以写多个依次执行</p><ul><li><pre><code class="hljs">window.addEventListener(&#39;DOMContentLoaded&#39;,function()&#123;&#125;)<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">    DOMContentLoaded在页面Dom加载完成就会触发 ，不包括图片 css flash等，ie9+才支持</span><br><span class="hljs-code"></span><br><span class="hljs-code">    优点：如果页面图片很多，从用户访问到onload触发可能需要较长的时间，交互效果就不能实现，影响用户体验，此时使用DOMContentLoaded就比较合适</span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> 调整窗口大小事件<br><br></code></pre></td></tr></table></figure>window.onresize=function()&#123;  console.log(&#39;频幕变化了&#39;)&#125;window.addEventListerner(&#39;resize&#39;,function()&#123;&#125;)<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-code">  浏览器可视窗口改变的时候就会触发该事件</span><br><br><span class="hljs-code">  一般配合innerWidth和innerHeight来判断频幕的尺寸，来做响应视布局</span><br><br><span class="hljs-code">  window.innerWidth为当前屏幕的宽度</span><br><br><span class="hljs-code">  移动端：判断横屏竖屏</span><br><br><span class="hljs-bullet">- </span>定时器<br><br></code></pre></td></tr></table></figure>var time1=window.setTImeout(callback[,延迟时间])<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br><span class="hljs-function"><span class="hljs-title">setTImeout</span><span class="hljs-params">()</span></span>用于设置一个定时器，在指定时间后调用回调函数，只调用一次，就结束了这个定时器<br><br>调用函数可以直接写函数，或者函数名<br><br>延迟时间默认为<span class="hljs-number">0</span>，如果写单位必须是毫秒<br><br>因为定时器有很多，我们经常给定时器赋值一个标识符<br><br>- 回调函数<br><br>  普通话函数是按照代码顺序直接调用的，而这个函数要等待时间，时间到了才调用该函数，因此称为回调函数（干完上件事情后回头再调用这个函数）<br><br>  我们之前的onlick=<span class="hljs-built_in">function</span>()&#123;&#125;.等里的函数也是回调函数<br><br>- 清除定时器<br><br></code></pre></td></tr></table></figure>window.clearTimeout(要清楚的定时器名称)<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>  作用：清除之前设置的定时器，window可以省略<br><br>- setInterval<br><br>  window.setInterval(回调函数，延迟时间)；<br><br>  每个一段时间都会调用设置的回调函数，只要不清除定时器一直重复调用<br><br>  - 清除定时器<br><br>    clearInterval(定时器名称)<br><br>    案例 ：按钮倒计时 禁用 防止用户多次点击<br><br><span class="hljs-comment">### location对象</span><br><br>- url是互联网上的标准资源的地址，互联网上的每一个资源都有一个唯一的url，它包含的信息，指出文件的位置以及浏览器该怎么处理它<br><br>- 一个url地址的组成部分：https:<span class="hljs-regexp">//</span>www.baidu.com?a=<span class="hljs-number">100</span>&amp;b=<span class="hljs-number">200</span><span class="hljs-comment">#abc</span><br><br>  url格式 ： protocol：<span class="hljs-regexp">//</span>host[:port]<span class="hljs-regexp">/path/</span>[?query]<span class="hljs-comment">#fragment</span><br><br>  -  Portocol:传输协议 http ftp maito等<br><br>    作用：前后端交互的方式<br><br>  -  host  域名    www.baidu.com <br><br>    作用：找到一台服务器电脑<br><br>  - port 端口   <br><br>  ​       可以省略，省略时使用方案的默认端口  如http的默认端口为<span class="hljs-number">80</span><br><br>  - path 路径 由零或者多个/ 符号隔开的字符串<br><br>    作用：一般用来表示主机上的一个目录或者文件地址<br><br>  - ?a=<span class="hljs-number">100</span>&amp;b=<span class="hljs-number">200</span>  查询字符串（queryString）<br><br>    以键值对的形式 通过&amp;符号分隔开<br><br>    作用：可有可没有，不影响打开网页；是打开这个网页时所携带的信息<br><br>  - <span class="hljs-comment">#abc 哈希（hash）（fragmaent 片段）</span><br><br>    作用：锚点定位<br><br><br><br>window对象里有一个location属性，属性值是个对象，我们将这个属性称为location对象，里面存储着和网页地址相关的信息<br><br>- location对象的属性<br><br>  - location.href  当前网页的地址 可读写属性<br><br>    window.location.href 获取当前网页的地址 <br><br>    location.href =<span class="hljs-string">&quot;新的网页地址&quot;</span>     设置当前打开页面的url地址，可以实现页面跳转    * 必须掌握<br><br>    案例：点击跳转页面.        页面加载后几秒后跳转到新的页面<br><br>  - location.host 返回主机域名<br><br>  - location.port  返回端口号 如果未写则返回空字符串<br><br>  - location.pathname 返回路径<br><br>  - Location.search 当前网页地址的查询字符串     *必须掌握<br><br>    获取：查询到的是一个字符串，访问网页所有带的信息，我们需要将这个字符串解析后才能使用<br><br>    (表单提交)<br><br>    https:<span class="hljs-regexp">//</span>www.baidu.com?a=<span class="hljs-number">88</span>&amp;b=<span class="hljs-number">99</span>&amp;c=<span class="hljs-number">22</span><span class="hljs-comment">#abc</span><br><br>    地址中没有？或者？后没有参数信息的时候，window.location.href的值是空字符串 <span class="hljs-string">&quot;&quot;</span><br><br>    ```js<br>         var urlSearch=window.location.search; <span class="hljs-regexp">//</span>?a=<span class="hljs-number">88</span>&amp;b=<span class="hljs-number">99</span>&amp;c=<span class="hljs-number">22</span> 获取url后的query参数<br>            <span class="hljs-regexp">//</span>封装一个解析urlquery参数的函数<br>            <span class="hljs-keyword">function</span> gerQuery(urlSearch)&#123;<br>              <span class="hljs-regexp">//</span>地址中没有？或者？后没有参数信息的时候，window.location.href的值是空字符串<span class="hljs-string">&quot;&quot;</span><br>              <span class="hljs-regexp">//</span>先判断一些传入的参数，单独处理一下空字符的情况<br>              var obj=&#123;&#125;<br>              <span class="hljs-keyword">if</span>(urlSearch)&#123;<br>                  <span class="hljs-regexp">//</span>参数不为空时，解析一下字符串后给obj对象赋值<br>                var newSerch=urlSearch.slice(<span class="hljs-number">1</span>);  <span class="hljs-regexp">//</span>a=<span class="hljs-number">88</span>&amp;b=<span class="hljs-number">99</span>&amp;c=<span class="hljs-number">22</span><br>                var a=newSerch.split(<span class="hljs-string">&#x27;&amp;&#x27;</span>);  <span class="hljs-regexp">//</span> [<span class="hljs-string">&quot;a=88&quot;</span>, <span class="hljs-string">&quot;b=99&quot;</span>, <span class="hljs-string">&quot;c=22&quot;</span>]<br>                <br>                a.forEach(<span class="hljs-keyword">function</span>(item,index)&#123;<br>                    <span class="hljs-regexp">//</span> console.log(item.split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">0</span>],<span class="hljs-string">&#x27;------&#x27;</span>,item.split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>])<br>                    obj[item.split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">0</span>]]=item.split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>]<br>                &#125;)<br>                console.log(obj); <span class="hljs-regexp">//</span>&#123;a: <span class="hljs-string">&quot;88&quot;</span>, b: <span class="hljs-string">&quot;99&quot;</span>, c: <span class="hljs-string">&quot;22&quot;</span>&#125;<br>              &#125;<br>              return obj;<span class="hljs-regexp">//</span>解析后，以对象的形式返回  &#123;a: <span class="hljs-string">&quot;88&quot;</span>, b: <span class="hljs-string">&quot;99&quot;</span>, c: <span class="hljs-string">&quot;22&quot;</span>&#125;或&#123;&#125;<br>              <br>            &#125;<br>           console.log( gerQuery(urlSearch));<span class="hljs-regexp">//</span>调用该函数，打印返回值<br></code></pre></td></tr></table></figure></code></pre></li><li><p>location.hash  当前网页的hash值</p></li></ul></li><li><p>location对象的方法</p><ul><li><p>location.reload() 重新加载刷新页面 ,相当于按下浏览器左上角的刷新按钮 相当于f5</p><p> 可以有参数，参数为true  为强制刷新 重新从服务器获取数据 ctrl+f5</p><p><strong>注意此语句不要写在一打开页面就可以执行的地方，一进来就刷新，会死循环，多和按钮配合使用</strong></p></li><li><p>location.assign(‘新地址’) 根href一样，可以跳转页面 （重定向页面）</p></li><li><p>location.replace(‘新地址’) 替换当前的页面 因为不记录历史 所以不能回退</p></li></ul></li></ul><h3 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h3><p>navigator航海家</p><p>widown对象下有一个成员叫做：navigator，它是一个对象，包含浏览器的版本信息</p><p>它有很多属性，常用的</p><ul><li>userAgent属性：我们可以知道用户使用的浏览器的版本及型号信息</li></ul><p>​        获取：window.navigator.userAgent</p><ul><li><p>appName</p><p>所有的浏览器都是统一的名字 netscape（网景）致敬网景公司  ，ie低版本不是</p><p>window.navigator.appName</p></li><li><p>platform</p><p>浏览器所在操作系统</p></li></ul><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><p>window下有一个叫做history的成员，是一个对象，里面包含着一些操作历史记录的属性和方法</p><p>作用：可以操作浏览器的前进后退</p><p>history包含用户（在浏览器窗口中）访问过的url</p><ul><li>window.history.back();</li></ul><p>​       作用：回退到上一条历史记录，相当于浏览器左上角的后退按钮</p><p>​前提：需要有历史记录，否则无法回退</p><ul><li><p>window.history.forward() 前进</p><p>作用：前进到下一条历史记录，相当前进按钮</p><p>前提：需要回退过以后才可以前进</p></li><li><p>window.history.go(参数)  </p><p>参数为正值 前进</p><p>参数 负值为后退</p><p>参数为0 刷新当前页面</p></li></ul><h3 id="scroll系列属性"><a href="#scroll系列属性" class="headerlink" title="scroll系列属性"></a>scroll系列属性</h3><p>scroll系列属性可以动态的获取到元素的大小，滚动距离等</p><ul><li><p>E.scrollTop 返回元素被卷去的上侧距离 返回值不带单位</p></li><li><p>E.scrollleft 返回元素被卷去的左侧距离 返回值不带单位</p></li><li><p>E.scrollWidth  返回元素自身的实际内容的宽度，不含边框，返回值不带单位</p></li><li><p>E.scrollHeight  返回元素自身的实际内容的高度，不含边框，返回值不带单位</p></li><li><p>浏览器scroll滚动事件</p></li></ul><p>window.onscroll&#x3D;function(){}</p><p>当浏览器滚动条滚动时触发的事件，不管横向还是竖向只要滚动就会触发</p><p>作用：</p><p>1: 楼层导航  2 :顶部通栏和回到顶部按钮按钮的显示  3:渐进显示页面 4:瀑布流</p><ul><li><p>获取页面被卷去的头部距离，有兼容性问题，因此被卷去的头部通常有以下几种写法</p><ul><li><p>document.documentElement.scrollTop</p><p>使用必须要有 DOCTYPE标签,如果没有则获取的滚动高度一直是0</p><p>可读写属性：设置时直接赋值 ,直接改变浏览器滚动的位置</p></li><li><p>document.body.scrollTop</p><p>使用必须要没有 DOCTYPE标签,如果有则返回的高度一直是0</p></li></ul></li><li><p>获取页面卷去的宽度</p><ul><li><p>document.documentElement.scrollLeft</p><p>使用必须要有DOCTYPE标签</p><p>可读写属性：设置时直接赋值 ,直接改变浏览器滚动的位置</p></li><li><p>document.body.scrollLeft</p><p>使用必须没有 DOCTYPE标签</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">onscroll</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;****&#x27;</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>)    <br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;****&#x27;</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span>)   <br>      <span class="hljs-comment">//----------以上两种方式的兼容性写法 ,使用逻辑运算符的短路，当前面值为0，会执行后面的，前面的值不为0即转换为布尔值为true，则直接返回前面的值</span><br>      <br>      <span class="hljs-keyword">var</span> scrollTop=<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(scrollTop); <span class="hljs-comment">//获取页面卷去的头部的高度</span><br>      <span class="hljs-comment">//----------获取卷去的宽度的兼容性问题</span><br>      <br>      <span class="hljs-keyword">var</span> scrollLeft=<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollLeft</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollLeft</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(scrollLeft); <span class="hljs-comment">//获取页面卷去的头部的高度</span><br>      <br>      <br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>新方法 window.pageYOffset和window.pageXOffset  iE9+支持. 推荐</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">处理各种兼容性问题，封装函数<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getScroll</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span>&#123;<br>  <span class="hljs-attr">left</span>:<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageXOffset</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollLeft</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollLeft</span>||<span class="hljs-number">0</span>,<br> <span class="hljs-attr">top</span>:<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageYOffset</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span>||<span class="hljs-number">0</span><br>&#125;<br>&#125;<br>使用时 <span class="hljs-title function_">getScroll</span>().<span class="hljs-property">top</span><br></code></pre></td></tr></table></figure><ul><li>案例：小窗口滚动—滚动事件和获取卷去的距离都绑定在外层的元素上</li><li>设置浏览器滚动到指定的位置</li></ul><p>格式1：window.scrollTo(横向坐标，纵向坐标);</p><ul><li><p>书写不需要带单位，直接设置数字就可以了，参数是数值必须要设置两个参数，否则会报错</p></li><li><p>特点：瞬间定位</p></li></ul><p>格式2：window.scrollTo({top:纵向坐标，left：横向坐标});</p><ul><li><p>如果参数是对象，对象里的属性写几个都可以</p></li><li><p>特点：可以依靠第三个配置项来决定是瞬间定位还是平缓移动</p><p>behvaior：”smooth” 平滑或’instant’立即 不能决定滚动时间</p><p>但是：如果设置的是平滑的滚动的时候，页面无论滚动的距离是多还是少，所花费的秒数是一样的，1s或者2s，这样滚动的速度是不一样的。若是我们想要当页面滚动的距离多时耗时稍微久一点（保持滚动的速度是一样的），通过api提供的功能是没有办法实现的，需要我们自己写</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">btn.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-comment">//让浏览器平滑的滚动到指定位置</span><br>      window.<span class="hljs-title function_ invoke__">scrollTo</span>(&#123;<span class="hljs-attr">top</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">left</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">behavior</span>:<span class="hljs-string">&quot;smooth&quot;</span>&#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">       <span class="hljs-comment">//当用户点击返回到顶部的时候，实现页面滚动</span><br>        <span class="hljs-keyword">var</span> scrollTimer;<span class="hljs-comment">//记录定时器的返回值的变量设置在外面（全局），事件里面只是赋值，这样在任何地方都可以使用了</span><br>        btn.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-comment">//使用定时器每隔一定时间改变一下滚动条的滚动的位置来实现页面的滚动</span><br>            <span class="hljs-comment">//每30ms使让当前浏览器卷曲的高度-20</span><br>            <span class="hljs-comment">//但是我们需要当页面滚动到顶部的时候使定时器停下来清除定时器，否则会一直执行，滚动就停不下来了</span><br>            <br>          scrollTimer=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>-=<span class="hljs-number">20</span>;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>&lt;=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//但是我们需要当页面滚动到顶部的时候使定时器停下来清除定时器，否则会一直执行，滚动就停不下来了</span><br>                    <span class="hljs-built_in">clearInterval</span>(scrollTimer)<br>                &#125;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>)<br>            &#125;, <span class="hljs-number">30</span>);<br>        &#125;<br>   -------------<span class="hljs-string">`     </span><br><span class="hljs-string">        //上面只是实现了设置滚动的时间（速度），实现了页面滚动，但是我们无法是滚动在中途停下来</span><br><span class="hljs-string">        //我们可以设置一个浏览器的滚动事件来检测滚动的高度，如果滚动的高度出现变大则说明用户想要反向滚动我们就将上一步的滚动定时器清除 </span><br><span class="hljs-string">        var topNum=0;//设置一个变量来存储浏览器上一次滚动的高度</span><br><span class="hljs-string">        window.onscroll=function()&#123;</span><br><span class="hljs-string">            if(document.documentElement.scrollTop&gt;=topNum)&#123;</span><br><span class="hljs-string">                //如果滚动的高度出现变大则说明用户想要反向滚动我们就将上一步的滚动定时器清除</span><br><span class="hljs-string">                clearInterval(scrollTimer)</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">            //给浏览器滚动的高度赋值，随着滚动记录每一次滚动的位置</span><br><span class="hljs-string">           topNum=document.documentElement.scrollTop;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">//---------------------------注意：多次点击会加快滚动速度，设置截流阀</span><br></code></pre></td></tr></table></figure><ul><li><p>案例</p><p>滚动窗口至文档中特定的位置</p><p>window.scroll(x,y);</p></li><li><p>元素.scrollWidth&#x2F;scrollHeight</p></li></ul><p>​                包含content padding 溢出内容的尺寸，如论这个一处内容是隐藏还是滚动条</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//   如何判断元素是否滚动到了底部</span><br><span class="hljs-comment">//元素.scrollHeight-元素.scrollTop=window.innerHeight</span><br><span class="hljs-keyword">var</span> isScroll=<span class="hljs-literal">true</span>;<span class="hljs-comment">//设置截流阀</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onscroll</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//判断截流阀</span><br>  <span class="hljs-keyword">if</span>(isScroll)&#123;  <br>         <span class="hljs-comment">//页面被卷去高度的兼容性写法</span><br>        <span class="hljs-keyword">var</span> scrollTop=<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>||<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageYOffset</span>;<br>        <span class="hljs-comment">// console.log(document.body.scrollHeight-scrollTop,window.innerHeight)</span><br>        <span class="hljs-comment">//页面的总长度-页面被卷曲的高度=浏览器可视窗口的高度  的时候就说明页面滚动到最底部了</span><br>        <span class="hljs-comment">//document.documentElement.scrollHeight 用html的scrollHeight更加合适，因为body有默认的margin值</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollHeight</span>-scrollTop&lt;=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>+<span class="hljs-number">30</span>)&#123;<br>            <span class="hljs-comment">//滚动到底了先禁用滚动，向页面添加元素后再开启滚动</span><br>            isScroll=<span class="hljs-literal">false</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;到底了------&#x27;</span>)；<br><br>            <span class="hljs-comment">//向页面中添加元素</span><br>            <span class="hljs-comment">//创建元素 给元素添加内容 </span><br>            <span class="hljs-keyword">var</span> div=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">creatElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>            div.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;我是新增的html&quot;</span>;<br>            div.<span class="hljs-property">style</span>.<span class="hljs-property">height</span>=<span class="hljs-number">500</span>+<span class="hljs-string">&#x27;px&#x27;</span>;<br>             div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span>=<span class="hljs-string">&#x27;red&#x27;</span>;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div);<br><br>            <span class="hljs-comment">//开启滚动</span><br>            isScroll=<span class="hljs-literal">true</span><br>        &#125;<br>     &#125;           <br>&#125;<br></code></pre></td></tr></table></figure><p>案例：tab栏滚动到指定位置时定位</p><p>​京东楼层导航</p><h2 id="window-devicePixelRatio-获取物理像素比-dpr"><a href="#window-devicePixelRatio-获取物理像素比-dpr" class="headerlink" title="window.devicePixelRatio   获取物理像素比 dpr"></a>window.devicePixelRatio   获取物理像素比 dpr</h2><p>在火狐浏览器中，有个”往返缓存“，这个缓存存中不仅保存着页面的数据，还保存着DOM和js的状态，实际上是将整个页面都保存在了内存中，所以在火狐中按后退按钮不能刷新页面，这种情况下就不能使用onload而应该使用pageshow</p><p>pageshow事件 在页面显示时触发，无论页面是否来在缓存，在重新加载的页面中，pageshow会在load事件触发后触发，根据事件对象中的persisted来判断，是否是缓存中的页面触发的pageshow事件，注意这个事件给window添加</p><p><img src="/smiling-sheep.github.io/Users/wei/Desktop/markdown/js%E5%A4%87%E8%AF%BE/img/WechatIMG63.png" alt="WechatIMG63"></p><p>他们offset client scroll三大系统的使用总结</p><ul><li><p>offset系列</p><p> 经常用于获取元素的位置 offsetLeft offsetTop 返回相对于设置了定位的父元素上&#x2F;左面距离</p></li></ul><p>​        offsetWidth&#x2F;offsetHeight：content padding border 滚动条</p><p>​            滚动条的宽度：offsetWidth-clientWidth-border</p><ul><li><p>client经常用来获取元素的大小 clientWidth clientHeight    包含：content padding</p><p>document.body.clientWidth&#x2F;document.body.clientHeight  页面可见区域的宽高，不包含滚动条</p><p>元素.clientTop 返回元素的border-top-width ；元素.clientLeft  返回元素的border-left-width</p></li><li><p>scroll 经常用来获取元素的滚动距离（被卷去的距离） scrollTop scrollLeft</p><p>scrollWidth&#x2F;scrollHeigh  包含content padding 溢出内容的尺寸，如论这个一处内容是隐藏还是滚动条</p></li><li><p>页面滚动距离 使用 window.pageXoffset 获取</p></li><li><p>window.innerwidth &#x2F; window.innerheight 返回窗口的文档显示区的宽</p></li><li><p>outerWidth 和 outerHeight 属性获取加上 工具条与滚动条窗口的宽度与高度</p></li></ul><hr><p>案例：封装一个动画函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">*&#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">background</span>: chartreuse;</span><br><span class="language-css">          <span class="hljs-comment">/* 元素要定位，否则无法动起来 */</span></span><br><span class="language-css">          <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">          </span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-id">#box2</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">background-color</span>: chocolate;</span><br><span class="language-css">             <span class="hljs-comment">/* 元素要定位，否则无法动起来 */</span></span><br><span class="language-css">             <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">             <span class="hljs-attribute">top</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-id">#btn1</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-id">#btn2</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>300<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>500<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box1&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">offsetLeft</span>)<span class="hljs-comment">//获取元素在页面中的位置</span></span><br><span class="language-javascript">        <span class="hljs-comment">//封装一个函数，将元素及停止的位置作为参数传进去</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">animation</span>(<span class="hljs-params">ele,targetLocation,callBack</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">typeof</span> ele)</span><br><span class="language-javascript">             <span class="hljs-comment">//点击按钮让div元素动起来，多次快速点击会发现元素移动的原来越快，这是因为多个定时器重叠了，所以速度越来越快</span></span><br><span class="language-javascript">             <span class="hljs-comment">//解决方案，清除上一次的定时器，让元素只有一个定时器执行</span></span><br><span class="language-javascript">             <span class="hljs-built_in">clearInterval</span>(ele.<span class="hljs-property">time</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">//给传进来的ele元素对象增加一个time属性用来记录每一个元素自己的定时器的返回值</span></span><br><span class="language-javascript">            ele.<span class="hljs-property">time</span>=<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 给元素设置一个停止的位置，清除定时器</span></span><br><span class="language-javascript">                <span class="hljs-comment">//这里要写等于==，不要大于等于，因为向回走的时候会清除定时器</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(ele.<span class="hljs-property">offsetLeft</span>==targetLocation)&#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(ele.<span class="hljs-property">time</span>)<span class="hljs-comment">//清除存储在对象中指定的定时器的值,就停止了动画</span></span><br><span class="language-javascript">                    <span class="hljs-comment">//在定时器清除后，也就是动画执行完后，如果有回调函数就执行回调函数</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(callBack)&#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">callBack</span>();</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// div.offsetLeft获取元素在页面中的位置</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 给元素的left重新赋值使元素动起来</span></span><br><span class="language-javascript">                    <span class="hljs-comment">//元素移动是每固定时间增加一个固定的值，所以元素是匀速移动的</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// ele.style.left=ele.offsetLeft+10+&#x27;px&#x27;;</span></span><br><span class="language-javascript">                    <span class="hljs-comment">//想让元素变速移动，每秒钟移动的距离递减，即实现滑动动画，让元素的速度慢慢的慢下来</span></span><br><span class="language-javascript">                    <span class="hljs-comment">//每次移动的距离（步长）=（目标位置-当前位置）/10  这样每次移动的距离就是在递减的</span></span><br><span class="language-javascript">                    <span class="hljs-comment">//(targetLocation-ele.offsetLeft)/10 这样写步长会有小数，而且一直到不了目标位置，所以我们要取整，而且要向上取整，因为只能朝着目标位置前进不能后退</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> step;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(((targetLocation-ele.<span class="hljs-property">offsetLeft</span>)/<span class="hljs-number">10</span>)&gt;<span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">                        <span class="hljs-comment">//目标位置大于元素现在位置的时候，向上取整，朝着目标位置只前进不后退  </span></span><br><span class="language-javascript">                        step=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((targetLocation-ele.<span class="hljs-property">offsetLeft</span>)/<span class="hljs-number">10</span>);</span><br><span class="language-javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                        <span class="hljs-comment">//目标位置小于元素现在位置的时候，向下取整，朝着目标位置只前进不后退</span></span><br><span class="language-javascript">                        step=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((targetLocation-ele.<span class="hljs-property">offsetLeft</span>)/<span class="hljs-number">10</span>);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;step&#x27;</span>,step,<span class="hljs-string">&#x27;-------&#x27;</span>,targetLocation-ele.<span class="hljs-property">offsetLeft</span>)</span><br><span class="language-javascript">                    ele.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=ele.<span class="hljs-property">offsetLeft</span>+step+<span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">                  </span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">              </span><br><span class="language-javascript">     </span><br><span class="language-javascript">          &#125;, <span class="hljs-number">15</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      </span><br><span class="language-javascript">        <span class="hljs-title function_">animation</span>(box2,<span class="hljs-number">200</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//点击按钮让div元素动起来，多次快速点击会发现元素移动的原来越快</span></span><br><span class="language-javascript">        <span class="hljs-comment">//这是因为多个定时器重叠了，所以速度越来越快</span></span><br><span class="language-javascript">        btn1.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animation</span>(div,<span class="hljs-number">300</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;下雨了&#x27;</span>)</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        btn2.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animation</span>(div,<span class="hljs-number">500</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs html">//------动画函数的使用        还可以使用css实现同样的效果<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#fater-box</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: chocolate;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">           </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 使用css实现子元素的滑出 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* #fater-box:hover #cell-box&#123;</span></span><br><span class="hljs-comment"><span class="language-css">            left:-200px;</span></span><br><span class="hljs-comment"><span class="language-css">        &#125; */</span></span><br><span class="language-css">        <span class="hljs-selector-id">#cell-box</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">30</span>, <span class="hljs-number">210</span>, <span class="hljs-number">105</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* transition:1s; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9999</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fater-box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>66<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cell-box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入东画文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./utils.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> cellBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#cell-box&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> faterBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#fater-box&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> span=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>)</span><br><span class="language-javascript">      </span><br><span class="language-javascript">        faterBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseenter&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animation</span>(cellBox,-<span class="hljs-number">200</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//滑出后的回调函数</span></span><br><span class="language-javascript">                span.<span class="hljs-property">innerText</span>=<span class="hljs-string">&#x27;滑出了&#x27;</span></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        faterBox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseleave&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">animation</span>(cellBox,<span class="hljs-number">0</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                 <span class="hljs-comment">//收回后的回调函数</span></span><br><span class="language-javascript">                span.<span class="hljs-property">innerText</span>=<span class="hljs-string">&#x27;收回了&#x27;</span></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">//offetLeft返回的是相对于设置了定位的祖先元素的左侧的距离，如果没有设置了定位的祖先元素则返回的是相对于body的左侧的距离)</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><p>触屏事件：触摸事件只能在移动端使用</p><p>移动端兼容性好，我们不需要考虑js的兼容性问题，可以放心的使用原生的js书写效果，但是移动端也有自己独特的地方，不如触屏事件touch，安卓和ios手机都有</p><p>touch对象代表一份触摸点，触摸点可能是一根手指，也可能是一个触摸笔，触摸事件可以响应手指或者触摸笔对屏幕或者触控版的操作</p><ul><li><p>常见的触屏事件（移动端只用这三个事件，其他事件都是在这三个事件的基础上发生的）</p><p>触摸事件在pc端测试的时候必须要调到移动模式下才可以</p><ul><li><p>tuochstart   手指触摸到一个dom元素时触发</p></li><li><p>touchmove  手指在一个dom元素上滑动时触发</p></li><li><p>touchend 手指从一个dom元素上移开时触发</p></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">box1.ontouchstart=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;触摸开始&#x27;</span>)<br>&#125;<br>box1.ontouchmove=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;触摸--在元素上移动&#x27;</span>)<br>&#125;<br>box1.ontouchend=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;触摸结束&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>触摸事件对象</p><p>touchevent是一类描述手指在触摸平面上的状态变化事件，这类事件用于描述一个或者多个触摸点，是开发者可以检测到触摸点的移动，触摸点的增减和减少等</p><p>touchstart touchmove touchend 三个事件都各有事件对象</p><p>常见的触摸对象</p><p>touches 正在触摸屏幕的所有手指的一个列表</p><p>targetTouches 正在触摸当前元素的上的手指的一个列表</p><p>   如果监听一个Dom元素targetTouches和touches是一样的，因为我们平时都是给元素注册触摸事件，重点记targetTouches2</p><p>changedTouches 手指状态发生了改变的列表，从无到有，从有到无的变化，当我们的手指离开屏幕的时候，就没有了touches和targetTouches列表，但是会有changedTouches</p></li></ul><h2 id="移动端点击事件的延迟"><a href="#移动端点击事件的延迟" class="headerlink" title="移动端点击事件的延迟"></a>移动端点击事件的延迟</h2><p>移动端点击事件会有300ms的延迟，原因是移动端双击屏幕会缩放页面</p><p>解决方案：</p><ul><li><p>使用meta标签禁用缩放行为，并且去掉300ms的点击延迟</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;meta <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attribute">contnet</span>=<span class="hljs-string">&quot;user-scalabe=no&quot;</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>利用touch事件自己封装这个事件来解决300ms的延迟</p><p>原理：当我们触摸屏幕时，记录触摸时间，但我们手指离开屏幕，用离开时间减去触摸时间，如果时间小于150ms，并且没有滑动过频幕，那么我们就定义为点击</p><p>封装的函数。。。</p></li><li><p>使用插件 fastclick插件解决300ms的延迟，gitHUb地址：<a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></p><p>移动端要求快速开发，我们经常使用插件来帮助我们来完成特定的操作</p><p>js插件就是js文件，它遵循一定的编码规则，方便程序展示效果，拥有特点的功能且方便调用，如轮播图和瀑布流插件，插件一半是为了解决某个问题而专门存在的，功能单一，且比较小</p></li></ul><p>循环 一个题 用各种循环语法循环执行一遍</p><p>小鸡生蛋 即 100内数相加    偶数项之和 </p><p>9*9乘法表 阶乘 水仙花花束 </p><p>红任务 </p><p>浏览器的反应时间是每秒钟60次，16毫秒内光标移出盒子，浏览器反应不过来的</p><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><ul><li><p>es6官方名称叫做es2015，每年2月都会一些新增的语法</p><p>是语法层面的更新，比如原来的var 声明变量，let声明变量</p><p>我们书写代码不需要考虑语法层面的兼容性，因为会有一些工具可以将我们写的es6代码转换为es5的语法，babel：https：&#x2F;&#x2F;<a href="http://www.babeljs.cn/">www.babeljs.cn/</a>  可以看到将es6转为es5</p></li></ul><p>es6新增了两个定义变量的关键字：</p><h3 id="let-和const"><a href="#let-和const" class="headerlink" title="let 和const"></a>let 和const</h3><ul><li><p>let   const一起和var的区别：</p><ul><li>var会进行预解析，let和const不会进行预解析，必须先定义再使用</li><li>var可以重复声明变量，let和const不能声明重复的变量名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">let</span> a=<span class="hljs-number">200</span>;<br><span class="hljs-comment">//---这样也不可以，因为变量a已经用过了，let不能再使用a声明变量</span><br></code></pre></td></tr></table></figure><ul><li><p>var 没有块级作用域，let和const有块级作用域</p><p>块级作用域：</p><p>被代码块限制变量的使用方法</p></li></ul><p>var只有函数私有作用域才能限制使用的范围，let和const只要是能书写代码段的{}都能限制使用范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-comment">//全局变量</span><br><span class="hljs-keyword">var</span> num=<span class="hljs-number">100</span>； <span class="hljs-comment">//全局变量</span><br><span class="hljs-keyword">let</span> num2=<span class="hljs-number">200</span>;  <span class="hljs-comment">//---let定义的变量num2离开这个if的&#123;&#125;就用不了了</span><br>&#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);    <span class="hljs-comment">//100</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num2);   <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">let</span> num2=<span class="hljs-number">200</span>;   本质是将&#123;&#125;内使用<span class="hljs-keyword">let</span>声明的num转换为了_num ,换了个变量名，所以在外面就获取不到了<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num2); <span class="hljs-comment">//200</span><br>&#125;<br>  <span class="hljs-keyword">let</span> num2=<span class="hljs-number">300</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num2);<span class="hljs-comment">//300</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js">   &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>----------------js<br><span class="hljs-keyword">var</span> div=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><br>--使用<span class="hljs-keyword">var</span> 声明变量<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=div.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>    <span class="hljs-comment">// 给每一个div元素绑定一个点事件，当点击div元素的时候，打印出的i都是3</span><br>    <span class="hljs-comment">// 这是因为var 声明的i是全局变量，在div元素被点击时，for循环已经执行完毕，i自增为了3</span><br>    <span class="hljs-comment">//所以点击元素时打印出的是自增后的全局变量i 为3</span><br>    div[i].<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击————&#x27;</span>,i)<br>    &#125;<br>&#125;<br><br>本质<br><span class="hljs-keyword">var</span> i<br>&#123;<br>    i=<span class="hljs-number">0</span>;<br>    ...<br>&#125;<br>&#123;<br>    i=<span class="hljs-number">1</span>;<br>    ...<br>&#125;<br>&#123;<br>    i=<span class="hljs-number">2</span>;<br>    ...<br>&#125;<br>i=<span class="hljs-number">3</span>;<span class="hljs-comment">//i自增为3</span><br>--------------------------<br><br>---使用<span class="hljs-keyword">let</span>声明变量<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;=div.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>    <span class="hljs-comment">// 给每一个div元素绑定一个点事件，当点击div元素的时候，打印出的i分别是0 1 2</span><br>    <span class="hljs-comment">//这是因为使用let声明的变量会有快级作用域只能在当次循环的&#123;&#125;内使用</span><br>    div[i].<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击————&#x27;</span>,i)<br>    &#125;<br>&#125;<br>---------本质<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        let i=0;</span><br><span class="hljs-comment">        ....</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        let i=1;</span><br><span class="hljs-comment">        ....</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        let i=2;</span><br><span class="hljs-comment">        ....</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li><p>let和const的区别</p><ul><li><p>let可以在声明时不赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure></li></ul><p>​       const 声明是必须赋值，声明时不赋值会报错</p><p>​    const a;  &#x2F;&#x2F;报错</p><ul><li><p>let 声明的变量可以被修改</p><p>const修改的常量不能被修改，一旦修改就报错</p><p>给定义的常量赋值为数组或者对象，对数组和对象里的元素的修改，不算对常量的修改，不会报错</p><p>因为常量存储的是数组和对象的内存地址，地址没有发生变化</p></li><li><p>const 一般常亮命名采用大写（潜规则）</p></li></ul></li><li><p>let声明变量</p><ul><li><p>使用let声明变量不能重复声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str=<span class="hljs-string">&#x27;adc&#x27;</span>;<br><span class="hljs-keyword">let</span> str=<span class="hljs-string">&#x27;adc&#x27;</span>; <span class="hljs-comment">//重复声明会报错</span><br></code></pre></td></tr></table></figure></li><li><p>块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-keyword">let</span> str=<span class="hljs-string">&#x27;122&#x27;</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<span class="hljs-comment">//报错   Uncaught ReferenceError: str is not defined</span><br><span class="hljs-comment">//如果使用var 声明变量就不会报错</span><br></code></pre></td></tr></table></figure></li><li><p>不存在变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ab);<br><span class="hljs-keyword">let</span> ab=<span class="hljs-string">&#x27;23&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>不影响作用域链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">let</span> ab=<span class="hljs-string">&#x27;12&#x27;</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ab)<br>    &#125;<br>&#125;<br><span class="hljs-title function_">fn</span>();<span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>const 声明常量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">STR</span>=<span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-comment">//一定要赋初始值，否则就会报错</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">AD</span>; <span class="hljs-comment">//报语法错误 Uncaught SyntaxError: Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><ul><li><p>一般常量命名采用大写（潜规则）</p></li><li><p>常量的值不能修改</p></li><li><p>块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">AD</span>=<span class="hljs-number">2</span>; <br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable constant_">AD</span>);<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure></li><li><p>给定义的常量赋值为数组或者对象，对数组和对象元素的修改，不算对常量的修改，不会报错</p><p>因为常量存储的是数组和对象的内存地址，地址没有发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TIME</span>=[<span class="hljs-number">1.23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">56</span>,<span class="hljs-number">7</span>];<br><span class="hljs-variable constant_">TIME</span>[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;步步高&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable constant_">TIME</span>);<span class="hljs-comment">//[&quot;步步高&quot;, 4, 56, 7]</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>一种新的函数定义方式：对于函数表达式的简写方式(匿名函数)</p><ul><li>匿名函数使用场景：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fn=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><br><span class="hljs-keyword">var</span> onj=&#123;<br>    <span class="hljs-attr">fn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-number">1000</span>);<br><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-number">1000</span>);<br><br>[].<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;);<br><br>div.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><br>div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;);<br><br></code></pre></td></tr></table></figure><ul><li>箭头函数的语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">()=&gt;&#123;&#125;;<br><br>      (): 设置形参的位置<br>      =&gt;: 箭头函数的标志<br>      &#123;&#125;: 代码段<br><br><br>----<br><span class="hljs-keyword">var</span> <span class="hljs-title function_">fn</span>=(<span class="hljs-params">a,b</span>)=&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">999</span>,a,b);<br>&#125;;<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//正常调用</span><br></code></pre></td></tr></table></figure><ul><li><p>箭头函数的特性</p><ul><li>一个形参的时可以省略小括号不写</li><li>一句代码执行语句的时候可以省略大括号，并且自动return返回那一句语句的结果</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title function_">fn</span>=a =&gt; a+<span class="hljs-number">4</span>;  <span class="hljs-comment">//将a+4的结果当做fn函数的返回值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">2</span>));   <span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure><ul><li><p>箭头函数里面没有arguments，在箭头函数内没有办法使用arguments</p></li><li><p>箭头函数里面没有this </p><p>官方解释：箭头函数里面的this是上下文（context），外部作用域的this就是箭头函数内的this</p><p>私人解释：箭头函数的this就是，你的箭头函数写在哪一行，上一行的this就是箭头函数里面的this</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> div=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br><br>div.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);      <span class="hljs-comment">// this为div元素</span><br>&#125;<br><br>div.<span class="hljs-property">onclick</span>=<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);      <span class="hljs-comment">// this为window</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> div=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">// this为div元素</span><br>    <span class="hljs-keyword">let</span> fn=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br>    <span class="hljs-title function_">fn</span>();<span class="hljs-comment">// 以函数的形式调用this指向window</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">fun</span>=(<span class="hljs-params"></span>)=&gt;&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;***8&#x27;</span>,<span class="hljs-variable language_">this</span>);&#125;;  <span class="hljs-comment">//---这个箭头函数内的this就是上一行的this</span><br>    <span class="hljs-title function_">fun</span>();             <span class="hljs-comment">// 上一行所在函数的this是div，所以箭头函数this为div</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj=&#123;<br>    <span class="hljs-attr">fn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;11111&#x27;</span>,<span class="hljs-variable language_">this</span>);<br>    &#125;,<br>    <span class="hljs-attr">fun</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;22222&#x27;</span>,<span class="hljs-variable language_">this</span>);<br>    &#125;<br>&#125;;<br>obj.<span class="hljs-title function_">fn</span>();    <span class="hljs-comment">//  this为obj</span><br>obj.<span class="hljs-title function_">fun</span>();   <br><span class="hljs-comment">//  this为window 因为obj实际为 let obj=&#123;fn:function()&#123;console.log(&#x27;11111&#x27;,this);&#125;,fun:()=&gt;     &#123;console.log(&#x27;22222&#x27;,this)&#125;&#125;;</span><br><span class="hljs-comment">// 定义箭头函数的哪一行的上一行的this为window</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> div=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br>div.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;$$$$$&#x27;</span>,<span class="hljs-variable language_">this</span>);<span class="hljs-comment">// this为div元素</span><br>    <span class="hljs-keyword">let</span> obj=&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;我是obj对象&#x27;</span>,<br>        <span class="hljs-attr">fn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;11111&#x27;</span>,<span class="hljs-variable language_">this</span>);<br>        &#125;,<br>        <span class="hljs-attr">fun</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;22222&#x27;</span>,<span class="hljs-variable language_">this</span>);<br>        &#125;<br>    &#125;;<br>    obj.<span class="hljs-title function_">fn</span>();           <span class="hljs-comment">//---this为obj</span><br>    obj.<span class="hljs-title function_">fun</span>();         <span class="hljs-comment">//--this为div</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>箭头函数内的this任何方法改变不了，因为箭头函数内没有this它用的是外部作用域的this</p><p>call    apply    bind不能改变箭头函数的this指向</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title function_">fn</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br><span class="hljs-keyword">let</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;sun&#x27;</span>,<br>    <span class="hljs-attr">fun</span>:fn<br>&#125;<br><span class="hljs-title function_">fn</span>();         <span class="hljs-comment">//---this为window</span><br>obj.<span class="hljs-title function_">fun</span>();    <span class="hljs-comment">//---this为window</span><br>fn.<span class="hljs-title function_">call</span>(obj); <span class="hljs-comment">//---this为window  箭头函数不能改变this指向</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><p>作用：给函数的形参设置一个默认值</p><p>​如传递了实参，就用实参，如果没有传递实参就用形参的默认值</p><p>格式：直接在形参后面使用等号（&#x3D;）进行赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a=<span class="hljs-number">100</span>,b</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b);<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-string">&#x27;你好&#x27;</span>,<span class="hljs-string">&#x27;bubu&#x27;</span>);<span class="hljs-comment">//传递实参使用实参</span><br><span class="hljs-title function_">fn</span>();<span class="hljs-comment">//没有传递实参就使用形参设置的默认值，如果形参没有设置默认值，则默认值为undefined</span><br></code></pre></td></tr></table></figure><p>箭头函数也可以书写参数的默认值</p><p>箭头函数只要你设置了参数默认值，不管多少个形参，都的写小括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">fn</span>=(<span class="hljs-params">a=<span class="hljs-number">100</span>,b</span>)=&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b);<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-string">&#x27;你好&#x27;</span>,<span class="hljs-string">&#x27;bubu&#x27;</span>);<span class="hljs-comment">//传递实参使用实参</span><br><span class="hljs-title function_">fn</span>();<span class="hljs-comment">//没有传递实参就使用形参设置的默认值，如果形参没有设置默认值，则默认值为undefined</span><br></code></pre></td></tr></table></figure><h3 id="模版字符串-1"><a href="#模版字符串-1" class="headerlink" title="模版字符串"></a>模版字符串</h3><p>模版字符串就是使用反引号包围的字符串</p><ul><li><p>模版字符串可以直接换行书写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ab=<span class="hljs-string">`12345</span><br><span class="hljs-string">dfff</span><br><span class="hljs-string">ffff</span><br><span class="hljs-string">444`</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ab);<br><span class="hljs-comment">//打印输出的内容，也是换行的 </span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">12345</span><br><span class="hljs-comment">dfff</span><br><span class="hljs-comment">ffff</span><br><span class="hljs-comment">444</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>可以使用变量拼接字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name=<span class="hljs-string">&#x27;安保&#x27;</span>;<br><span class="hljs-keyword">let</span> newStr=<span class="hljs-string">`122<span class="hljs-subst">$&#123;naem&#125;</span>`</span><br></code></pre></td></tr></table></figure></li><li><p>模版字符串可以调用函数</p><p>模版字符串的内容就是函数的参数</p><p>${}把字符串切开，组合成一个数组当做函数的第一个参数</p><p>从左到右开始依次是每一个${}里面的内容作为函数后面参数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a,b,c</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一个参数&#x27;</span>,a); <span class="hljs-comment">//[&#x27;hello&#x27;,&#x27;word&#x27;,&#x27;你好&#x27;]</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二个参数&#x27;</span>,b); <span class="hljs-comment">//10</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第三个参数&#x27;</span>,c); <span class="hljs-comment">//20</span><br>&#125;<br><span class="hljs-keyword">var</span> num1=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> num2=<span class="hljs-number">20</span>;<br>fn<span class="hljs-string">`hello<span class="hljs-subst">$&#123;num1&#125;</span>word<span class="hljs-subst">$&#123;num2&#125;</span>你好`</span>;<br><span class="hljs-comment">/* ----------</span><br><span class="hljs-comment">    执行步骤：</span><br><span class="hljs-comment">    1： 用$&#123;&#125;切开字符串 将切开的字符串放到一个数组里[&#x27;hello&#x27;,&#x27;word&#x27;,&#x27;你好&#x27;]作为函数第一个参数传入函数</span><br><span class="hljs-comment">    2: $&#123;num1&#125; 里面的num1就是函数的第二个参数</span><br><span class="hljs-comment">    3: $&#123;num2&#125; 里面的num2就是函数的第三个参数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    作用：将模版字符串的各部分给你，你可以在函数内自由组合</span><br><span class="hljs-comment">    不经常使用，但是面试常出</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="（…）点点点运算符"><a href="#（…）点点点运算符" class="headerlink" title="（…）点点点运算符"></a>（…）点点点运算符</h3><ul><li><p>展开运算符</p><p>当在函数实参的位置或者数组或者对象里面使用的时候是展开</p><p>作用：就是将包裹的内容全部打开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...arr);<span class="hljs-comment">// 1 2 3 4 5</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...arr));<br><span class="hljs-comment">// Math.max()方法不接受数组作为参数，我们可以使用展开运算符，将数组的每一项展开后依次作为该方法的参数</span><br>---展开数组<br><span class="hljs-keyword">let</span> arr2=[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<span class="hljs-comment">// 将arr和arr2合并为一个数组  原来可以使用数组的concat方法</span><br>    arr2=[...arr,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2);<span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span><br>    <br>--- 展开对象<br>    <br><span class="hljs-keyword">let</span> obj=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;sun&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-keyword">let</span> obj2=&#123;<br>     ...obj,<br>    <span class="hljs-attr">skill</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>)&#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">//&#123;name: &quot;sun&quot;, age: 18&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2);<span class="hljs-comment">//&#123;name: &quot;sun&quot;, age: 18, skill: ƒ&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>合并运算符</p><p>当你在函数的形参位置使用的时候是合并</p><p>箭头函数没有arguments，我们可以使用合并运算符整一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">...a</span>)&#123;<br>    <span class="hljs-comment">// 定义一个变量a，从第一个实参开始到最后一个实参全部获取，合并放在一个数组里面</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//[1, 2, 3, 4, 6, 7]</span><br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params">a,...b</span>)&#123;<br>    <span class="hljs-comment">// 第一变量a，接受第一个实参</span><br>    <span class="hljs-comment">// 定义一个变量b，从第二个实参开始到最后一个实参全部获取，合并放在一个数组里面</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">// 1</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">// [2, 3, 4, 6, 7]</span><br>&#125;<br><span class="hljs-title function_">fn2</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)<br><br>....以此类推<br><br>----箭头函数<br><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">fn3</span>=(<span class="hljs-params">...n</span>)=&gt;&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n); <span class="hljs-comment">//[1, 2, &quot;nihao&quot;]</span><br>&#125;<br><span class="hljs-title function_">fn3</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;nihao&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>变量的解构赋值</p><p>（解析结构并赋值）</p><p>ES6允许按照一定模式从数组和对象中提取值，对变量进行赋值，这即是解构</p><ul><li><p>解构数组 </p><p>格式： let [变量1，变量2，…]&#x3D;[数据1，数据2，…]</p><p>也可以解构多维数组 </p><p>数组的结构重点是 等号两侧的结构模式一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> [ni,hao,bei,jing]=[<span class="hljs-string">&#x27;你&#x27;</span>,<span class="hljs-string">&#x27;好&#x27;</span>,<span class="hljs-string">&#x27;北&#x27;</span>,<span class="hljs-string">&#x27;京&#x27;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ni);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hao);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bei);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jing);<br><br><span class="hljs-comment">//结构赋值获取数组里的成员，同时给4个变量赋值了</span><br><span class="hljs-comment">//本质就是es5的</span><br><br><span class="hljs-keyword">let</span> ni=[<span class="hljs-string">&#x27;你&#x27;</span>,<span class="hljs-string">&#x27;好&#x27;</span>,<span class="hljs-string">&#x27;北&#x27;</span>,<span class="hljs-string">&#x27;京&#x27;</span>][<span class="hljs-number">0</span>];<br>...<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ----   结构多维数组</span><br><span class="hljs-keyword">let</span> arr=[<span class="hljs-string">&#x27;你&#x27;</span>,<span class="hljs-string">&#x27;好&#x27;</span>,<span class="hljs-string">&#x27;北&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>]]];<br><span class="hljs-keyword">let</span> [a,b,c,[d,e,[f]]]=arr;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c,d,e,f);    <span class="hljs-comment">// 你 好 北 1 2 3</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">-----使用结构赋值交换变量，可以直接交换不用使用中间变量<br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;你&#x27;</span>;<br><span class="hljs-keyword">var</span> b=<span class="hljs-string">&#x27;好&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b); <span class="hljs-comment">// 你 好</span><br>[b,a]=[a,b];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b); <span class="hljs-comment">// 好 你</span><br></code></pre></td></tr></table></figure><p>不完全结构.  等号左侧只匹配一部分等号右侧的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> [x,y]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure></li><li><p>解构对象（必须与对象属性名相同）</p><p>语法： let {key1,key2,…}&#x3D;{键值对1,键值对1,…};</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> per=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;12&#x27;</span>,<br>    <span class="hljs-attr">run</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;run666666&#x27;</span>)<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">let</span> &#123;name,age,run&#125;=per;   <span class="hljs-comment">//解构赋值了3个变量</span><br><span class="hljs-comment">// 等价于 </span><br><span class="hljs-comment">//let name=per.name;</span><br><span class="hljs-comment">//let age=per.age;</span><br><span class="hljs-comment">//let run=per.run;</span><br>-----<br><br><span class="hljs-keyword">let</span> &#123;run&#125;=per; <span class="hljs-comment">//也可以只解构赋值一个变量</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name); <span class="hljs-comment">//小明</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age); <span class="hljs-comment">//12</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(run);<br><span class="hljs-comment">//  ƒ ()&#123;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;run666666&#x27;</span>)<br>    &#125;<br>优点：可以直接调用方法 <span class="hljs-title function_">run</span>()<br> 不用像之前一样调用 per.<span class="hljs-title function_">run</span>()<br><br><br></code></pre></td></tr></table></figure><ul><li><pre><code class="hljs">解构的时候可以给结构的变量起一个别名</code></pre></li></ul><p>​let {key1:别名}&#x3D;{…}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> per=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小明&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;12&#x27;</span>,<br>    <span class="hljs-attr">run</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;run666666&#x27;</span>)<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//---------------------------------------------解构的时候可以给结构的变量起一个别名</span><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>:n&#125;=per;    <span class="hljs-comment">//等同于 let n=per.name</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<span class="hljs-comment">//&#x27;小明&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<span class="hljs-comment">//&#x27;小明&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><p>解构多维对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> o1=&#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">100</span>,<br>    <span class="hljs-attr">b</span>:<span class="hljs-number">200</span>,<br>    <span class="hljs-attr">o2</span>:&#123;<br>        <span class="hljs-attr">c</span>:<span class="hljs-number">300</span>,<br>        <span class="hljs-attr">o3</span>:&#123;<br>            <span class="hljs-attr">d</span>:<span class="hljs-number">400</span><br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">let</span> &#123;a,b,<span class="hljs-attr">o2</span>:&#123;c,<span class="hljs-attr">o3</span>:&#123;d&#125;&#125;&#125;=o1;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c,d);      <span class="hljs-comment">//100 200 300 400</span><br><br><span class="hljs-comment">/* -----案例分析</span><br><span class="hljs-comment">    o2定义一个别名&#123;c,o3:&#123;d&#125;&#125;=o1.o2;  这又是 一个结构赋值</span><br><span class="hljs-comment">    let &#123;c,o3:&#123;d&#125;&#125;=o1.o2;</span><br><span class="hljs-comment">    let c=o1.o2.c</span><br><span class="hljs-comment">    o3定义一个别名 let &#123;d&#125;=o1.o2.o3</span><br><span class="hljs-comment">    所以d=o1.o2.o3.d</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h3><p>在es6标准下，对象的简写格式</p><p>当对象的key和value一模一样的时候，可以只写一个</p><p>即在对象花括号里直接写入变量名和函数，作为对象的属性和方法，这样的写法更简洁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name=<span class="hljs-string">&quot;小明&quot;</span>,age=<span class="hljs-string">&quot;18&quot;</span>,run=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;666666&quot;</span>)&#125;;<br><span class="hljs-keyword">const</span> per=&#123;<br>    <span class="hljs-attr">name</span>:name,  <span class="hljs-comment">//------------属性值是name变量可以简写</span><br>    <span class="hljs-attr">age</span>:age,<br>    <span class="hljs-attr">run</span>:run,<br>    <span class="hljs-attr">skill</span>:<span class="hljs-string">&#x27;skill&#x27;</span><span class="hljs-comment">//-----------属性值是字符串 是一个准确的值不能简写</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per);<span class="hljs-comment">//&#123;name: &quot;小明&quot;, age: &quot;18&quot;, run: ƒ&#125;</span><br><span class="hljs-comment">//-------------------------------------------------------es</span><br><span class="hljs-keyword">const</span> per2=&#123;<br>    name,<br>    age,<br>    run,<br>    <span class="hljs-attr">song</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;   <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;77777&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-comment">//--------------------------------方法可以省略 :function</span><br>    <span class="hljs-title function_">song2</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;77777&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">song3</span>:<span class="hljs-function">()=&gt;</span>&#123;...&#125;   <span class="hljs-comment">//------------------箭头函数不能简写</span><br>    <br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per2);<span class="hljs-comment">//&#123;name: &quot;小明&quot;, age: &quot;18&quot;, run: ƒ, song: ƒ, song2: ƒ&#125;</span><br></code></pre></td></tr></table></figure><h3 id="对象的新增方法-Object-assign"><a href="#对象的新增方法-Object-assign" class="headerlink" title="对象的新增方法 Object.assign"></a>对象的新增方法 Object.assign</h3><p>Object.assign()方法。  做对象覆盖</p><ul><li><p>作用：用于对象的合并，将源对象的属性，复制到目标对象</p></li><li><p>格式：Object.assign(目标对象,源对象1,源对象2)</p></li></ul><p>​                   第一个参数是目标对象，后面的参数都是源对象</p><ul><li>注意：如果目标对象与源对象，或者多个源对象有同名属性，后面的属性会覆盖前面的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> target=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">let</span> source1=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">8</span>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target,source1)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<span class="hljs-comment">//&#123;a:2,b:8&#125;</span><br></code></pre></td></tr></table></figure><p>扩展：</p><ul><li>Object.assign()方法实行的是浅拷贝，而不是深拷贝，即如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用（地址）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> target=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">m</span>:<span class="hljs-string">&#x27;haha&#x27;</span>&#125;;<br><span class="hljs-keyword">let</span> source1=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">8</span>,<span class="hljs-attr">c</span>:&#123;<span class="hljs-attr">d</span>:<span class="hljs-number">99</span>,<span class="hljs-attr">e</span>:<span class="hljs-number">77</span>&#125;&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target,source1)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);        <span class="hljs-comment">//&#123;a:2,m:&#x27;haha&#x27;,b:8,c:&#123;d:99,e:77&#125;&#125;</span><br><br>target.<span class="hljs-property">c</span>.<span class="hljs-property">d</span>=<span class="hljs-number">0</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(source1.<span class="hljs-property">c</span>.<span class="hljs-property">d</span>);       <span class="hljs-comment">//0 </span><br></code></pre></td></tr></table></figure><ul><li>对于这种嵌套的对象，一旦遇到同名属性，Object.assgin()的处理方式是替换，而不是添加</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> target=&#123;<span class="hljs-attr">a</span>:&#123;<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-keyword">let</span> source1=&#123;<span class="hljs-attr">a</span>:&#123;<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">c</span>:<span class="hljs-number">3</span>&#125;&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target,source1)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<span class="hljs-comment">//&#123;a:&#123;b:2,c:3&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>使用案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-comment">//-------没有使用Object.assign()方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">options</span>)&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;type&#x27;</span>,options.<span class="hljs-property">type</span>);<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;url&#x27;</span>,options.<span class="hljs-property">url</span>);<br>          <span class="hljs-comment">//调用成功的回调函数</span><br>          options.<span class="hljs-title function_">succes</span>();<br>           <span class="hljs-comment">//调用失败的回调函数</span><br>           options.<span class="hljs-title function_">error</span>();<br><br>      &#125;<br><br>      <span class="hljs-comment">//调用fn的时候传入一个对象作为参数,每一次调用对象里的每一个成员都要设置</span><br>      <span class="hljs-title function_">fn</span>(&#123;<br>          <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>          <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;****&#x27;</span>,<br>          <span class="hljs-attr">succes</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>          &#125;,<br>          <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;失败&#x27;</span>)<br>          &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-comment">//-----使用Object.assign()方法 进行代码优化</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">options</span>)&#123;<br>         <span class="hljs-comment">//设置一个默认值</span><br>         <span class="hljs-keyword">var</span> defaultValue=&#123;<br>                 <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>                 <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;****&#x27;</span>,<br>                 <span class="hljs-attr">succes</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>                 &#125;,<br>                 <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;失败&#x27;</span>)<br>                 &#125;<br>             &#125;<br>         <span class="hljs-comment">//用传进来的实参覆盖默认值</span><br>         <span class="hljs-comment">//如果实参与默认值的同名属性不一样，会用实参的值覆盖默认值</span><br>         <span class="hljs-comment">//这样我们就不用每次调用函数的时候对象里每一个成员属性都要设置了，没有设置的就采用默认值</span><br>         <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(defaultValue,options)    <br>         <br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;type&#x27;</span>,defaultValue.<span class="hljs-property">type</span>);<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;url&#x27;</span>,defaultValue.<span class="hljs-property">url</span>);<br>         <span class="hljs-comment">//调用成功的回调函数</span><br>         defaultValue.<span class="hljs-title function_">succes</span>();<br>          <span class="hljs-comment">//调用失败的回调函数</span><br>          defaultValue.<span class="hljs-title function_">error</span>();<br><br>     &#125;<br>     <br>     <span class="hljs-comment">//调用fn的时候传入一个对象作为参数</span><br>     <span class="hljs-comment">//这样我们就不用每次调用函数的时候对象里每一个成员属性都要设置了，没有设置的就采用默认值</span><br>     <span class="hljs-title function_">fn</span>(&#123;<br>       <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>       <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;www.baidu.com&#x27;</span><br>     &#125;);<br><br><span class="hljs-comment">//--调用函数 </span><br>     <span class="hljs-title function_">fn</span>(&#123;<br>     <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;@@@&#x27;</span>,<br>     &#125;)<br></code></pre></td></tr></table></figure><h3 id="继承-extend"><a href="#继承-extend" class="headerlink" title="继承 extend"></a>继承 extend</h3><p>构造函数的应用</p><p>当多个构造函数需要使用一些共同的方法或者属性的时候，我们需要把这些共同的东西拿出来，单独书写一个构造函数，让其他的构造函数去继承自这个公共的构造函数</p><p>概念：让B构造函数的实例能够使用A构造函数的属性和方法，我们管B构造函数叫做A构造函数的子类，A构造函数叫做B构造函数的父类</p><p>目的：让B构造函数能够使用A构造函数的属性和方法. (子类的实例使用父类的属性和方法)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//-------------------原型继承</span><br><span class="hljs-comment">//---------- 准备一个父类  </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>            <span class="hljs-comment">//</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>        &#125;<br>        <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>        &#125;<br>        <span class="hljs-comment">/* </span><br><span class="hljs-comment">        person的实例=&#123;</span><br><span class="hljs-comment">            name:&#x27;jack&#x27;,</span><br><span class="hljs-comment">            age:18,</span><br><span class="hljs-comment">            __proto__:&#123;//Person.prototype</span><br><span class="hljs-comment">                constructor:Person,            </span><br><span class="hljs-comment">                sayHi:function()&#123;</span><br><span class="hljs-comment">                  console.log(&#x27;hello world&#x27;)</span><br><span class="hljs-comment">                &#125;,</span><br><span class="hljs-comment">                __proto__:Object.prototype</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        原型继承</span><br><span class="hljs-comment">            利用改变 原型链的方式来达到继承的效果</span><br><span class="hljs-comment">            直接把父类的实例当做子类的 prototype</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        构造函数的原型 对象</span><br><span class="hljs-comment">            我们把原型赋值为一个新的对象</span><br><span class="hljs-comment">            new Person的时候，得到的也是一个新的对象</span><br><span class="hljs-comment">            核心代码： 子类.prototype = new 父类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        原型继承的优缺点：</span><br><span class="hljs-comment">        优点：构造函数体内和原型上的都可以继承</span><br><span class="hljs-comment">        缺点：</span><br><span class="hljs-comment">            1: 一个构造函数的内容，在两个位置传递参数</span><br><span class="hljs-comment">            2: 继承来的属性不再子类实例的身上，看起来很别扭</span><br><span class="hljs-comment">            </span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        */</span><br><span class="hljs-comment">//---子类</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">gender</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span>=gender;<br><br>        &#125;<br>        <span class="hljs-comment">//const p=new Person(&#x27;jack&#x27;,18);</span><br>        <span class="hljs-comment">//直接把父类的实例当做子类的原型对象</span><br><span class="hljs-comment">//Student.prototype=p;</span><br><br>        <span class="hljs-comment">//直接把父类的实例当做子类的原型对象</span><br><span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-number">18</span>);<br><br>        <span class="hljs-keyword">const</span> s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;男&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br>        <span class="hljs-comment">/* </span><br><span class="hljs-comment">            Student</span><br><span class="hljs-comment">                gender: &quot;男&quot;</span><br><span class="hljs-comment">                [[Prototype]]: Person       //即是Student.prototype 也是 Person的实例</span><br><span class="hljs-comment">                    age: 18</span><br><span class="hljs-comment">                    name: &quot;jack&quot;</span><br><span class="hljs-comment">                    [[Prototype]]: Object  //Person的prototype</span><br><span class="hljs-comment">                        sayHi: ƒ ()</span><br><span class="hljs-comment">                        constructor: ƒ Person(name,age)</span><br><span class="hljs-comment">                        [[Prototype]]: Object</span><br><span class="hljs-comment">                        ......</span><br><span class="hljs-comment">        */</span><br><br>        s.<span class="hljs-title function_">sayHi</span>(); <span class="hljs-comment">//student的实例用了Person的方法 </span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//---------------------借用继承</span><br>     <span class="hljs-comment">/* </span><br><span class="hljs-comment">        借用构造函数继承 （借用继承/call 继承）</span><br><span class="hljs-comment">        通过改变父类的构造函数的 this指向来达到继承的效果</span><br><span class="hljs-comment">        核心代码：在子类的构造函数体内，父类.call(子类的实例)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        构造函数的执行</span><br><span class="hljs-comment">            1 是一个普通函数，可以当做函数直接调用</span><br><span class="hljs-comment">            2 当做普通函数执行的时候，this指向谁，就向谁身上添加内容</span><br><span class="hljs-comment">            3 call 方法可以改变函数的this指向</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    */</span><br>        <span class="hljs-comment">//父类</span><br>       <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>            <br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>        &#125;<br>        <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>        &#125;<br>        <span class="hljs-comment">//function Student(gender,name,age)&#123;</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">gender</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span>=gender;<br><br>            <span class="hljs-comment">/* </span><br><span class="hljs-comment">                将Person函数当做普通函数调用</span><br><span class="hljs-comment">                使用call方法改变了一下Person函数内部的this指向</span><br><span class="hljs-comment">                改变成指向谁就会向谁身上添加一个name 一个age属性</span><br><span class="hljs-comment">                当我们new Student的时候，Strdent内部这个位置的this指向Studend的实例对象</span><br><span class="hljs-comment">                我们使用call方法改变了Person函数内的指向，指向了 Student的实例 this === s</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                借用继承的优缺点：</span><br><span class="hljs-comment">                优点：</span><br><span class="hljs-comment">                    1:继承来的属性是在自己身上</span><br><span class="hljs-comment">                    2:我们一个实例化的过程在一个位置传参</span><br><span class="hljs-comment">                缺点：</span><br><span class="hljs-comment">                    只能继承父类构造函数体内的内容</span><br><span class="hljs-comment">                    父类原型上的内容不能继承</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            </span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-title class_">Person</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-string">&#x27;rose&#x27;</span>,<span class="hljs-number">16</span>);<span class="hljs-comment">//可以在上面传参 </span><br>            <span class="hljs-comment">// Person.call(this,name,age);//可以在上面传参 </span><br>            <span class="hljs-comment">//这个函数执行完毕以后，会像Student的实例身上添加一个name 一个age属性</span><br><br>        &#125;<br>  <br>        <span class="hljs-comment">//书写属于 student自己方法</span><br>        <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">stduy</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;学术的天职就是好好学习&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">var</span> s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;男&#x27;</span>);<br>        <span class="hljs-comment">// var s=new Student(&#x27;男&#x27;,&#x27;rose&#x27;,16);</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<span class="hljs-comment">//</span><br>      <span class="hljs-comment">/* </span><br><span class="hljs-comment">      Student &#123;gender: &#x27;男&#x27;, name: &#x27;rose&#x27;, age: 16&#125;</span><br><span class="hljs-comment">        age: 16</span><br><span class="hljs-comment">        gender: &quot;男&quot;</span><br><span class="hljs-comment">        name: &quot;rose&quot;</span><br><span class="hljs-comment">        [[Prototype]]: Object</span><br><span class="hljs-comment">            stduy: ƒ ()</span><br><span class="hljs-comment">            constructor: ƒ Student(gender)</span><br><span class="hljs-comment">            [[Prototype]]: Object</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">      */</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//------------组合继承</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">        -----------组合继承</span><br><span class="hljs-comment">        把原型继承 和 借用构造函数继承 合并在一起使用</span><br><span class="hljs-comment">        组合继承的优缺点：</span><br><span class="hljs-comment">        优点：</span><br><span class="hljs-comment">            1: 父类构造函数体内 和原型上的内容能继承</span><br><span class="hljs-comment">            2: 继承下来的属性放在自己身上</span><br><span class="hljs-comment">            3: 在一个位置传递所有参数</span><br><span class="hljs-comment">        缺点：</span><br><span class="hljs-comment">            1:当你的子类添加方法的时候，实际是添加在了父类的实例上(但是这一点不影响我们使用)</span><br><span class="hljs-comment">            </span><br><span class="hljs-comment">            2018年前大部分人继承都是使用这种方式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">//父类</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>            <br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>        &#125;<br>    <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">//子类</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">gender,name,age</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span>=gender;<br>            <span class="hljs-comment">//借用继承 ，目的：把属性继承在自己的身上</span><br>            <span class="hljs-title class_">Person</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,name,age)<br>    &#125;<br><br>    <span class="hljs-comment">//原型继承，目的:继承父类原型上的方法</span><br>    <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//这个位置的参数可传可不传 因为自己身上有就不会向原型上找</span><br><br>    <span class="hljs-comment">//书写属于 student自己方法</span><br>    <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">stduy</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;学术的天职就是好好学习&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">//使用student 创建实例</span><br>    <span class="hljs-keyword">var</span> s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;sun&#x27;</span>,<span class="hljs-number">1200</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    Student &#123;gender: &#x27;男&#x27;, name: &#x27;sun&#x27;, age: 1200&#125;</span><br><span class="hljs-comment">    age: 1200</span><br><span class="hljs-comment">    gender: &quot;男&quot;</span><br><span class="hljs-comment">    name: &quot;sun&quot;</span><br><span class="hljs-comment">        [[Prototype]]: Person</span><br><span class="hljs-comment">            age: undefined</span><br><span class="hljs-comment">            name: undefined</span><br><span class="hljs-comment">            stduy: ƒ ()</span><br><span class="hljs-comment">            arguments: null</span><br><span class="hljs-comment">            caller: null</span><br><span class="hljs-comment">            length: 0</span><br><span class="hljs-comment">            name: &quot;&quot;</span><br><span class="hljs-comment">                prototype: &#123;constructor: ƒ&#125;</span><br><span class="hljs-comment">                    [[FunctionLocation]]: 继承.html:155</span><br><span class="hljs-comment">                    [[Prototype]]: ƒ ()</span><br><span class="hljs-comment">                    [[Scopes]]: Scopes[1]</span><br><span class="hljs-comment">                    [[Prototype]]: Object</span><br><span class="hljs-comment">                    sayHi: ƒ ()</span><br><span class="hljs-comment">                    constructor: ƒ Person(name,age)</span><br><span class="hljs-comment">                    [[Prototype]]: Object</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    */</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-comment">// -----------------------------------拷贝继承（for in继承）</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">     拷贝继承（for in继承）</span><br><span class="hljs-comment">     利用for in循环的特点，来继承所有的内容</span><br><span class="hljs-comment">     先实例化一个父类的实例</span><br><span class="hljs-comment">     使用for in循环来遍历这个实例对象，因为for in循环可以遍历对象自己身上的属性还会遍历———proto———上的属性</span><br><span class="hljs-comment">     直接把父类实例身上的所有内容直接复制到子类的prototype</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-comment">//父类</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>            <br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>        &#125;<br>    <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// var p=new Person(&#x27;jack&#x27;,18);</span><br>    <span class="hljs-comment">// for(var key in p)&#123;</span><br>    <span class="hljs-comment">//     console.log(key);//name age sayHi</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">//子类</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">gender,name,age</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span>=gender;<br>        <span class="hljs-comment">//for in 继承</span><br>        <span class="hljs-keyword">var</span> p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(name,age);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> p)&#123;<br>            <span class="hljs-comment">// console.log(key);//name age sayHi</span><br>            <span class="hljs-comment">//将p实例的属性及原型上的方法 添加到Student的原型上</span><br>            <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[key]=p[key];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">stduy</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;学术的天职就是好好学习&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;sun&#x27;</span>,<span class="hljs-number">199</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    Student &#123;gender: &#x27;男&#x27;&#125;</span><br><span class="hljs-comment">        gender: &quot;男&quot;</span><br><span class="hljs-comment">        [[Prototype]]: Object</span><br><span class="hljs-comment">            age: 199</span><br><span class="hljs-comment">            name: &quot;sun&quot;</span><br><span class="hljs-comment">            sayHi: ƒ ()</span><br><span class="hljs-comment">            stduy: ƒ ()</span><br><span class="hljs-comment">            constructor: ƒ Student(gender,name,age)</span><br><span class="hljs-comment">            [[Prototype]]: Object</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        拷贝继承的优缺点：</span><br><span class="hljs-comment">        优点：</span><br><span class="hljs-comment">         1:父类的构造函数体内的和原型上的属性和方法都可以继承</span><br><span class="hljs-comment">         2:在同一个位置传参</span><br><span class="hljs-comment">         3:constructor 能正常配套</span><br><span class="hljs-comment">         4:添加自己的方法的时候，确实是在自己的原型身上</span><br><span class="hljs-comment">         总体来说这个继承还好很不错的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        缺点：</span><br><span class="hljs-comment">         1:for in循环需要一直遍历到Object.prototype ,很消耗性能</span><br><span class="hljs-comment">         2:不能继承不可枚举的属性</span><br><span class="hljs-comment">         3:继承来的属性不在自己的身上</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//----------寄生继承  </span><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       构造函数不要写return</span><br><span class="hljs-comment">          return 一个基本数据类型 ，写了白写</span><br><span class="hljs-comment">          return 一个复杂数据类型，构造函数没有意义</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">       寄生继承1</span><br><span class="hljs-comment">       寄生继承实际上是一种伪继承 </span><br><span class="hljs-comment">       （最敷衍的一个继承但是确实达到了继承的目的：在子类中使用父类的属性）</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       核心代码：</span><br><span class="hljs-comment">           const instance=new Person(name,age)</span><br><span class="hljs-comment">           return instance</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-comment">//父类</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>       <br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>   &#125;<br>   <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>   &#125;<br>   <span class="hljs-comment">//子类</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name,age</span>)&#123;<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span>=<span class="hljs-string">&#x27;男&#x27;</span>;<br>        <span class="hljs-comment">//寄生继承1----------------------------</span><br>        <span class="hljs-keyword">const</span> a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(name,age);<br>       <br>        <span class="hljs-comment">//--3  将父类实例的原型改为子类的原型</span><br>        a.<span class="hljs-property">__proto__</span>=<span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><br>        <span class="hljs-comment">//在子类里面直接retuen 父类的实例</span><br>        <span class="hljs-keyword">return</span> a;<br>   &#125;<br><br>   <span class="hljs-comment">//---2  书写属于 student自己方法  在修改原型前设置不上去</span><br>   <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">stduy</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;学术的天职就是好好学习&#x27;</span>);<br>   &#125;<br>   <span class="hljs-keyword">var</span> s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;rose22&#x27;</span>,<span class="hljs-number">19</span>);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---&#x27;</span>,s);<span class="hljs-comment">//s确实是new Student的实例，但是真实的内容是Person的实例</span><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       Person &#123;name: &#x27;rose&#x27;, age: 19&#125;</span><br><span class="hljs-comment">           age: 19</span><br><span class="hljs-comment">           name: &quot;rose&quot;</span><br><span class="hljs-comment">           [[Prototype]]: Object</span><br><span class="hljs-comment">               sayHi: ƒ ()</span><br><span class="hljs-comment">               constructor: ƒ Person(name,age)</span><br><span class="hljs-comment">               [[Prototype]]: Object</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       //---将父类实例的原型改为子类的原型后的打印</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       Person &#123;name: &#x27;rose22&#x27;, age: 19&#125;</span><br><span class="hljs-comment">           age: 19</span><br><span class="hljs-comment">           name: &quot;rose22&quot;</span><br><span class="hljs-comment">           [[Prototype]]: Object</span><br><span class="hljs-comment">           stduy: ƒ ()</span><br><span class="hljs-comment">           constructor: ƒ Student(name,age)</span><br><span class="hljs-comment">           [[Prototype]]: Object</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">    ----------------寄生继承2-------------------</span><br><span class="hljs-comment">       出现了第二种寄生继承</span><br><span class="hljs-comment">       不直接寄生实例，寄生原型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">gender</span>)&#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span>=gender;<br><br>   &#125;<br>   <span class="hljs-comment">//寄生实例</span><br>   <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>   <span class="hljs-comment">//想要的在自己的原型上添加一些方法的时候，父类的原型上也有了这个方法</span><br>   <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">stduy</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;好好学习&#x27;</span>);<br>   &#125;<br>   <span class="hljs-keyword">const</span> s2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;男&#x27;</span>)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s2);<br>   <br>   <span class="hljs-keyword">const</span> p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;sun&#x27;</span>,<span class="hljs-number">100</span>)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1);<br><br><br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   寄生继承的优缺点：</span><br><span class="hljs-comment">       优点：号称完美继承</span><br><span class="hljs-comment">           1 原型和构造函数体内的都可以继承</span><br><span class="hljs-comment">           2 寄生原型的话，自己的属性和方法依旧可以添加和使用</span><br><span class="hljs-comment">       缺点：</span><br><span class="hljs-comment">           1: 寄生实例的时候，没有自己的任何内容</span><br><span class="hljs-comment">           2:寄生原型的时候，一旦修改原型，父类的实例也会有这些方法</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   */</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    //----------------------------------寄生组合继承（完美继承）</span><br><span class="hljs-comment">    合并了 寄生继承 + 原型继承 + 第三方的构造函数 + 借用继承</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>    <span class="hljs-comment">//父类</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;             <br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>    &#125;<br>    <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Abc</span>(<span class="hljs-params"></span>)&#123;<br>    <br>    &#125;<br><br><br>    <span class="hljs-comment">//子类</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">gender,name,age</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span>=gender;<br>        <span class="hljs-comment">//借用继承 ：继承来父类的属性 直接将父类的属性放到自己的身上</span><br>        <span class="hljs-title class_">Person</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,name,age)<br>    &#125;<br>    <span class="hljs-comment">//如果这样写的话 子类原型直接为父类的原型，如果需要向子类的原型上添加方法时，那父类的原型上也就有了</span><br>    <span class="hljs-comment">//这样的话调用父类时候，父类实例也就有了子类的方法，不推荐</span><br>    <span class="hljs-comment">//Student.prototype=Person.prototype</span><br><br>    <span class="hljs-comment">//使用立即执行函数的目的是为了变量私有化</span><br>    <span class="hljs-comment">//----------核心代码</span><br>   (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-comment">//声明一个第三方的构造函数</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">Abc</span>(<span class="hljs-params"></span>)&#123;    <br>        &#125;<br>        <span class="hljs-comment">//让第三方的构造函数的原型为父类的原型 这样就得到父类原型上的方法</span><br>        <span class="hljs-title class_">Abc</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><br>        <span class="hljs-comment">//子类的原型为 第三方函数的实例</span><br>        <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Abc</span>();<br>     <br>   &#125;())<br><br>    <span class="hljs-comment">//向子类的原型上添加方法 实际是添加到了第三方函数的实例上了，这样不会污染父类的原型</span><br>    <span class="hljs-title class_">Student</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">stduy</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;学术的天职就是好好学习&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;sun&#x27;</span>,<span class="hljs-number">1700</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    Student &#123;gender: &#x27;男&#x27;, name: &#x27;sun&#x27;, age: 1700&#125;</span><br><span class="hljs-comment">    age: 1700               //----------这样既有了父类的属性</span><br><span class="hljs-comment">    gender: &quot;男&quot;</span><br><span class="hljs-comment">    name: &quot;sun&quot;</span><br><span class="hljs-comment">    [[Prototype]]: Person</span><br><span class="hljs-comment">        stduy: ƒ ()         //-----------又可以在原型上设置自己的方法且不会污染父类</span><br><span class="hljs-comment">        [[Prototype]]: Object</span><br><span class="hljs-comment">            sayHi: ƒ ()     //-----------继承了父类原型上的方法</span><br><span class="hljs-comment">            constructor: ƒ Person(name,age)</span><br><span class="hljs-comment">            [[Prototype]]: Object</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    //---这样既有了父类的属性，又可以在原型上设置自己的方法且不会污染父类，又继承了父类原型上的方法</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    */</span><br>   <br><br>    <span class="hljs-comment">//创建父类的实例打印，发现父类不受任何影响</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;_____&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;zju&#x27;</span>,<span class="hljs-number">16</span>));<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* </span><br><span class="hljs-comment">       ----------------------------ES6 类型继承-----------------------</span><br><span class="hljs-comment">       es6 把继承这个使用变成了关键字   实际上就是封装了寄生组合继承</span><br><span class="hljs-comment">       1：extends</span><br><span class="hljs-comment">           class 子类类名 extends 父类&#123;&#125;</span><br><span class="hljs-comment">       2: super()</span><br><span class="hljs-comment">           在 constructor里面书写一个supper()</span><br><span class="hljs-comment">           super(name,age) 等价于 Person.call(this,name,age)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       注意：</span><br><span class="hljs-comment">           1:super需要写在 constructor 里面</span><br><span class="hljs-comment">           2:如果你要写自己的属性，必须写在supper后面</span><br><span class="hljs-comment">           3:es6 的继承可以继承ES5的构造函数 也可以继承es6的类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   */</span><br>     <span class="hljs-comment">//父类</span><br>   <span class="hljs-comment">//---es5 构造函数</span><br>   <span class="hljs-comment">// function Person(name,age)&#123;</span><br>       <br>   <span class="hljs-comment">//     this.name=name;</span><br>   <span class="hljs-comment">//     this.age=age;</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// Person.prototype.sayHi=function()&#123;</span><br>   <span class="hljs-comment">//         console.log(&#x27;hello world&#x27;)</span><br>   <span class="hljs-comment">// &#125;</span><br><br>   <span class="hljs-comment">//---es6 类</span><br>   <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>       <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age</span>)&#123;<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;<br>       &#125;<br>       <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello word&#x27;</span>);<br>       &#125;<br>   &#125;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-number">23</span>));<br><br>   <span class="hljs-comment">//------es6中创建一个类</span><br>   <span class="hljs-comment">// class Student&#123;</span><br>   <span class="hljs-comment">//     constructor (gender)&#123;</span><br>   <span class="hljs-comment">//         this.gender=gender;</span><br>   <span class="hljs-comment">//     &#125;</span><br>   <span class="hljs-comment">//     stduy()&#123;</span><br>   <span class="hljs-comment">//         console.log(&#x27;好好学习&#x27;);</span><br>   <span class="hljs-comment">//     &#125;</span><br>   <span class="hljs-comment">// &#125;</span><br><br>   <span class="hljs-comment">//-----es6中通过关键字实现子类继承父类</span><br>   <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span>&#123;<br>       <span class="hljs-title function_">constructor</span> (gender,name,age)&#123;  <br>           <span class="hljs-comment">//super() 要写在自己的属性前面</span><br>           <span class="hljs-comment">//super(name,age)等价于 Person.call(this,name,age)</span><br>           <span class="hljs-variable language_">super</span>(name,age);<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span>=gender;<br>       &#125;<br>       <span class="hljs-title function_">stduy</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;好好学习&#x27;</span>);<br>       &#125;<br>   &#125;<br>   <br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---&#x27;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;rose&#x27;</span>,<span class="hljs-number">18</span>));<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">       Student &#123;name: &#x27;rose&#x27;, age: 18, gender: &#x27;女&#x27;&#125;</span><br><span class="hljs-comment">           age: 18</span><br><span class="hljs-comment">           gender: &quot;女&quot;</span><br><span class="hljs-comment">           name: &quot;rose&quot;</span><br><span class="hljs-comment">           [[Prototype]]: Person</span><br><span class="hljs-comment">               constructor: class Student</span><br><span class="hljs-comment">               stduy: ƒ stduy()</span><br><span class="hljs-comment">               [[Prototype]]: Object</span><br><span class="hljs-comment">                   sayHi: ƒ ()</span><br><span class="hljs-comment">                   constructor: ƒ Person(name,age)</span><br><span class="hljs-comment">                   [[Prototype]]: Object</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   */</span><br></code></pre></td></tr></table></figure><h3 id="类语法"><a href="#类语法" class="headerlink" title="类语法"></a>类语法</h3><p>在es5中，我们使用函数来充当 构造函数(类)</p><p>Es6 引入一个类的概念，就是使用一个新的关键字 class 来定义类, class 是构造函数的语法糖</p><p>注意：一个class定义的类，不能被当做普通函数调用，必须要和new关键字连用，不然就报错</p><p>​只能通过一个new来得到一个对象</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">--------------------定义一个类<br><span class="hljs-keyword">class</span> 类名&#123;<br>    <span class="hljs-comment">// 构造器 ，等价于我们的构造函数 ，定义这个类创造的对象里有哪些属性</span><br>  <span class="hljs-comment">//一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加。</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">a,b</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.属性名<span class="hljs-number">1</span>=a;<br>        <span class="hljs-variable language_">this</span>.属性名<span class="hljs-number">2</span>=b;<br>    &#125;<br>    <span class="hljs-comment">// ------ 直接书写原型上的方法，不用function： </span><br>    <span class="hljs-comment">// ------  方法与方法之间不需要逗号 , 分隔，加了会报错</span><br>    方法名<span class="hljs-number">1</span>()&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;***&#x27;</span>,<span class="hljs-variable language_">this</span>)<br>    &#125;<br>    方法名<span class="hljs-number">2</span>()&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;***&#x27;</span>,<span class="hljs-variable language_">this</span>)<br>    &#125;<br>    方法名<span class="hljs-number">3</span>()&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;***&#x27;</span>,<span class="hljs-variable language_">this</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">-----------------定义一个名为<span class="hljs-title class_">Person</span>的类<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-comment">// 构造器 ，这个类创造的对象里有哪些属性</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">a,b</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=a;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=b;<br>    &#125;<br>    <span class="hljs-comment">// 直接书写原型上的方法，不用function： </span><br>    <span class="hljs-comment">// 也不用,</span><br>    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;***&#x27;</span>,<span class="hljs-variable language_">this</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//---使用Person类去创建对象</span><br><span class="hljs-keyword">var</span> newObj1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;你好&#x27;</span>,<span class="hljs-number">100</span>);   <span class="hljs-comment">//----得到一个实例对象</span><br>newObj1.<span class="hljs-title function_">init1</span>();                    <span class="hljs-comment">//----调用实例对象的方法，方法中的this指向这个创建出来的实例对象</span><br><br><br> <span class="hljs-comment">//ES5 一样，类的所有实例共享一个原型对象。</span><br><span class="hljs-comment">//newObj1和newObj2都是Person的实例，它们的原型都是Person.prototype，所以__proto__属性是相等的。</span><br>newObj1.<span class="hljs-property">__proto__</span> === newObj2.<span class="hljs-property">__proto__</span><br></code></pre></td></tr></table></figure><h3 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h3><ul><li>为什么需要模快化开发：把一类方法放在一个单独的js文件里，为了方便使用，只引入这一类方法的文件</li></ul><p>​        比如：a.js全都是封装的操作DOM的方法</p><p>​       b.js全都是封装的格式化的时间对象的方法</p><p>​       c.js全都是封装的和数字相关的方法。c.js里面进行整合和组装</p><p>​       我们管这样一个个封装好的js文件叫做一个模块</p><ul><li><p>什么是模块化开发</p><p>多个js文件之间的相互配合来实现效果</p></li></ul><p>在没有模块化的时候按照顺序引入文件，把整合文件放在最后面</p><p>问题：1:我们把一般把整合的js文件起名叫做main.js,我们并不知道依赖了哪一个文件</p><p>我们现在只能知道c.js用到了a.js和b.js文件里面的内容，但是b.js里面有没有依赖a.js里面的内容我也不清楚，所以这几个文件的引入顺序也不敢动</p><p>​            2:全局变量污染</p><p>ES6 模块化</p><p>在2015年发布，es6语法里面自带了一个模块化标准，起初个大浏览器并不买账，2016年开始，vue出现了，人家出现了脚手架（开发的大框架直接给你搭建好，我们写项目的时候只需要在指定的位置写代码就可以了），搭建这个脚手架的时候，内置了es6模块化标准，大家都在使用vue，2018年各大浏览器厂商开始原生支持ES6模块化标准，2018年中，Chrom率先原生支持ES6模块化</p><p>语法：变成了js的语法，和关键字，不需要任何第三方文件的引入</p><p>特点：1: 浏览器支持不好，页面必须在服务器上打开。（不过我们项目上线后都是在服务器上的，这点也没有什么大问题）</p><p>​            vscode中可以安装 live server 插件，模拟在服务器上打开</p><p>​Vscode 上使用live Sever 打开网页的设置   (vscode扩展设置)</p><p>浏览器地址栏：  </p><p>http:&#x2F;&#x2F;你电脑的ip地址:5500&#x2F;文件名.html</p><p><a href="http://172.20.10.2:5500/index%E6%A8%A1%E5%9D%97%E5%8C%96.html">http://172.20.10.2:5500/index%E6%A8%A1%E5%9D%97%E5%8C%96.html</a></p><p>​2: 如果你想要使用模块化语法，script标签需要加一个属性type&#x3D;”module”</p><p>使用：每一个文件都可以作为独立模块，也都可以作为整合文件</p><ul><li>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</li></ul><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。</p><p>如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字导出该变量（可以导出变量，函数，class类）</p><p>导出 格式</p><ul><li><p>直接在声明变量(函数)语句的前面使用export</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> 变量<span class="hljs-number">1</span>=变量的值;  <br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> 变量<span class="hljs-number">2</span>=变量的值; <br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;&#125;;<br></code></pre></td></tr></table></figure></li><li><p>在exprt 后面使用{}指定一组要输出的变量，推荐使用这种，因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> 变量<span class="hljs-number">1</span>=变量的值;  <br><br> <span class="hljs-keyword">var</span> 变量<span class="hljs-number">2</span>=变量的值;<br><br><span class="hljs-keyword">export</span> &#123;变量<span class="hljs-number">1</span>，变量<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> 别名&#125;;<br></code></pre></td></tr></table></figure></li></ul><p>导入：</p><p>使用export命令定义了模块的对外接口后，其他js文件就可以通过import命令加载这个模块，并接收导出的数据</p><ul><li>imoport命令接受一对大括号，里面指定要从其他模块导入的变量名，大括号里面的变量名，必须要和被导入模块对外接口的名称相同 （本质是结构赋值）</li></ul><p>如果想为输入的变量重新取一个名字，<code>import</code>命令要使用<code>as</code>关键字，将输入的变量重命名。</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123;接受变量<span class="hljs-number">1</span>，接受变量<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> 别名&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;哪一个文件&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">----b.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;2020-7-31&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> b=<span class="hljs-number">666</span>;<br><br>----c.<span class="hljs-property">js</span><br><span class="hljs-comment">// 需要依赖b.js文件导出的时候，因为b,js是分别导出的，所以接受时必须要以结构赋值的方式分别接受</span><br><span class="hljs-keyword">import</span> &#123;a,b&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./b.js&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b.js 文件----&#x27;</span>,a,b);<br></code></pre></td></tr></table></figure><ul><li>import 接收的变量都是只读的，，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面改写接口</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123;a&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./xxx.js&#x27;</span><br><br>a = &#123;&#125;;<span class="hljs-comment">//---报错</span><br></code></pre></td></tr></table></figure><ul><li><code>import</code>语句会执行所加载的模块，因此可以有下面的写法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br></code></pre></td></tr></table></figure><p>上面代码仅仅执行<code>lodash</code>模块，但是不输入任何值。</p><ul><li><p><code>import</code>命令具有提升效果，会提升到整个模块的头部，首先执行。</p><p>即依赖前置，先执行依赖文件内的语句，在执行整合文件的语句，与代码书写位置没有关系，都是先加载依赖文件</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">-----整合文件c.<span class="hljs-property">js</span>  本是想要先执行c.<span class="hljs-property">js</span>里的输出语句再导入a.<span class="hljs-property">js</span> 和 b.<span class="hljs-property">js</span> 但是是依赖前置<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c.js---c 文件&#x27;</span>,<span class="hljs-title class_">ModeA</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b.js---c 文件----&#x27;</span>,a,b);<br><br><br><span class="hljs-comment">// 我是整合文件，我需要a.js文件里面的内容</span><br><span class="hljs-comment">// ModeA 接收的是a.js 文件里面export default 后面的一整个内容</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ModeA</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span><br><span class="hljs-comment">// 需要依赖b.js文件导出的时候，因为b,js是分别导出的，所以接受时必须要以结构赋值的方式分别接受</span><br><span class="hljs-keyword">import</span>  &#123;a,b&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./b.js&#x27;</span><br><br><br>----输出结果<br><br><br>--------我是a.<span class="hljs-property">js</span>的输出<br>bs------b.<span class="hljs-property">jsd</span>的输出<br>c.<span class="hljs-property">js</span>---c 文件 &#123;<span class="hljs-attr">af1</span>: ƒ, <span class="hljs-attr">af2</span>: ƒ&#125;<br>b.<span class="hljs-property">js</span>---c 文件---- <span class="hljs-number">2020</span>-<span class="hljs-number">7</span>-<span class="hljs-number">31</span> <span class="hljs-number">666</span><br></code></pre></td></tr></table></figure><ul><li>模块整体加载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span>  * <span class="hljs-keyword">as</span> res <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./b.js&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;****&#x27;</span>,res.<span class="hljs-property">a</span>,res.<span class="hljs-property">b</span>)<br></code></pre></td></tr></table></figure><hr><p>使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p><p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到<code>export default</code>命令，为模块指定默认输出。</p><ul><li><p>设置默认的导出</p><ul><li><p>导出语法： </p><ul><li>export  default {导出内容}       有没有{}都可以</li></ul></li><li><p>导入语法. </p><p>import 变量 from ‘哪一个js文件’</p><p>注意：这是import后面不能使用{}</p><p>变量 接收的是指定 文件里面export default 后面的一整个内容</p><p>变量名可以任意取，我们不需要知道导出数据的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">--------a.<span class="hljs-property">js</span><br><span class="hljs-comment">// 我是一个模块，因为这个文件并不会通过script标签引入页面，所以这些变量不是全局变量，不在window上</span><br><br><span class="hljs-keyword">var</span> num=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> flag=<span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">af1</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是a.js里面的af1 方法&#x27;</span>)&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">af2</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是a.js里面的af2 方法&#x27;</span>)&#125;;<br><br><span class="hljs-comment">// 一个文件只能有一个export default </span><br><br><span class="hljs-comment">// export default af1; //---可以只导出一个变量或方法</span><br><span class="hljs-comment">//---如果需要导出多个，那么需要以对象或者数组的形式导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    af1,<br>    af2<br>&#125;<br>--------c.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 我是整合文件，我需要a.js文件里面的内容</span><br><span class="hljs-comment">// ModeA 接收的是a.js 文件里面export default 后面的一整个内容</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ModeA</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c.js 文件&#x27;</span>,<span class="hljs-title class_">ModeA</span>);<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>同样也支持混合导出</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/******************************导出**********************/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;默认导出一个方法&quot;</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> myName=<span class="hljs-string">&quot;laowang&quot;</span>;<br><span class="hljs-comment">/******************************引入**********************/</span><br><span class="hljs-keyword">import</span> myFn,&#123;myName&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myFn</span>(),myName);<span class="hljs-comment">//默认导出一个方法 laowang</span><br></code></pre></td></tr></table></figure><h5 id="默认导入和基本导入一起使用"><a href="#默认导入和基本导入一起使用" class="headerlink" title="默认导入和基本导入一起使用"></a>默认导入和基本导入一起使用</h5><p><strong>语法：import 默认导入，{基本导入} from “文件路径”</strong></p><h5 id="基本导出直接把默认的也一起导出"><a href="#基本导出直接把默认的也一起导出" class="headerlink" title="基本导出直接把默认的也一起导出"></a>基本导出直接把默认的也一起导出</h5><p><strong>语法 export {基本导出，默认导出 as default}</strong></p><h5 id="重命名export和import"><a href="#重命名export和import" class="headerlink" title="重命名export和import"></a>重命名export和import</h5><p>如果导入的多个文件中，变量名字相同，即会产生命名冲突的问题，为了解决该问题，ES6为提供了重命名的方法，当你在导入名称时可以这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/******************************test1.js**********************/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> myName=<span class="hljs-string">&quot;我来自test1.js&quot;</span>;<br><span class="hljs-comment">/******************************test2.js**********************/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> myName=<span class="hljs-string">&quot;我来自test2.js&quot;</span>;<br><span class="hljs-comment">/******************************index.js**********************/</span><br><span class="hljs-keyword">import</span> &#123;myName <span class="hljs-keyword">as</span> name1&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test1.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;myName <span class="hljs-keyword">as</span> name2&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test2.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name1);<span class="hljs-comment">//我来自test1.js</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name2);<span class="hljs-comment">//我来自test1.js</span><br></code></pre></td></tr></table></figure><p><strong>Es6模块化的优点</strong></p><ul><li>预声明的方式导入（在一开始确定依赖关系）</li><li>多种导入导出方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>);<br><span class="hljs-keyword">var</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./b&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">aNum</span>, b.<span class="hljs-property">bStr</span>);<br></code></pre></td></tr></table></figure><ul><li>问题</li></ul><p>1:浏览器支持不好，页面必须在服务器上打开。</p><p>（不过我们项目上线后肯定是在服务器上的，这点也没有什么大问题）</p><p>2:依赖前置</p><p>解决依赖前置：</p><p>Es2020 发布新的标准,引入import()函数，支持动态加载模块</p><p>语法： import(你要加载的文件).then(function(res){})</p><p>import()函数返回一个Promise对象</p><p>import()函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用，它是运行时执行，也就是说，什么时候运行到这一句，就加载指定的模块</p><ul><li>条件加载</li></ul><p><code>import()</code>可以放在<code>if</code>代码块，根据不同的情况，加载不同的模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (condition) &#123;<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;moduleA&#x27;</span>).<span class="hljs-title function_">then</span>(...);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;moduleB&#x27;</span>).<span class="hljs-title function_">then</span>(...);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>import()</code>加载模块成功以后，这个模块会作为一个对象，当作<code>then</code>方法的参数。因此，可以使用对象解构赋值的语法，获取输出接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./myModule.js&#x27;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123;export1, export2&#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...·</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>上面代码中，<code>export1</code>和<code>export2</code>都是<code>myModule.js</code>的输出接口，可以解构获得。</p><p>如果模块有<code>default</code>输出接口，可以用参数直接获得。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./myModule.js&#x27;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">myModule</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myModule.<span class="hljs-property">default</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="面临的问题"><a href="#面临的问题" class="headerlink" title="面临的问题"></a>面临的问题</h3><p>技术的诞生是为了解决某个问题，模块化也是。在js模块化诞生之前，开发者面临很多问题：随着前端的发展，web技术日趋成熟，js功能越来越多，代码量也越来越大。之前一个项目通常各个页面公用一个js，但是js逐渐拆分，项目中引入的js越来越多：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;zepto.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jhash.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;fastClick.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你是2015年前毕业的，项目中的js就是类似这样，这样的js引入造成了问题：</p><ol><li>变量重名：不同文件中的变量如果重名，后面的会覆盖前面的，造成程序运行错误。</li><li>文件依赖顺序：多个文件之间存在依赖关系，需要保证一定加载顺序问题严重。</li></ol><p>这些问题严重干扰开发，也是日常开发中经常遇到的问题。</p><p>举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">var</span> aStr = <span class="hljs-string">&#x27;aa&#x27;</span>;<br><span class="hljs-keyword">var</span> aNum = cNum + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>b.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// b.js</span><br><span class="hljs-keyword">var</span> bStr = aStr + <span class="hljs-string">&#x27; bb&#x27;</span>;<br></code></pre></td></tr></table></figure><p>c.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// c.js</span><br><span class="hljs-keyword">var</span> cNum = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// index.js</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(aNum, bStr);<br></code></pre></td></tr></table></figure><p>四份文件，不同的依赖关系（a依赖c，b依赖a，index依赖a b）在没有模块化的时候我们需要页面中这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./c.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./b.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>严格保证加载顺序，否则报错。</p><h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><p>​用乐高积木来比喻模块化再好不过了。每个积木都是固定的颜色形状，想要组合积木必须使用积木凸起和凹陷的部分进行连接，最后多个积木累积成你想要的形状。</p><p>　　<code>模块化开发是一种管理方式，是一种生产方式，一种解决问题的方案，一个模块就是实现特定功能的文件</code>，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块，</p><h3 id="模块化解决方法"><a href="#模块化解决方法" class="headerlink" title="模块化解决方法"></a>模块化解决方法</h3><h4 id="1-闭包与命名空间"><a href="#1-闭包与命名空间" class="headerlink" title="1. 闭包与命名空间"></a>1. 闭包与命名空间</h4><p>这是最容易想到的也是最简便的解决方式，早在模块化概念提出之前很多人就已经使用闭包的方式来解决变量重名和污染问题。</p><p>这样每个js文件都是使用<strong>IIFE</strong>包裹的，各个js文件分别在不同的词法作用域中，相互隔离，最后通过<strong>闭包</strong>的方式暴露变量。每个闭包都是单独一个文件，每个文件仍然通过script标签的方式下载，标签的顺序就是模块的依赖关系。</p><p>上面的例子我们用该方法修改下写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">var</span> a = (<span class="hljs-keyword">function</span>(<span class="hljs-params">cNum</span>)&#123;<br>   <span class="hljs-keyword">var</span> aStr = <span class="hljs-string">&#x27;aa&#x27;</span>;<br>   <span class="hljs-keyword">var</span> aNum = cNum + <span class="hljs-number">1</span>; <br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">aStr</span>: aStr,<br>       <span class="hljs-attr">aNum</span>: aNum<br>    &#125;;<br>&#125;)(cNum);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// b.js</span><br><span class="hljs-keyword">var</span> bStr = (<span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)&#123;<br>   <span class="hljs-keyword">var</span> bStr = a.<span class="hljs-property">aStr</span> + <span class="hljs-string">&#x27; bb&#x27;</span>;<br>    <br>   <span class="hljs-keyword">return</span> bStr;<br>&#125;)(a);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// c.js</span><br><span class="hljs-keyword">var</span> cNum = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">var</span> cNum = <span class="hljs-number">0</span>;<br>    <br>   <span class="hljs-keyword">return</span> cNum;<br>&#125;)();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, bStr</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">aNum</span>, bStr);<br>&#125;)(a, bStr)<br></code></pre></td></tr></table></figure><p>这种方法下仍然需要在入口处严格保证加载顺序：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./c.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./b.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方式最简单有效，也是<strong>后续其他解决方案的基础</strong>。这样做的意义：</p><ol><li>各个js文件之间避免了变量重名干扰，并且最少的暴露变量，避免全局污染。</li><li>模块外部不能轻易的修改闭包内部的变量，程序的稳定性增加。</li><li>模块与外部的连接通过IIFE传参，语义化更好，清晰地知道有哪些依赖。</li></ol><p>不过各个模块的依赖关系仍然要通过加装script的顺序来保证。</p><h4 id="2-ES6模块化"><a href="#2-ES6模块化" class="headerlink" title="2.ES6模块化"></a>2.ES6模块化</h4><p>在之前的javascript中是没有模块化概念的。如果要进行模块化操作，需要引入第三方的类库。随着技术的发展，前后端分离，前端的业务变的越来越复杂化。直至ES6带来了模块化，才让javascript第一次支持了module。ES6的模块化分为导出（export）与导入（import）两个模块。</p><p><strong>export的用法</strong></p><p>在ES6中每一个模块即是一个文件，在文件中定义的变量，函数，对象在外部是无法获取的。如果你希望外部可以读取模块当中的内容，就必须使用export来对其进行暴露（输出）。先来看个例子，来对一个变量进行模块化。我们先来创建一个test.js文件，来对这一个变量进行输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> myName=<span class="hljs-string">&quot;laowang&quot;</span>;<br></code></pre></td></tr></table></figure><p>然后可以创建一个index.js文件，以import的形式将这个变量进行引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;myName&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName);<span class="hljs-comment">//laowang</span><br></code></pre></td></tr></table></figure><p>页面引用 ，需要在<code>&lt;script&gt;&lt;/script&gt;</code>里添加<code>type=&#39;module&#39;</code></p><p><strong>语法：import {具名符号列表} from “模块路径”</strong></p><p>由于使用的是依赖预加载，因此导入任何其他模块，导入代码必须当时到所有代码之前</p><p>如果要输出多个变量可以将这些变量包装成对象进行模块化输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myName=<span class="hljs-string">&quot;laowang&quot;</span>;<br><span class="hljs-keyword">let</span> myAge=<span class="hljs-number">90</span>;<br><span class="hljs-keyword">let</span> myfn=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是&quot;</span>+myName+<span class="hljs-string">&quot;！今年&quot;</span>+myAge+<span class="hljs-string">&quot;岁了&quot;</span><br>&#125;<br><span class="hljs-keyword">export</span> &#123;<br>    myName,<br>    myAge,<br>    myfn<br>&#125;<br><span class="hljs-comment">/******************************接收的代码调整为**********************/</span><br><span class="hljs-keyword">import</span> &#123;myfn,myAge,myName&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myfn</span>());<span class="hljs-comment">//我是laowang！今年90岁了</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myAge);<span class="hljs-comment">//90</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName);<span class="hljs-comment">//laowang</span><br></code></pre></td></tr></table></figure><p>如果你不想暴露模块当中的变量名字，可以通过as来进行操作:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myName=<span class="hljs-string">&quot;laowang&quot;</span>;<br><span class="hljs-keyword">let</span> myAge=<span class="hljs-number">90</span>;<br><span class="hljs-keyword">let</span> myfn=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是&quot;</span>+myName+<span class="hljs-string">&quot;！今年&quot;</span>+myAge+<span class="hljs-string">&quot;岁了&quot;</span><br>&#125;<br><span class="hljs-keyword">export</span> &#123;<br>    myName <span class="hljs-keyword">as</span> name,<br>    myAge <span class="hljs-keyword">as</span> age,<br>    myfn <span class="hljs-keyword">as</span> fn<br>&#125;<br><span class="hljs-comment">/******************************接收的代码调整为**********************/</span><br><span class="hljs-keyword">import</span> &#123;fn,age,name&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>());<span class="hljs-comment">//我是laowang！今年90岁了</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age);<span class="hljs-comment">//90</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<span class="hljs-comment">//laowang</span><br></code></pre></td></tr></table></figure><h5 id="默认导出（default-export）"><a href="#默认导出（default-export）" class="headerlink" title="默认导出（default export）"></a>默认导出（default export）</h5><p>一个模块只能有一个默认导出，对于默认导出，导入的名称可以和导出的名称不一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/******************************导出**********************/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;默认导出一个方法&quot;</span><br>&#125;<br><span class="hljs-comment">/******************************引入**********************/</span><br><span class="hljs-keyword">import</span> myFn <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<span class="hljs-comment">//注意这里默认导出不需要用&#123;&#125;。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myFn</span>());<span class="hljs-comment">//默认导出一个方法</span><br></code></pre></td></tr></table></figure><p>可以将所有需要导出的变量放入一个对象中，然后通过default export进行导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">myFn</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;默认导出一个方法&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">myName</span>:<span class="hljs-string">&quot;laowang&quot;</span><br>&#125;<br><span class="hljs-comment">/******************************引入**********************/</span><br><span class="hljs-keyword">import</span> myObj <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj.<span class="hljs-title function_">myFn</span>(),myObj.<span class="hljs-property">myName</span>);<span class="hljs-comment">//默认导出一个方法 laowang</span><br></code></pre></td></tr></table></figure><p>同样也支持混合导出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/******************************导出**********************/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;默认导出一个方法&quot;</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> myName=<span class="hljs-string">&quot;laowang&quot;</span>;<br><span class="hljs-comment">/******************************引入**********************/</span><br><span class="hljs-keyword">import</span> myFn,&#123;myName&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myFn</span>(),myName);<span class="hljs-comment">//默认导出一个方法 laowang</span><br></code></pre></td></tr></table></figure><h5 id="默认导入和基本导入一起使用-1"><a href="#默认导入和基本导入一起使用-1" class="headerlink" title="默认导入和基本导入一起使用"></a>默认导入和基本导入一起使用</h5><p><strong>语法：import 默认导入，{基本导入} from “文件路径”</strong></p><h5 id="基本导出直接把默认的也一起导出-1"><a href="#基本导出直接把默认的也一起导出-1" class="headerlink" title="基本导出直接把默认的也一起导出"></a>基本导出直接把默认的也一起导出</h5><p><strong>语法 export {基本导出，默认导出 as default}</strong></p><h5 id="重命名export和import-1"><a href="#重命名export和import-1" class="headerlink" title="重命名export和import"></a>重命名export和import</h5><p>如果导入的多个文件中，变量名字相同，即会产生命名冲突的问题，为了解决该问题，ES6为提供了重命名的方法，当你在导入名称时可以这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/******************************test1.js**********************/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> myName=<span class="hljs-string">&quot;我来自test1.js&quot;</span>;<br><span class="hljs-comment">/******************************test2.js**********************/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> myName=<span class="hljs-string">&quot;我来自test2.js&quot;</span>;<br><span class="hljs-comment">/******************************index.js**********************/</span><br><span class="hljs-keyword">import</span> &#123;myName <span class="hljs-keyword">as</span> name1&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test1.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;myName <span class="hljs-keyword">as</span> name2&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./test2.js&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name1);<span class="hljs-comment">//我来自test1.js</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name2);<span class="hljs-comment">//我来自test1.js</span><br></code></pre></td></tr></table></figure><p><strong>Es6模块化的优点</strong></p><ul><li>预声明的方式导入（在一开始确定依赖关系）</li><li>多种导入导出方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>);<br><span class="hljs-keyword">var</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./b&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">aNum</span>, b.<span class="hljs-property">bStr</span>);<br></code></pre></td></tr></table></figure><h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><ul><li><p>赋值</p><p>把一个对象的地址赋值给另一个变量</p><p>两个变量操作同一个空间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o1=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> o2=o1;<br>o2.<span class="hljs-property">name</span>=<span class="hljs-string">&#x27;rose&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1,o2);<span class="hljs-comment">//这是赋值和拷贝没有关系</span><br></code></pre></td></tr></table></figure></li><li><p>浅拷贝</p><p>把对象里面的每一个成员，复制一份一模一样的内容，放到另一个对象里面</p><p>当对象里有一个对象成员是复杂数据类型时，这个成员依旧是一样的</p><p>浅拷贝只是操作对象里面的一层可以没有关系，如果再深层次就会出现问题了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">   <span class="hljs-keyword">var</span> o1=&#123;<br>          <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<br>          <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>          <span class="hljs-comment">//o1.onfo存储的是一个地址</span><br>         <span class="hljs-comment">//浅拷贝：当对象里有一个对象成员是复杂数据类型时，这个成员依旧是一样的</span><br>          <span class="hljs-attr">info</span>:&#123;<br>              <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>              <span class="hljs-attr">b</span>:<span class="hljs-number">2</span><br>          &#125;<br>      &#125;<br>   <span class="hljs-keyword">var</span> o2=&#123;&#125;;<br>  <br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> o1)&#123;<br>  <span class="hljs-comment">//将o1里的成员赋值过去的时候，其实是将的o1.info存储的地址赋值给了o2.info</span><br>  <br>    o2[i]=o1[i]<br>  &#125;<br>  <span class="hljs-comment">//o1和o2是两个对象空间，但是里面的内容是一样的</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1,o2)<br>   <br>  <br>o2.<span class="hljs-property">name</span>=<span class="hljs-string">&#x27;jiayou&#x27;</span><br>o2.<span class="hljs-property">info</span>.<span class="hljs-property">a</span>=<span class="hljs-string">&#x27;new Value&#x27;</span>;  <span class="hljs-comment">//o.info和o2.info操作的是一个内存空间</span><br>  <span class="hljs-comment">//o1和o2没有关系，操作其中一个，另一个不受影响</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1,o2);<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> o1=&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<br>      <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>      <span class="hljs-attr">info</span>:&#123;<br>          <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>          <span class="hljs-attr">b</span>:<span class="hljs-number">2</span><br>      &#125;<br>  &#125;<br>  <br><span class="hljs-keyword">let</span> o2=&#123;...o1&#125;<br>o2.<span class="hljs-property">age</span>=<span class="hljs-number">66</span>;   <span class="hljs-comment">//第一层深拷贝</span><br>o2.<span class="hljs-property">info</span>.<span class="hljs-property">a</span>=<span class="hljs-string">&#x27;哈哈哈&#x27;</span>;  <span class="hljs-comment">//第二层没有实现深拷贝</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1,o2) <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]<br><span class="hljs-keyword">var</span> c=[];<br><span class="hljs-keyword">var</span> b=c.<span class="hljs-title function_">concat</span>(a);<br>b[<span class="hljs-number">0</span>]=<span class="hljs-number">5</span>;<br>b[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">6</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b[<span class="hljs-number">0</span>]);        <span class="hljs-comment">//5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[<span class="hljs-number">0</span>])        <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]);   <span class="hljs-comment">//6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>])    <span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure><ul><li><p>深拷贝</p><p>对象空间里面不管有多少层，都是相对独立的，没有关系</p><p>深拷贝的实现方式1：</p><p>​使用for in遍历赋值</p><p>只要碰到某一个是复杂数据类型 对象或数组，再次进入到这个数据类型里面进行二次遍历，如果还有就在进入遍历。。（太麻烦，不推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <br>    <span class="hljs-keyword">var</span> obj=&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;sun&#x27;</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">123</span>,<br>        <span class="hljs-attr">skill</span>:&#123;<br>            <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">b</span>:&#123;<br>                <span class="hljs-attr">c</span>:&#123;<br>                    <span class="hljs-attr">e</span>:<span class="hljs-string">&#x27;hoa&#x27;</span><br>                &#125;,<br>                <span class="hljs-attr">d</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">haha</span>:[<span class="hljs-number">666</span>,<span class="hljs-number">777</span>,<span class="hljs-number">88</span>,[<span class="hljs-number">55</span>,<span class="hljs-number">22</span>,[<span class="hljs-number">44</span>,<span class="hljs-number">99</span>]]],<br>        <span class="hljs-attr">i</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>);<br>        &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">var</span> newObj=&#123;&#125;;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">deep</span>(<span class="hljs-params">newObj,obj</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj)&#123;<br>           <span class="hljs-comment">// console.log(obj[i]);</span><br>            <span class="hljs-keyword">if</span>(obj[key].<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;复杂---数组&#x27;</span>,obj[key] );<br>                newObj[key]=[];<br>                <span class="hljs-comment">//调用deep函数</span><br>                <span class="hljs-title function_">deep</span>(newObj[key],obj[key])<br>                <span class="hljs-comment">//------这里是重复执行的相同的代码，可以使用递归</span><br>                <span class="hljs-comment">//再去判断 [666,777,88,[55,22]]</span><br>                <span class="hljs-comment">// for(i in obj[key])&#123;</span><br>                <span class="hljs-comment">//     if(obj[key][i].constructor === Array)&#123;</span><br>                <span class="hljs-comment">//         newObj[key][i]=[]</span><br>                <span class="hljs-comment">//     &#125;else if(obj[key].constructor === Object)&#123;</span><br>                <span class="hljs-comment">//       console.log(&#x27;复杂---对象&#x27;,obj[key] );</span><br>                <span class="hljs-comment">//      &#125;else&#123;</span><br>                <span class="hljs-comment">//         newObj[key][i]=obj[key][i]</span><br>                <span class="hljs-comment">//     &#125;</span><br>                <span class="hljs-comment">// &#125;</span><br>  <br>  <br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(obj[key].<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;复杂---对象&#x27;</span>,obj[key] );<br>                newObj[key]=&#123;&#125;;<br>                 <span class="hljs-comment">//调用deep函数</span><br>                <span class="hljs-title function_">deep</span>(newObj[key],obj[key])<br>  <br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//如果是基本数据类型的值 和 函数</span><br>                newObj[key]=obj[key]<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">deep</span>(newObj,obj)<br>   <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;***&#x27;</span>,newObj);<br>  <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>深拷贝实现方式2:</p><p>   使用json</p><p>不管多复杂的数据类型，转换为json以后就是字符串了，字符串的赋值是基本数据类型，赋值以后再转换回来</p><p><strong>注意：</strong>Json的方式实现深拷贝是有局限性的，函数在转为json字符串时是会被忽略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o1=&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">info</span>:&#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">1</span><br>    <span class="hljs-attr">b</span>:<span class="hljs-number">2</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(o1);<br><span class="hljs-keyword">var</span> o2=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(obj);<br><br>o2.<span class="hljs-property">info</span>.<span class="hljs-property">a</span>=<span class="hljs-number">88</span>; <span class="hljs-comment">//此时操作o2，o1就不再受影响了</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o1,o2)<br></code></pre></td></tr></table></figure></li></ul><h2 id="轮播图案例"><a href="#轮播图案例" class="headerlink" title="轮播图案例"></a>轮播图案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><code class="hljs html">--------------------------------轮播<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.lb-continer</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">            <span class="hljs-comment">/* position: fixed; */</span></span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>:<span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>:hidden;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.img-box</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>);</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>:hidden;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">100</span>, <span class="hljs-number">237</span>, <span class="hljs-number">184</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">207</span>, <span class="hljs-number">237</span>, <span class="hljs-number">100</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">237</span>, <span class="hljs-number">100</span>, <span class="hljs-number">184</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">       <span class="hljs-selector-class">.img-box</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.lb-continer</span>&gt;<span class="hljs-selector-class">.left</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.lb-continer</span>&gt;<span class="hljs-selector-class">.right</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">42</span>, <span class="hljs-number">165</span>, <span class="hljs-number">93</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.click-ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.click-ridius</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornsilk;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.click-action</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span> <span class="hljs-selector-tag">img</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>777<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lb-continer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-box&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;li class=&quot;img-cell&quot;&gt;</span><br><span class="hljs-comment">                &lt;img src=&quot;../图片素材/td.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="hljs-comment">            &lt;/li&gt; --&gt;</span><br>            <span class="hljs-comment">&lt;!--  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-cell&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../图片素材/by.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-cell&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../图片素材/hb.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-cell&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../张玮/屏幕快照 2021-03-27 下午12.41.55.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>               <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-cell&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../图片素材/td.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 复制一份第一张轮播图，来实现无缝滚动的效果，我们看到最后一张图的时候会以为是第一张</span><br><span class="hljs-comment">            &lt;li class=&quot;img-cell&quot;&gt;</span><br><span class="hljs-comment">                &lt;img src=&quot;../图片素材/by.jpeg&quot; alt=&quot;&quot;&gt;</span><br><span class="hljs-comment">            &lt;/li&gt; --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 可点击的小圆圈定位 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;click-ul&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;li class=&quot;click-ridius&quot;&gt;&lt;/li&gt;</span><br><span class="hljs-comment">            &lt;li class=&quot;click-ridius&quot;&gt;&lt;/li&gt;</span><br><span class="hljs-comment">            &lt;li class=&quot;click-ridius&quot;&gt;&lt;/li&gt;</span><br><span class="hljs-comment">            &lt;li class=&quot;click-ridius&quot;&gt;&lt;/li&gt; --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- js --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./utils.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      </span><br><span class="language-javascript">        <span class="hljs-comment">// 最外层的盒子</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> lbContiner=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.lb-continer&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 左侧按钮</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> left=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span.left&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 右侧按钮</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> right=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span.right&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 轮播图的盒子</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> imgBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.img-box&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 点击的小圆圈的盒子</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> clickUl=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.click-ul&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//获取轮播图图片的宽度</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> imgWidth=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.img-cell&#x27;</span>).<span class="hljs-property">offsetWidth</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(left,right,imgWidth);</span><br><span class="language-javascript">        <span class="hljs-comment">//动态生成可点击小圆圈</span></span><br><span class="language-javascript">       <span class="hljs-comment">//imgBox.childElementCount 为轮播图图片的个数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> str=<span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=imgBox.<span class="hljs-property">childElementCount</span>;i++)&#123;</span><br><span class="language-javascript">            str+=<span class="hljs-string">&#x27;&lt;li class=&quot;click-ridius&quot;&gt;&lt;/li&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 向页面中渲染小圆圈</span></span><br><span class="language-javascript">        clickUl.<span class="hljs-property">innerHTML</span>=str; </span><br><span class="language-javascript">        <span class="hljs-comment">// 获取可以点击的小圆圈</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> clickLiBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.click-ul li&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 默认页面进来时第一个小圆圈为选中状态</span></span><br><span class="language-javascript">        clickLiBox[<span class="hljs-number">0</span>].<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;click-ridius click-action&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 循环遍历所有可以点击的小圆圈给其绑定点击事件</span></span><br><span class="language-javascript">        clickLiBox.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//给每一个小园圈设置data-index属性记录这是第几个小圈圈</span></span><br><span class="language-javascript">            item.<span class="hljs-property">dataset</span>[<span class="hljs-string">&#x27;index&#x27;</span>]=index;</span><br><span class="language-javascript">            <span class="hljs-comment">// item.setAttribute(&#x27;data-index&#x27;,index)</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;***&#x27;</span>,item.<span class="hljs-property">dataset</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 给每一个小圆圈绑定一个点击事件</span></span><br><span class="language-javascript">            item.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//取消所有小圈圈身上的背景色</span></span><br><span class="language-javascript">                clickLiBox.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;</span><br><span class="language-javascript">                    item.<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;click-ridius&#x27;</span></span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">                <span class="hljs-comment">// 给当前被点击的这个小圆圈添加背景颜色</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;click-ridius click-action&#x27;</span></span><br><span class="language-javascript">                <span class="hljs-comment">// this.classList.add(&#x27;click-action&#x27;)</span></span><br><span class="language-javascript">                <span class="hljs-comment">//点击小圆圈让轮播滚动到指定的位置</span></span><br><span class="language-javascript">                <span class="hljs-comment">//通过this.dataset[&#x27;index&#x27;]知道当前点击的小圆圈是第几个小圆圈</span></span><br><span class="language-javascript">                <span class="hljs-title function_">animation</span>(imgBox,-<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataset</span>[<span class="hljs-string">&#x27;index&#x27;</span>]*imgWidth)</span><br><span class="language-javascript">                <span class="hljs-comment">//我们的左右按钮是通过num来计算显示的图片，我们的点击小圆圈和左右按钮没有关系，我们应该将每次点击小圈圈后的小圆圈的索引给num重新赋值</span></span><br><span class="language-javascript">                num=<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataset</span>[<span class="hljs-string">&#x27;index&#x27;</span>];</span><br><span class="language-javascript">                <span class="hljs-comment">// 给小圆圈的背景重新赋值</span></span><br><span class="language-javascript">                circleNum=<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataset</span>[<span class="hljs-string">&#x27;index&#x27;</span>];</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&gt;&gt;&gt;&#x27;</span>,num)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标移入轮播图的外层盒子就显示左右按钮</span></span><br><span class="language-javascript">        lbContiner.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseover&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            left.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">            right.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//鼠标进入时清除自动播放</span></span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(lunboAnimation);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">         <span class="hljs-comment">// 鼠标移出轮播图的外层盒子就隐藏左右按钮</span></span><br><span class="language-javascript">        lbContiner.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseout&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            left.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">            right.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">            lunboAnimation=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                right.<span class="hljs-title function_">click</span>();</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;*****&#x27;</span>,imgBox.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>))</span><br><span class="language-javascript">        <span class="hljs-comment">//imgBox.children[0].cloneNode(true) 为 克隆轮播图中的第一张图的li，参数true时为深层拷贝，还有复制li中的img标签</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 向轮播图的盒子最后添加刚才复制的第一个里</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 此在向页面渲染点击小圆圈后添加li元素，不会增加小圆圈的数量</span></span><br><span class="language-javascript">        imgBox.<span class="hljs-title function_">appendChild</span>(imgBox.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>));</span><br><span class="language-javascript">        clickLiBox[num]</span><br><span class="language-javascript">       <span class="hljs-comment">//  每点击一下右侧按钮，图片就滚动一张</span></span><br><span class="language-javascript">       <span class="hljs-comment">//  声明一个变量来记录我们点击了几次right按钮，来实现滚动</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num=<span class="hljs-number">0</span>;  <span class="hljs-comment">//num控制了图片下一张的播放</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> circleNum=<span class="hljs-number">0</span>;  <span class="hljs-comment">//控制小圆圈的显示</span></span><br><span class="language-javascript">        <span class="hljs-comment">//设置截流阀，防止按钮点击过快，目的时当上一张轮播播放完了再开启截流阀，允许用户点击</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> flag=<span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        right.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(flag)&#123;</span><br><span class="language-javascript">                flag=<span class="hljs-literal">false</span>;<span class="hljs-comment">//先关闭截流阀，当这张轮播动画播放完再开启</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 当看到最后一张图片后点击的时候，将轮播图瞬间定位到第一张，然后再num+1，滚动到第二张图</span></span><br><span class="language-javascript">                <span class="hljs-comment">// mgBox.children.length-1为最后一张图</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(num==imgBox.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)&#123;</span><br><span class="language-javascript">                    imgBox.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=<span class="hljs-number">0</span>+<span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-comment">//瞬间移动到第一张图后，num从新开始赋值为0</span></span><br><span class="language-javascript">                    num=<span class="hljs-number">0</span>;      </span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                num++; </span><br><span class="language-javascript">                <span class="hljs-title function_">animation</span>(imgBox,-imgWidth*num,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    flag=<span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">                circleNum++;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">                <span class="hljs-comment">// 当显示最后一张克隆的图片时，没有可以显示的小圆圈，（小圆圈的个数比图片少，）其实最后一张图片在用户看来就是第一张图片，将小圆圈计数赋值为0</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 给第一个小圆圈增加选中状态</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(circleNum==clickLiBox.<span class="hljs-property">length</span>)&#123;</span><br><span class="language-javascript">                    circleNum=<span class="hljs-number">0</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-title function_">changeCircle</span>() </span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">          </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        left.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(flag)&#123;</span><br><span class="language-javascript">                flag=<span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//当显示第一张图片后再点击左侧按钮在显示前快速移动到最后一张，给num赋值为最后一张图的索引，再num--</span></span><br><span class="language-javascript">                    imgBox.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>=-(imgBox.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>)*imgWidth+<span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript">                    num=imgBox.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;  </span><br><span class="language-javascript"></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                num--;</span><br><span class="language-javascript">                </span><br><span class="language-javascript">                <span class="hljs-title function_">animation</span>(imgBox,-imgWidth*num,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    flag=<span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            </span><br><span class="language-javascript">                <span class="hljs-comment">// 当显示最后一张克隆的图片时，没有可以显示的小圆圈，（小圆圈的个数比图片少，）其实最后一张图片在用户看来就是第一张图片，将小圆圈计数赋值为0</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 给第一个小圆圈增加选中状态</span></span><br><span class="language-javascript">            </span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(circleNum==<span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">                    circleNum=clickLiBox.<span class="hljs-property">length</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                circleNum--;</span><br><span class="language-javascript">                <span class="hljs-title function_">changeCircle</span>()</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">       </span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeCircle</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">           <span class="hljs-comment">//取消所有小圈圈身上的背景色</span></span><br><span class="language-javascript">           clickLiBox.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;</span><br><span class="language-javascript">                item.<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;click-ridius&#x27;</span></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            clickLiBox[circleNum].<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;click-ridius click-action&#x27;</span>;  </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 轮播图自动播放，实际就是每间隔一定事件就触发一次点击right按钮的点击事件</span></span><br><span class="language-javascript">    <span class="hljs-comment">//我们要在鼠标经过轮播图时停止轮播，鼠标离开轮播时在开启轮播</span></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> lunboAnimation=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        right.<span class="hljs-title function_">click</span>();</span><br><span class="language-javascript">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript"><span class="hljs-comment">// -------------------------------------------------- 切换标签页</span></span><br><span class="language-javascript"><span class="hljs-comment">//当浏览器最小化或者离开当前页面的时候，定时器是继续走着的，但是Dom是不动的</span></span><br><span class="language-javascript"><span class="hljs-comment">//---解决方式：当离开页面的时候关闭定时器，回到页面的时候开启定时器</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">changeDocument</span>()</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeDocument</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 可以给document添加一个显示隐藏的监听器</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(&#x27;标签页状态变化&#x27;)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// document身上有一个属性，叫做visibilityState属性可以表示当前页面是显示还是隐藏状态 hidden或者visibilitySate</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(document.visibilityState);</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span>==<span class="hljs-string">&#x27;hidden&#x27;</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//页面隐藏了 清除定时器关闭自动轮播</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;_____清除定时器&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(lunboAnimation)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//页面显示了 开启定时器自动轮播</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;_____开启定时器&quot;</span>);</span><br><span class="language-javascript">            lunboAnimation=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                right.<span class="hljs-title function_">click</span>();</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><code class="hljs html">-------------------------渐变轮播<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.lb-continer</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">            <span class="hljs-comment">/* position: fixed; */</span></span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>:<span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* overflow:hidden; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.img-box</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>);</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* overflow:hidden; */</span></span><br><span class="language-css">            <span class="hljs-comment">/* position: absolute; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">100</span>, <span class="hljs-number">237</span>, <span class="hljs-number">184</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">207</span>, <span class="hljs-number">237</span>, <span class="hljs-number">100</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">237</span>, <span class="hljs-number">100</span>, <span class="hljs-number">184</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">       <span class="hljs-selector-class">.img-box</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 所有的img透明度设为0 隐藏 */</span></span><br><span class="language-css">            <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>:opacity <span class="hljs-number">2s</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.active</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: chartreuse;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.lb-continer</span>&gt;<span class="hljs-selector-class">.left</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.lb-continer</span>&gt;<span class="hljs-selector-class">.right</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">42</span>, <span class="hljs-number">165</span>, <span class="hljs-number">93</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.click-ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.click-ridius</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornsilk;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.click-action</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-cell</span> <span class="hljs-selector-tag">img</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.li-style</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: burlywood;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lb-continer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-box&quot;</span>&gt;</span><br>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-cell active&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../图片素材/by.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-cell&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../图片素材/hb.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-cell&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../张玮/屏幕快照 2021-03-27 下午12.41.55.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>               <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-cell&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../图片素材/td.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 可点击的小圆圈定位 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;click-ul&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 最外层的盒子</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> lbContiner=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.lb-continer&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 左侧按钮</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> left=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span.left&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 右侧按钮</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> right=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span.right&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 轮播图的盒子</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> imgBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.img-box&#x27;</span>);</span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> imgLi=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.img-box li&#x27;</span>)</span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> clickBox=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.click-ul&#x27;</span>)</span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(imgLi);</span><br><span class="language-javascript">        <span class="hljs-comment">//  创建焦点，有多少img就创建多少个li,添加到焦点的父元素里  </span></span><br><span class="language-javascript">       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=imgLi.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> li=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<span class="hljs-comment">//创建li标签  </span></span><br><span class="language-javascript">            li.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;li-style&#x27;</span>);<span class="hljs-comment">//给li添加类型</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 给每一个小焦点添加自定义的index，记录这是第几个焦点</span></span><br><span class="language-javascript">            li.<span class="hljs-property">dataset</span>.<span class="hljs-property">index</span>=i;</span><br><span class="language-javascript">            <span class="hljs-comment">// 默认显示第一张img，所以给第一个焦点添加选中</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">                li.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 给每一个焦点添加点击事件，当被点击的时候</span></span><br><span class="language-javascript">            li.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataset</span>);</span><br><span class="language-javascript">               <span class="hljs-title function_">changeImg</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">index</span>-<span class="hljs-number">0</span>);<span class="hljs-comment">//先转换一下数据类型</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            clickBox.<span class="hljs-title function_">appendChild</span>(li)</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标移入轮播图的外层盒子就显示左右按钮</span></span><br><span class="language-javascript">        lbContiner.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseover&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            left.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">            right.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// 鼠标移入时清除定时器</span></span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(timer)</span><br><span class="language-javascript">       </span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">         <span class="hljs-comment">// 鼠标移出轮播图的外层盒子就隐藏左右按钮</span></span><br><span class="language-javascript">        lbContiner.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseout&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            left.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="language-javascript">            right.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;none&#x27;</span>;  </span><br><span class="language-javascript">            <span class="hljs-comment">// 鼠标移出时开启定时器</span></span><br><span class="language-javascript">            <span class="hljs-title function_">autoPlay</span>()</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        right.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">changeImg</span>(<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        left.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">changeImg</span>(<span class="hljs-literal">false</span>);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num=<span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeImg</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;****&#x27;</span>,value)</span><br><span class="language-javascript">            <span class="hljs-comment">// 通过调用函数的时候给形参传值来判断点击的是left按钮还是right按钮</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 将之前显示img隐藏</span></span><br><span class="language-javascript">            imgLi[num].<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript">            clickBox.<span class="hljs-property">children</span>[num].<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 显示下一张</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(value===<span class="hljs-literal">true</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//形参赋值为true的时候点击是right按钮，显示下一张img</span></span><br><span class="language-javascript">                num++</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (num==imgLi.<span class="hljs-property">length</span>) &#123;</span><br><span class="language-javascript">                    num=<span class="hljs-number">0</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(value===<span class="hljs-literal">false</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// //形参赋值为false的时候点击是left按钮，显示上一张img</span></span><br><span class="language-javascript">                num--</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (num&lt;<span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                    num=imgLi.<span class="hljs-property">length</span>-<span class="hljs-number">1</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 点击焦点是传入所点击焦点的索引</span></span><br><span class="language-javascript">                num=value</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">           </span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num,imgLi.<span class="hljs-property">length</span>)</span><br><span class="language-javascript">            imgLi[num].<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 给当前img对应的焦点添加选中样式</span></span><br><span class="language-javascript">            clickBox.<span class="hljs-property">children</span>[num].<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// ---自动轮播</span></span><br><span class="language-javascript">        <span class="hljs-title function_">autoPlay</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> timer;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">autoPlay</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            timer=<span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// right.click();</span></span><br><span class="language-javascript">                 <span class="hljs-title function_">changeImg</span>(<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">             &#125;,<span class="hljs-number">2000</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//-------切换标签页</span></span><br><span class="language-javascript">        <span class="hljs-title function_">changeDocument</span>()</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeDocument</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 可以给document添加一个显示隐藏的监听器</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(&#x27;标签页状态变化&#x27;)</span></span><br><span class="language-javascript">                <span class="hljs-comment">// document身上有一个属性，叫做visibilityState属性可以表示当前页面是显示还是隐藏状态 hidden或者visibilitySate</span></span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(document.visibilityState);</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span>==<span class="hljs-string">&#x27;hidden&#x27;</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">//页面隐藏了 清除定时器关闭自动轮播</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;_____清除定时器&quot;</span>);</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearInterval</span>(timer)</span><br><span class="language-javascript"></span><br><span class="language-javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">//页面显示了 开启定时器自动轮播</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;_____开启定时器&quot;</span>);</span><br><span class="language-javascript">                    timer=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                        right.<span class="hljs-title function_">click</span>();</span><br><span class="language-javascript">                    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><ul><li><p>canvas和canvas技术</p><ul><li>canvas：一般指的是html5标准里的一个标签</li></ul><p>  canvas标签会在页面上出现一个画布，可以在上面进行绘制，动画，。。。</p><ul><li><p>canvas技术：一般指的是使用js的api在canvas画布上进行图案的绘制</p><p>依靠js来进行绘图，包括点 线 面 图片。。。，一切在画布上的内容都是依靠js添z</p></li></ul></li><li><p>canvas画布</p><ul><li>一个闭合标签，默认得画布大小是 300*150大小，如果想要调整画布的大小，不能使用css的width和height样式属性来调整，当使用css去调整画布大小的时候，只是改变了可视大小，虽然看着画布变大了，但是真实的画布大小依旧是300✖️150，实际是使用两个像素点描述一个像素点的内容，只是可视区域表达不是真正的绘图面积变大；</li></ul><p>如果真实的想调整画布大小，需要直接在标签上使用width和height属性来进行调整，书写的时候不需要带单位</p><ul><li><p>标签的兼容性不是很好</p><p>ie9以下不兼容，标签对内书写一段文本，会在不支持canvas标签的浏览器中显示文本内容，在支持canvas标签的浏览器中不显示文本内容而是现实一个画布（在ie浏览中调为ie8查看）</p></li><li><p>在canvas上鼠标右键会发现弹出来的菜单显示的内容不一样</p><p>canvas的本质就是出现一张图片，只不过一个画布是一个空白的图片，我们使用js在这个“图片”上添加内容而已</p></li><li><p>在canvas上进行绘制</p><ul><li><p>1:获取canvas元素</p></li><li><p>2:要获取这个元素的“工具箱”，工具箱里面有很多的 直线工具 ，矩形工具，弧形工具，…</p></li></ul><p>​依赖这些工具箱内的工具进行绘制，我们管这个工具箱叫做canvas上下文</p><p>​ 语法：var ctx&#x3D;canvas.getContext(‘2d’);   2d就是平面绘图工具，目前不支持3d，现在的在canvas上的绘图效果都是在canvas上使用2d模拟出来的，比如给一个盒子加一个阴影</p><p>​返回值：一个canvas工具箱，我们可以使用里面的工具进行绘制图形</p></li></ul><h4 id="3-体验画一条直线"><a href="#3-体验画一条直线" class="headerlink" title="3:体验画一条直线"></a>3:体验画一条直线</h4><p>3.1 把笔一到你的线的起点的位置</p><p>​语法：ctx.moveTo(x,y);   （canvas的左边就是从canvas的左上角开始为 0 ，0）</p><p>3.2 以线的形式走到终点位置</p><p>​语法：ctx.lineTo(x,y);</p><p>3.3 路径填充</p><p>​之前的3.1和3.2只是绘制了一个线的路径,但是这个路径没有被任何内容填充</p><p>  填充有两种方式描边和填充：</p><p>​ 描边：线就是描边</p><p>​语法：cox.stroke()</p><p>​会把你绘制的好的路径描边出现颜色，默认都是黑色的,1px 宽度的线</p><p>​ 填充：面就是填充</p><ul><li><p>canvas线的颜色和宽度问题</p><p>默认的线宽度是1px 颜色是rgb(0,0,0);</p><p>因为：canvas绘制的线，线的中心点在坐标位置</p><p>比如：y 10的位置画一条 宽1px的线，把1px的线的中心点对准y 10的坐标位置，这条线的描述实际上是从9.5到10.5的描述，但是浏览器解析不了1px以下，所以当从9.5到10.5的线会被描述成9～11的线，从1px宽度被拉伸为2px宽，因为必须要保证这条线的中心点卡在y 10的位置上，当一条1px的纯黑的线，被强行拉宽到2px的时候，颜色就变线了，验证比较：将这条线宽度设置为2px的时候，会出现的情况是，宽度不变，颜色变深</p><ul><li>改变canvas绘制线宽度 语法：ctx.lineWidth&#x3D;数字；   （不用单位）</li></ul></li><li><p>canvas绘制平行线</p><ul><li><p>把画线的步骤重复两次，分别给一个合适的坐标，当你直接移到第二个位置开始画线的时候，等描边的时候，实际上两个线是有关联的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>   <span class="hljs-comment">//生成一个canvas工具箱</span><br>   <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ctx)<br>   <span class="hljs-comment">//体验画一条线</span><br>   <span class="hljs-comment">//移动画笔到线的起点的位置</span><br>   ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>);<br>   <span class="hljs-comment">//以线的形式走到终点的位置</span><br>   ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);<br>   <span class="hljs-comment">//对线进行描边</span><br>   ctx.<span class="hljs-title function_">stroke</span>()<br>   ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">50</span>)<br>   ctx.<span class="hljs-title function_">stroke</span>()<br></code></pre></td></tr></table></figure><p>![截屏2021-11-25 下午8.15.41](&#x2F;Users&#x2F;wei&#x2F;Desktop&#x2F;markdown&#x2F;js备课&#x2F;img&#x2F;截屏2021-11-25 下午8.15.41.png)</p></li><li><p>当 描第二条线的时候，会再描一次第一条线，所以第一条线的颜色会比第二条线的颜色深，解决方法是：只描最后一次，前面的不进行描边绘制</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br><span class="hljs-comment">//生成一个canvas工具箱</span><br><span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ctx)<br>ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">2</span>;<span class="hljs-comment">//设置线的宽度</span><br><span class="hljs-comment">//体验画一条线</span><br><span class="hljs-comment">//移动画笔到线的起点的位置</span><br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>);<br><span class="hljs-comment">//以线的形式走到终点的位置</span><br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);<br><span class="hljs-comment">//对线进行描边</span><br><span class="hljs-comment">// ctx.stroke();//对第一条线描边 注释掉是为了防止多次对第一条线描边</span><br><span class="hljs-comment">//画一条平行线，先将笔移到第二条线的起点位置</span><br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,<span class="hljs-number">50</span>);<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">50</span>);<span class="hljs-comment">//第二条线的终点 绘制轨迹</span><br><span class="hljs-comment">//对第二线的描边的同时，也会再次对第一条线进行描边，所以第一条线的颜色会比第二条线的颜色深，解决方式，再所有轨迹订完后统一只描一次边</span><br>ctx.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure></li><li><p>canvas绘制一个带有颜色的平行线</p><p>要在描边之前设置一个描边的颜色</p><p>语法：ctx.strokeStyle&#x3D;”颜色”;  颜色的表示可以是 单词  十六进制  rgb rgba。。。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>     <span class="hljs-comment">//生成一个canvas工具箱</span><br>     <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ctx)<br>     ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">2</span>;<span class="hljs-comment">//设置线的宽度  </span><br>     ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>);<br>     ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);<br>     ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,<span class="hljs-number">50</span>);<br>     ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">50</span>);<br>     <span class="hljs-comment">//描边之前绘制颜色</span><br>     ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span>;<br>     ctx.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><ul><li>绘制一个不一样颜色的平行线</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br><span class="hljs-comment">//生成一个canvas工具箱</span><br><span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ctx)<br><span class="hljs-comment">//绘制第一条线</span><br>ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">4</span>;<span class="hljs-comment">//设置线的宽度</span><br>ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span>;<br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,<span class="hljs-number">50</span>);<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">50</span>);<br><span class="hljs-comment">//给第一条线描边</span><br>ctx.<span class="hljs-title function_">stroke</span>()<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">    第一条线 宽度4px  颜色 红色</span><br><span class="hljs-comment">    第二条线 宽度6px 颜色 蓝色</span><br><span class="hljs-comment">    第三条线 宽度2px 颜色 黄色</span><br><span class="hljs-comment">    当你想让要两条线不一样样式的时候，你需要在画第二条线的时候，告诉canvs 我是从新开启的一条线，和之前的没有关系，不然的话，颜色和宽度会根据上下文进行继承</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    开启新的一条线，在moveTo 之前告诉canvas  </span><br><span class="hljs-comment">    语法：ctx.beginPath()</span><br><span class="hljs-comment">    注意：</span><br><span class="hljs-comment">    开启新的线以后，如果你不单独设置样式，依旧会继承上面设置的过的样式，但是你一旦设置了样式以后，只会影响这条线以后的内容，不会影响之前的内容</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//绘制第二条线</span><br>ctx.<span class="hljs-title function_">beginPath</span>();<br><span class="hljs-comment">//设置新的线的宽度，颜色 样式</span><br>ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">6</span>;<br>ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;blue&#x27;</span>;<br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>);<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);<br><span class="hljs-comment">//描边之前绘制颜色</span><br>       <br>ctx.<span class="hljs-title function_">stroke</span>();<br><br><span class="hljs-comment">//绘制第3条线</span><br><span class="hljs-comment">//开启一条新的线</span><br>ctx.<span class="hljs-title function_">beginPath</span>();<br><span class="hljs-comment">//设置新的线的宽度，颜色 样式</span><br>ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">2</span>;<br>ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;yellow&#x27;</span>;<br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>,<span class="hljs-number">120</span>);<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">120</span>);<br><span class="hljs-comment">//描边之前绘制颜色</span><br>       <br>ctx.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><ul><li>canvas 绘制三角形.</li></ul><p>​            - 从起点连贯书写三条线，最终还是要回到起点</p><p>​            闭合图形：</p><p>​            1 手动闭合：</p><p>​               自己书写所有的线段，回到起点</p><p>​                真的是一个三角形？是，但是闭合点缺一个角</p><p>​            2 自动闭合</p><p>​                依靠canvas工具箱来帮我们闭合,会自动把闭合点的角补齐</p><p>​                语法：ctx.closePath();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>  <span class="hljs-comment">//生成一个canvas工具箱</span><br>  <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>  <br>  ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span>;<br>  ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">5</span>;<br><br>  ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">50</span>,<span class="hljs-number">10</span>);<br><br>  ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">10</span>);<br>  ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>)<br>  <span class="hljs-comment">//闭合三角形 回到起点  会有缺口（可以再走回去）</span><br>  <span class="hljs-comment">// ctx.lineTo(50,10)</span><br>  <span class="hljs-comment">// ctx.lineTo(200,10);</span><br><br>  <span class="hljs-comment">//自动闭合（闭合处没有缺口）</span><br>  ctx.<span class="hljs-title function_">closePath</span>()<br><br> <br>  ctx.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><p>​3 可以依靠填充的方式进行补齐</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>    <span class="hljs-comment">//生成一个canvas工具箱</span><br>    <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span>;<br>    ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">5</span>;<br><span class="hljs-comment">//把笔移到起点</span><br>    ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">50</span>,<span class="hljs-number">10</span>);<br> <span class="hljs-comment">//绘制第一条直角边</span><br>    ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">10</span>);<br><span class="hljs-comment">//绘制第二条直角边</span><br>    ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>)   <br>    <span class="hljs-comment">// ctx.stroke();</span><br><span class="hljs-comment">//进行填充</span><br>    ctx.<span class="hljs-title function_">fill</span>()<br></code></pre></td></tr></table></figure><p>注意：描边和填充可以一起使用</p><p>描边有描边的规则</p><p>​strokeStyle 设置描边的颜色</p><p>填充有填充的规则</p><p>​fillStyle 设置填充的颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>    <span class="hljs-comment">//生成一个canvas工具箱</span><br>    <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>    <span class="hljs-comment">//设置描边的规则 描边的颜色</span><br>    ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span>;<br>    ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">20</span>;<br><br>    ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">50</span>,<span class="hljs-number">10</span>);<br><br>    ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">10</span>);<br>    ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>)<br>    <span class="hljs-comment">//闭合三角形 回到起点  会有缺口（可以再走回去）</span><br>    <span class="hljs-comment">// ctx.lineTo(50,10)</span><br>    <span class="hljs-comment">// ctx.lineTo(200,10);</span><br><br>    <span class="hljs-comment">// 自动闭合（闭合处没有缺口）</span><br>    ctx.<span class="hljs-title function_">closePath</span>()<br>    ctx.<span class="hljs-title function_">stroke</span>();<br><br>    <span class="hljs-comment">//  填充的规则 设置填充的颜色</span><br>    ctx.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&#x27;blue&#x27;</span><br>    ctx.<span class="hljs-title function_">fill</span>()<br></code></pre></td></tr></table></figure><ul><li><p>在画布的中间绘制一个填充回字形，回字在画布的中心</p><ul><li><p>找到画布的中心 ，需要拿到画布的宽度和高度，在工具箱中获取</p><p>语法：ctx.canvas.width    ctx.canvas.height</p></li><li><p>非零填充规则（和面没有关系是                                    线条合成的闭合图形出现）</p><p>在任何一个你想要填充内容的位置，拉一条线到最外面（假装），在你拉的这一条线上，每一个路径都进行计算</p><p>顺时针的线  +1</p><p>逆时针的线 -1</p><p>最终得到的位置的数字不是0，那么这个位置填充，最终得到的数字是0，那么这个位置不填充</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取canvas元素</span><br>     <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>     <span class="hljs-comment">//生成一个canvas工具箱</span><br>     <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br>     <span class="hljs-comment">//获取画布的宽度和高度</span><br>     <span class="hljs-keyword">const</span> width=ctx.<span class="hljs-property">canvas</span>.<span class="hljs-property">width</span>;<br>     <span class="hljs-keyword">const</span> height=ctx.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>;<br><br>     <span class="hljs-comment">//确定中心点</span><br>     <span class="hljs-keyword">const</span> x=width/<span class="hljs-number">2</span>;<br>     <span class="hljs-keyword">const</span> y=height/<span class="hljs-number">2</span>;<br><br>     <span class="hljs-comment">//开始绘制大正方形 正方形 边长为200  </span><br>     <span class="hljs-comment">//大正方形为顺时针</span><br>     ctx.<span class="hljs-title function_">moveTo</span>(x-(<span class="hljs-number">200</span>/<span class="hljs-number">2</span>),y-(<span class="hljs-number">200</span>/<span class="hljs-number">2</span>))<br>     ctx.<span class="hljs-title function_">lineTo</span>(x+(<span class="hljs-number">200</span>/<span class="hljs-number">2</span>),y-(<span class="hljs-number">200</span>/<span class="hljs-number">2</span>))<br>     ctx.<span class="hljs-title function_">lineTo</span>(x+(<span class="hljs-number">200</span>/<span class="hljs-number">2</span>),y+(<span class="hljs-number">200</span>/<span class="hljs-number">2</span>))<br>     ctx.<span class="hljs-title function_">lineTo</span>(x-(<span class="hljs-number">200</span>/<span class="hljs-number">2</span>),y+(<span class="hljs-number">200</span>/<span class="hljs-number">2</span>))<br>     ctx.<span class="hljs-title function_">closePath</span>();<span class="hljs-comment">//闭合大正方形</span><br><br>     <span class="hljs-comment">//开始绘制小正方形 正方形 边长为100</span><br>     <span class="hljs-comment">//小正方形为顺时针   此时填充 整个大正方形都被填充了</span><br>     <span class="hljs-comment">// ctx.moveTo(x-(100/2),y-(100/2))</span><br>     <span class="hljs-comment">// ctx.lineTo(x+(100/2),y-(100/2))</span><br>     <span class="hljs-comment">// ctx.lineTo(x+(100/2),y+(100/2))</span><br>     <span class="hljs-comment">// ctx.lineTo(x-(100/2),y+(100/2))</span><br>     <span class="hljs-comment">// ctx.closePath();//闭合小正方形</span><br><br><br>     <span class="hljs-comment">//开始绘制小正方形 正方形 边长为100</span><br>     <span class="hljs-comment">//小正方形为逆时针   此时填充 </span><br>     ctx.<span class="hljs-title function_">moveTo</span>(x-(<span class="hljs-number">100</span>/<span class="hljs-number">2</span>),y-(<span class="hljs-number">100</span>/<span class="hljs-number">2</span>))<br>     ctx.<span class="hljs-title function_">lineTo</span>(x-(<span class="hljs-number">100</span>/<span class="hljs-number">2</span>),y+(<span class="hljs-number">100</span>/<span class="hljs-number">2</span>))<br>     ctx.<span class="hljs-title function_">lineTo</span>(x+(<span class="hljs-number">100</span>/<span class="hljs-number">2</span>),y+(<span class="hljs-number">100</span>/<span class="hljs-number">2</span>))<br>     ctx.<span class="hljs-title function_">lineTo</span>(x+(<span class="hljs-number">100</span>/<span class="hljs-number">2</span>),y-(<span class="hljs-number">100</span>/<span class="hljs-number">2</span>))<br>     ctx.<span class="hljs-title function_">closePath</span>();<span class="hljs-comment">//闭合小正方形</span><br><br><br>题：<br>       <br>     ctx.<span class="hljs-title function_">moveTo</span>(x,y)<br>     ctx.<span class="hljs-title function_">lineTo</span>(x+<span class="hljs-number">80</span>,y)<br>     ctx.<span class="hljs-title function_">lineTo</span>(x+<span class="hljs-number">80</span>,y+<span class="hljs-number">80</span>)<br>     ctx.<span class="hljs-title function_">lineTo</span>(x,y+<span class="hljs-number">80</span>)<br>     ctx.<span class="hljs-title function_">closePath</span>();<br><br><br><br>     <span class="hljs-comment">//设置描边的规则 描边的颜色</span><br>     ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span>;<br>     ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">2</span>;<br><br>    ctx.<span class="hljs-title function_">stroke</span>()<br>    ctx.<span class="hljs-title function_">fill</span>()<br></code></pre></td></tr></table></figure><p>![截屏2021-11-29 下午8.14.04](&#x2F;Users&#x2F;wei&#x2F;Desktop&#x2F;markdown&#x2F;js备课&#x2F;img&#x2F;截屏2021-11-29 下午8.14.04.png)</p><ul><li>canvas 线两端的样式</li></ul><p>一个属性可以直接设置两端多出来的一些样式</p><p>语法：ctx.lineCap&#x3D;’值’</p><p>作用：设置线段两端多出来的小帽子</p><p>可选值：</p><p>​默认值  butt 没有小帽子</p><p>​round 两端带一个圆帽子 (比不带帽子多出来一截)                                                                          </p><p>​square 两端带一个方帽子.  (比不带帽子多出来一截)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取canvas元素</span><br><span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br><span class="hljs-comment">//生成一个canvas工具箱</span><br><span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br><span class="hljs-comment">//绘制第一条线</span><br>ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">10</span>;<br>ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span><br><span class="hljs-comment">//没有帽子 </span><br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>);<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">50</span>)<br>ctx.<span class="hljs-title function_">stroke</span>();<br><br><span class="hljs-comment">//绘制第2条线</span><br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;blue&#x27;</span><br>ctx.<span class="hljs-property">lineCap</span>=<span class="hljs-string">&#x27;round&#x27;</span>;<span class="hljs-comment">//圆帽子</span><br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">50</span>,<span class="hljs-number">100</span>);<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>)<br>ctx.<span class="hljs-title function_">stroke</span>();<br><br> <span class="hljs-comment">//绘制第3条线</span><br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;yellow&#x27;</span><br>ctx.<span class="hljs-property">lineCap</span>=<span class="hljs-string">&#x27;square&#x27;</span>;<span class="hljs-comment">// 方帽子</span><br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">50</span>,<span class="hljs-number">150</span>);<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">150</span>)<br>ctx.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><ul><li><p>canvas线段的拐点的样式（线段拐弯时的样式）使用不多</p><p>语法：ctx.lineJoin&#x3D;’值’；</p><p>取值： ‘miter’  默认值，按照线段规则拐点   直角 钝角。。。</p><p>​ ‘round’ 表示圆弧拐点</p><p>​‘bevel’ 表示平角拐点</p><p>案例：线折线创建出拐点，再设置样式</p></li><li><p>canvas 绘制虚线</p><ul><li>绘制虚线需要在绘制之前，把线的样式设置为虚线</li></ul></li></ul><p>语法：ctx.setLineDash()</p><p>参数：一个数组，里面的每一个数字，用来描述一段内容，实线位置和空白位置都需要描述</p><p>按照你数组里面书写的内容进行重复</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取canvas元素</span><br><span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br><span class="hljs-comment">//生成一个canvas工具箱</span><br><span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br><span class="hljs-comment">//绘制第一条线</span><br>ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">10</span>;<br>ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span><br>ctx.<span class="hljs-title function_">setLineDash</span>([<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>])<br>    <br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>);<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">50</span>)<br>ctx.<span class="hljs-title function_">stroke</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ctx.<span class="hljs-title function_">getLineDash</span>());<span class="hljs-comment">//[5, 10, 10, 5, 10, 10]</span><br></code></pre></td></tr></table></figure><p>​-  拿到虚线段信息</p><p>语法：ctx.getLineDash();</p><p>返回值：一个数组，里面记录了一段不重复的线段</p><p>实线 和 空白交替拿到</p><p>案例1：（线也可以使用渐变方案了，这个案例可以不用做了）</p><p>使用canvas绘制一条渐变的线。 需求：长度255px，颜色变化 白色～红色</p><p>使用循环来绘制255个1px的线段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取canvas元素</span><br>    <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>    <span class="hljs-comment">//生成一个canvas工具箱</span><br>    <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br>    <span class="hljs-comment">// //绘制第一条线</span><br>    ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">10</span>;     <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)&#123;<br>        ctx.<span class="hljs-title function_">beginPath</span>()  <br>        ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">50</span>+i,<span class="hljs-number">50</span>);<br>        ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">50</span>+i+<span class="hljs-number">1</span>,<span class="hljs-number">50</span>)<br>        ctx.<span class="hljs-title function_">stroke</span>();<br>        ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">`rgb(255,<span class="hljs-subst">$&#123;<span class="hljs-number">255</span>-i&#125;</span>,<span class="hljs-subst">$&#123;<span class="hljs-number">255</span>-i&#125;</span>)`</span><br>        ctx.<span class="hljs-title function_">stroke</span>()<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h5><p> 绘制矩形的原理，给一个起点坐标，加上矩形的宽高</p><ul><li>语法：ctx.rect(startX,startY,width,height)；  只是绘制路径需要单独填充或描边</li></ul><p>startX : 矩形起点的x轴坐标</p><p>startY： 矩形起点的Y轴坐标</p><p>width：矩形的宽度</p><p>height：矩形的高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取canvas元素</span><br><span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br><span class="hljs-comment">//生成一个canvas工具箱</span><br><span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br><span class="hljs-comment">//绘制矩形</span><br>ctx.<span class="hljs-title function_">rect</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>,<span class="hljs-number">90</span>);<br><span class="hljs-comment">//描边</span><br>ctx.<span class="hljs-title function_">stroke</span>()<br>ctx.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&#x27;skyblue&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br></code></pre></td></tr></table></figure><ul><li><p>直接绘制描边矩形</p><p>语法：ctx.strokeRect(startX,startY,width,height)</p></li><li><p>直接绘制一个填充矩形</p></li></ul><p>  语法：ctx.fillRect(startX,startY,width,height)</p><p>需求：绘制两个矩形，一个红色一个蓝色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-comment">//获取canvas元素</span><br>       <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>       <span class="hljs-comment">//生成一个canvas工具箱</span><br>       <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br>      <span class="hljs-comment">//两个描边矩形，一个红色一个蓝色</span><br><span class="hljs-comment">//绘制描边矩形和填充矩形都不需要开启一个新的路径，因为我们不是根据路径闭合出现的矩形，而是直接出现的矩形</span><br>       ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span><br>       ctx.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-number">10</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>)<br><br>       ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&#x27;blue&#x27;</span><br>       ctx.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-number">130</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>)<br><br><br>       <span class="hljs-comment">//两个填充矩形，一个红色一个蓝色</span><br>       ctx.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span><br>       ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>,<span class="hljs-number">110</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>)<br><br>       ctx.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&#x27;blue&#x27;</span><br>       ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">300</span>,<span class="hljs-number">110</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>)<br><br><span class="hljs-comment">//清空矩形</span><br>       ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">20</span>,<span class="hljs-number">60</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><ul><li><p>清除画布</p><ul><li>绘制清空矩形.</li></ul><p>​     语法：ctx.clearRect(startX,startY,width,height))</p><p>​      把一块矩形位置内的东西清空 ctx.clearRect(20,60,100,200)</p><ul><li><p>重置canvas标签的宽和高</p><p>canvas.width&#x3D;1000;</p><p>canvas.height&#x3D;1000;</p><p>重新画东西</p><p>ctx.fillRect(150,150,100,100);</p><p>这种方式清除后，样式也被重置</p></li></ul></li></ul><h5 id="canvas-绘制填充渐变方案"><a href="#canvas-绘制填充渐变方案" class="headerlink" title="canvas 绘制填充渐变方案"></a>canvas 绘制填充渐变方案</h5><p> 渐变需要的要素：方向 ，开始颜色 ，结束颜色，距离</p><p>fill填充 stroke 描边都可以使用渐变方案</p><p>步骤：</p><p>1 确定渐变方案</p><p>2 把你的渐变方案赋值给fillStyle 或者 strokeStyle</p><p>3 再形状填充时使用fillStyle 或者 strokeStyle 进行填充</p><p>注意:渐变方案和形状没有关系，方案就是根据画布来计算得尺寸</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js">      <span class="hljs-comment">//获取canvas元素</span><br>        <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>        <span class="hljs-comment">//生成一个canvas工具箱</span><br>        <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br>        <span class="hljs-comment">/* </span><br><span class="hljs-comment">            确定渐变方案</span><br><span class="hljs-comment">            语法：</span><br><span class="hljs-comment">             ctx.createLinearGradient(startX,stratY,endX,endY)</span><br><span class="hljs-comment">             确定好了渐变的方向和距离</span><br><span class="hljs-comment">            语法：添加渐变的颜色</span><br><span class="hljs-comment">                渐变方案.addColorStop(数字,颜色)；</span><br><span class="hljs-comment">                数字： 0～1    0表示 开始  1表示 结束</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-keyword">const</span> linearGradient=ctx.<span class="hljs-title function_">createLinearGradient</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">200</span>,<span class="hljs-number">50</span>);<br>        linearGradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;red&#x27;</span>);<br>      linearGradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.5</span>,<span class="hljs-string">&#x27;pink&#x27;</span>);<br>        linearGradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;blue&#x27;</span>);<br><br>        <span class="hljs-comment">//2 给填充赋值  渐变方案时可以直接赋值使用的</span><br>        ctx.<span class="hljs-property">fillStyle</span>=linearGradient;<br>        <span class="hljs-comment">//3 绘制一个填充矩形</span><br>        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">//绘制一个小的矩形 矩形小了但是不会影响渐变方案，矩形的填充只是渐变方案的一部分</span><br>        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>,<span class="hljs-number">160</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>);<br><br>        <span class="hljs-comment">//把渐变方案设置给描边样式</span><br>        ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">250</span>);<br>        ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">300</span>,<span class="hljs-number">250</span>);<br>        ctx.<span class="hljs-property">strokeStyle</span>=linearGradient;<br>        ctx.<span class="hljs-property">lineWidth</span>=<span class="hljs-number">5</span>;<br>        ctx.<span class="hljs-title function_">stroke</span>()<br><br><span class="hljs-comment">//通过修改渐变方案，修改渐变的方向。。。</span><br></code></pre></td></tr></table></figure><p>![canvas 渐变](&#x2F;Users&#x2F;wei&#x2F;Desktop&#x2F;markdown&#x2F;js备课&#x2F;img&#x2F;canvas 渐变.png)</p><h5 id="canvas绘制文字"><a href="#canvas绘制文字" class="headerlink" title="canvas绘制文字"></a>canvas绘制文字</h5><p>你自己准备好文字，让他给你描上去 或者 填充上去</p><p>绘制文字的两个语法：</p><ul><li><p>ctx.strokeText(text,x,y)</p><p>text 你要绘制的文本内容</p><p>x 绘制文本的起点 X坐标</p><p>y 绘制文本的起点 Y坐标</p></li><li><p>ctx.fillText(text,x,y)</p><p>text 你要绘制的文本内容</p><p>x 绘制文本的起点x 坐标</p><p>Y 绘制文本的起点y 坐标</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取canvas元素</span><br>  <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>  canvas.<span class="hljs-property">width</span>=<span class="hljs-number">600</span>;<br>  canvas.<span class="hljs-property">height</span>=<span class="hljs-number">800</span>;<br>  <span class="hljs-comment">//生成一个canvas工具箱</span><br>  <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>    <br>     <span class="hljs-comment">/* </span><br><span class="hljs-comment">  调整文字样式</span><br><span class="hljs-comment">  - 大小字体</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  - 左右对齐</span><br><span class="hljs-comment">  - 上下对齐</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  */</span><br>  ctx.<span class="hljs-property">font</span>=<span class="hljs-string">&#x27;30px 宋体&#x27;</span><br>  <span class="hljs-comment">//ctx.font=&#x27;30px 微软雅黑&#x27;</span><br>  <span class="hljs-comment">//-----文字</span><br>  <span class="hljs-keyword">const</span> text=<span class="hljs-string">&#x27;你好吗hello word&#x27;</span>;<br>   <span class="hljs-comment">/* </span><br><span class="hljs-comment">      获取文本的宽度</span><br><span class="hljs-comment">      ctx.measureText(文本内容)</span><br><span class="hljs-comment">      返回值：一个对象，包含文本的宽度</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  */</span><br> <br>  <span class="hljs-keyword">const</span> width=ctx.<span class="hljs-title function_">measureText</span>(text).<span class="hljs-property">width</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(width)<br>  <span class="hljs-comment">//配置一个渐变方案 上面获取到文字的宽度后再设置渐变方案的时候结束坐标使用开始坐标+文字宽度</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">LinearGradient</span>=ctx.<span class="hljs-title function_">createLinearGradient</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>+width,<span class="hljs-number">100</span>)<br>  <span class="hljs-title class_">LinearGradient</span>.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;red&#x27;</span>);<br>  <span class="hljs-title class_">LinearGradient</span>.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.25</span>,<span class="hljs-string">&#x27;orange&#x27;</span>);<br>  <span class="hljs-title class_">LinearGradient</span>.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.5</span>,<span class="hljs-string">&#x27;yellow&#x27;</span>);<br>  <span class="hljs-title class_">LinearGradient</span>.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.75</span>,<span class="hljs-string">&#x27;green&#x27;</span>);<br>  <span class="hljs-title class_">LinearGradient</span>.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;blue&#x27;</span>);<br>  <span class="hljs-comment">//设置描边颜色</span><br>  ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-title class_">LinearGradient</span>;<br>  <span class="hljs-comment">//设置填充颜色</span><br>  ctx.<span class="hljs-property">fillStyle</span>=<span class="hljs-title class_">LinearGradient</span>;<br>  ctx.<span class="hljs-title function_">fillText</span>(text,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br>  ctx.<span class="hljs-title function_">strokeText</span>(text,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>)<br>  <span class="hljs-comment">//设置矩形 宽400 高 100  目的是看渐变的范围</span><br>  ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>,<span class="hljs-number">300</span>,width,<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>![canvas 文字](&#x2F;Users&#x2F;wei&#x2F;Desktop&#x2F;markdown&#x2F;js备课&#x2F;img&#x2F;canvas 文字.png)</p><h5 id="canvas绘制曲线"><a href="#canvas绘制曲线" class="headerlink" title="canvas绘制曲线"></a>canvas绘制曲线</h5><p>就是由若干个1px的点组成</p><ul><li>圆</li></ul><p>圆形 和半径</p><ul><li><p>弧长</p><p>点在周长上行走的距离</p></li><li><p>弧度 rad（和度一样是衡量角大小的单位）</p><p>当弧长&#x3D;r半径的时候，表示一个弧度</p><p>圆周长是2πr  ；一弧度是r，一周是2π 弧度</p></li><li><p>角度deg和弧度 rad</p><p>1度是多少弧度</p><p>因为1度就是360分之一，1度的弧度 2π(1&#x2F;360)，得到1度就是π&#x2F;180 弧度</p><p><strong>注意：</strong>需要多大的扇形的弧度：角度*  π&#x2F;180</p></li></ul><p><img src="/smiling-sheep.github.io/Users/wei/Desktop/markdown/js%E5%A4%87%E8%AF%BE/img/%E5%BC%A7%E5%BA%A6.png" alt="弧度"></p><ul><li><p>canvas画一个60弧线</p><ol><li><p>确定圆心位置</p></li><li><p>生成弧线路径</p><p>语法：ctx.arc(circleX,circleY,radius,startArc,endArc);</p><ul><li><p>circleX 表示弧线的圆心 X轴坐标</p></li><li><p>circleY 表示弧线的圆心 Y轴坐标</p></li><li><p>radius 表示弧线的圆形半径</p></li><li><p>startArc 表示起点弧度</p></li><li><p>endArc 表示终点弧度</p></li><li><p>direction 表示弧线的方向</p><p>默认是 false 表示顺时针</p><p>​            true  表示逆时针</p></li></ul></li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        body&#123;<br>            margin: 0;<br>            padding: 0;<br>        &#125;<br><br>        canvas&#123;<br>            box-sizing: border-box;<br>            border:1px solid #ddd;<br>            /* width:600px;<br>            height:300px; */<br>           <br>        &#125;<br>        /* 画两条轴线 标一下弧的圆心 */<br>        .ver&#123;<br>            position: absolute;<br>            top:150px;<br>            left: 0;<br>            display: block;<br>            width: 1000px;<br>            height: 1px;<br>            background-color: red;<br>        &#125;<br>        .sp&#123;<br>            position: absolute;<br>            top:0px;<br>            left: 300px;<br>            display: block;<br>            width: 1px;<br>            height: 1000px;<br>            background-color: red;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;span class=&quot;ver&quot;&gt;&lt;/span&gt;<br>    &lt;span class=&quot;sp&quot;&gt;&lt;/span&gt; <br>    &lt;canvas width=&quot;600&quot; height=&quot;300&quot;&gt;<br>      <br>    &lt;/canvas&gt;<br>    &lt;script&gt;<br>        //获取canvas元素<br>        var canvas=document.querySelector(&#x27;canvas&#x27;);<br>        // canvas.width=600;<br>        // canvas.height=300;<br>        //生成一个canvas工具箱<br>        const ctx=canvas.getContext(&#x27;2d&#x27;);<br>        //确定圆心位置  <br>        const width=ctx.canvas.width;<br>        const height=ctx.canvas.height;<br>        const x=width/2;<br>        const y=height/2;<br>        //确定圆的半径<br>        const r=100;<br>        //确定起点和终点的弧度<br>        const startArc=0;<br>        const endArc=60*(Math.PI/180);<br><br>        //2------------ 想要画扇形 先将笔起点定位在圆心的位置<br>        ctx.moveTo(x,y)<br><br>        //开始画弧线路径  60度顺时针弧<br>        ctx.arc(x,y,r,startArc,endArc)<br>        //60度逆时针弧<br>        // ctx.arc(x,y,r,startArc,endArc,true)<br>        //描边<br>        //2------------想要画一个扇形，直接这样自动闭合是不行的<br>        //要先将笔的起点定位在圆形的位置<br>        ctx.closePath()<br>        ctx.stroke();<br>        //填充<br>        ctx.fill();<br></code></pre></td></tr></table></figure><p>![canvas 扇形](&#x2F;Users&#x2F;wei&#x2F;Desktop&#x2F;markdown&#x2F;js备课&#x2F;img&#x2F;canvas 扇形.png)</p><p>​                                                                                                                                                                                                                              案例：绘制多个扇形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 绘制多个扇形  </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">10</span>; i++)&#123;<br>  ctx.<span class="hljs-title function_">beginPath</span>();<br>  <span class="hljs-comment">// 圆心位置</span><br>  ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>+i*<span class="hljs-number">110</span>,<span class="hljs-number">100</span>);<br>  ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;red&#x27;</span>;<br>  ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">0</span>+i*<span class="hljs-number">110</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>/<span class="hljs-number">10</span>*i);<br>  ctx.<span class="hljs-title function_">fill</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="绘制椭圆？？"><a href="#绘制椭圆？？" class="headerlink" title="绘制椭圆？？"></a>绘制椭圆？？</h5><blockquote><p>ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise)是后来添加的，</p><p>参数的意思：(起点x.起点y,半径x,半径y,旋转的角度，起始角，结果角，顺时针还是逆时针)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">var</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>canvas.<span class="hljs-property">height</span> = <span class="hljs-number">800</span>;<br><span class="hljs-keyword">if</span>(ctx.<span class="hljs-property">ellipse</span>)&#123;<br>  <span class="hljs-comment">// ctx.ellipse(400,400,300,200,0,0,Math.PI*2); 后来添加的方法</span><br>  <span class="hljs-comment">// ctx.ellipse(起点x.起点y,半径x,半径y,旋转的角度，起始角，结果角，顺时针还是逆时针)</span><br>  ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>,<span class="hljs-number">300</span>,<span class="hljs-number">200</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>*<span class="hljs-number">2</span>);<br>  ctx.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&quot;#058&quot;</span>;<br>  ctx.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&quot;#000&quot;</span>;<br>  ctx.<span class="hljs-title function_">fill</span>();<br>  ctx.<span class="hljs-title function_">stroke</span>();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;no ellipse!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="二次贝塞尔曲线"><a href="#二次贝塞尔曲线" class="headerlink" title="二次贝塞尔曲线"></a>二次贝塞尔曲线</h5><blockquote><p>quadraticCurveTo(cpx, cpy, x, y)</p><p>cpx 和 cpy 确定控制点坐标</p><p>x 和 y 确定目标点坐标</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1, 获取 canvas标签</span><br><span class="hljs-keyword">var</span> firCan = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;firCan&quot;</span>);<br><span class="hljs-comment">// 2, 获取 2D渲染上下文</span><br><span class="hljs-keyword">var</span> context = firCan.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><span class="hljs-comment">// 3, 绘制二次贝塞尔曲线</span><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br><span class="hljs-comment">// 4. 绘制位置</span><br>context.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">500</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>context.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><h5 id="三次被塞尔曲线"><a href="#三次被塞尔曲线" class="headerlink" title="三次被塞尔曲线"></a>三次被塞尔曲线</h5><blockquote><p>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</p><p>cp1x 和 cp1y 确定第一个控制点坐标</p><p>cp2x 和 cp2y 确定第二个控制点坐标</p><p>x 和 y 确定目标点坐标</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1, 获取 canvas标签</span><br><span class="hljs-keyword">var</span> firCan = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;Canvas&quot;</span>);<br><br><span class="hljs-comment">// 2, 获取 2D渲染上下文</span><br><span class="hljs-keyword">var</span> context = firCan.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><br><span class="hljs-comment">// 3, 绘制三次贝塞尔曲线</span><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">500</span>, <span class="hljs-number">10</span>);<br><br><span class="hljs-comment">// 4. 开始绘制</span><br>context.<span class="hljs-title function_">bezierCurveTo</span>(<span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">800</span>, <span class="hljs-number">350</span>, <span class="hljs-number">500</span>, <span class="hljs-number">490</span>);<br>context.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><h5 id="状态的保存和恢复"><a href="#状态的保存和恢复" class="headerlink" title="状态的保存和恢复"></a>状态的保存和恢复</h5><p><code>save()</code> 和 <code>restore()</code>是绘制复杂图形时必不可少的操作。</p><ol><li><p><code>save</code> 和 <code>restore</code> 方法是用来保存和恢复 <code>canvas</code> 状态的，都没有参数。</p></li><li><p><code>Canvas</code> 的状态就是当前画面应用的所有样式和变形的一个快照。</p></li><li><p>1、关于 save() ：Canvas状态存储在栈中，每当save()方法被调用后，当前的状态就被推送到栈中保存。</p></li><li><p>一个绘画状态包括：</p><ul><li><p>当前应用的变形（即移动，旋转和缩放）</p></li><li><p><code>strokeStyle</code>, <code>fillStyle</code>, <code>globalAlpha</code>, <code>lineWidth</code>, <code>lineCap</code>, <code>lineJoin</code>, <code>miterLimit</code>, <code>shadowOffsetX</code>, <code>shadowOffsetY</code>, <code>shadowBlur</code>, <code>shadowColor</code>, <code>globalCompositeOperation 的值</code></p></li><li><p>当前的裁切路径（<code>clipping path</code>）</p><p>可以调用任意多次 <code>save</code>方法(类似数组的 <code>push()</code>)。</p></li></ul></li><li><p><strong>可以调用任意多次 <code>save</code>方法</strong>(类似数组的<code>push()</code>)。</p></li><li><p>2、关于restore()：每一次调用 restore 方法，上一个保存的状态就从栈中弹出，所有设定都恢复(类似数组的 <code>pop()</code>)。</p></li><li><p>&#96;&#96;&#96;html</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title>    <style>        canvas {            border: 1px solid red;        }    </style></head><body>    <canvas></canvas>    <script>        //         var canvas = document.querySelector('canvas');        canvas.width = 500;        canvas.height = 500;        var ctx = canvas.getContext('2d');<pre><code class="hljs">    ctx.fillRect(0, 0, 150, 150);   // 使用默认设置绘制一个矩形    ctx.save();                  // 保存默认状态  黑色    ctx.fillStyle = &#39;red&#39;       // 在原有配置基础上对颜色做改变    ctx.fillRect(15, 15, 120, 120); // 使用新的设置绘制一个矩形    ctx.save();                  // 保存当前状态  红色    ctx.fillStyle = &#39;#FFF&#39;       // 再次改变颜色配置    ctx.fillRect(30, 30, 90, 90);   // 使用新的配置绘制一个矩形    ctx.restore();               // 重新加载之前的颜色状态 将红色调出    ctx.fillRect(45, 45, 60, 60);   // 使用上一次的配置绘制一个矩形    ctx.restore();               // 加载默认颜色配置 将黑色调出    ctx.fillRect(60, 60, 30, 30);   // 使用加载的配置绘制一个矩形&lt;/script&gt;</code></pre></body></html><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><br>   <br><br>https://www.runoob.com/w3cnote/html5-canvas-intro.html<br><br><br><br>我们使用变形一定要先备份save()，变形后再恢复备份的状态<br><br><br><br>#### 2D效果<br><br>##### 平移<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">平移: <span class="hljs-title function_">translate</span>(x, y)</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">x 水平方向平移的值</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">y 垂直方向平移的值</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">可以使用正值，也可以使用负值，右下角为正，左上角为负</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">注意：<span class="hljs-string">`translate`</span> 移动的是 <span class="hljs-string">`canvas`</span> 的坐标原点(坐标变换)。, 因此, 发生平移之后, 将影响接下所有的图形绘制.</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1.</span> ![](<span class="hljs-attr">https</span>:<span class="hljs-comment">//www.runoob.com/wp-content/uploads/2018/12/829832336-5b74dd8e3ad9a_articlex.png)</span></span><br><br>```js<br>// 1, 获取Canvas<br>var firCan = document.getElementById(&quot;firCan&quot;);<br>// 2, 获取 2d渲染上下文<br>var context = firCan.getContext(&#x27;2d&#x27;);<br>// 3, 绘制矩形<br>context.fillStyle = &#x27;red&#x27;;<br>context.fillRect(100, 100, 150, 150);<br>context.translate(500, 0);<br>// ctx.fillStyle=&#x27;green&#x27;;<br>context.fillRect(100, 100, 200, 100);<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">canvas</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script&gt;</span><br><span class="hljs-comment">        // </span><br><span class="hljs-comment">        var canvas = document.querySelector(&#x27;canvas&#x27;);</span><br><span class="hljs-comment">        canvas.width = 500;</span><br><span class="hljs-comment">        canvas.height = 500;</span><br><span class="hljs-comment">        var ctx = canvas.getContext(&#x27;2d&#x27;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ctx.fillRect(0, 0, 150, 150);   // 使用默认设置绘制一个矩形</span><br><span class="hljs-comment">        ctx.save();                  // 保存默认状态  黑色</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ctx.fillStyle = &#x27;red&#x27;       // 在原有配置基础上对颜色做改变</span><br><span class="hljs-comment">        ctx.fillRect(15, 15, 120, 120); // 使用新的设置绘制一个矩形</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ctx.save();                  // 保存当前状态  红色</span><br><span class="hljs-comment">        ctx.fillStyle = &#x27;#FFF&#x27;       // 再次改变颜色配置</span><br><span class="hljs-comment">        ctx.fillRect(30, 30, 90, 90);   // 使用新的配置绘制一个矩形</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ctx.restore();               // 重新加载之前的颜色状态 将红色调出</span><br><span class="hljs-comment">        ctx.fillRect(45, 45, 60, 60);   // 使用上一次的配置绘制一个矩形</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ctx.restore();               // 加载默认颜色配置 将黑色调出</span><br><span class="hljs-comment">        ctx.fillRect(60, 60, 30, 30);   // 使用加载的配置绘制一个矩形</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &lt;/script&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// </span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);</span><br><span class="language-javascript">        canvas.<span class="hljs-property">width</span> = <span class="hljs-number">500</span>;</span><br><span class="language-javascript">        canvas.<span class="hljs-property">height</span> = <span class="hljs-number">500</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">save</span>();<span class="hljs-comment">//保存最初的状态 原心在0 0</span></span><br><span class="language-javascript">        <span class="hljs-comment">// canvas 原心位移到100 100 </span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">translate</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;blue&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用默认设置绘制一个矩形</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">150</span>, <span class="hljs-number">150</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// ctx.restore();//调用之前保存的状态 恢复最初原心在0 0的状态</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 如果没有恢复之前的状态canvas 原心会位移到130 100 在上一次位移的基础上有增加了30</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">translate</span>(<span class="hljs-number">30</span>, <span class="hljs-number">200</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 设置填充颜色为红色</span></span><br><span class="language-javascript">        ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">150</span>, <span class="hljs-number">150</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html">//------------------位移动画案例<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">canvas</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);</span><br><span class="language-javascript">        canvas.<span class="hljs-property">width</span> = <span class="hljs-number">500</span>;</span><br><span class="language-javascript">        canvas.<span class="hljs-property">height</span> = <span class="hljs-number">500</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 保存最初状态</span></span><br><span class="language-javascript">        <span class="hljs-comment">// ctx.save()</span></span><br><span class="language-javascript">        <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 设置偏移</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">translate</span>(<span class="hljs-number">30</span>, <span class="hljs-number">0</span>)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)</span><br><span class="language-javascript">        &#125;, <span class="hljs-number">500</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3></li><li><p>&#96;&#96;&#96;<br>rotate(angle)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>3. <br><br>4. 旋转坐标轴。<br><br>5. <br><br>6. 这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。<br><br>7.  旋转的中心是坐标原点。<br><br>8. ![img](https://www.runoob.com/wp-content/uploads/2018/12/3322150878-5b74dd8e2b6a4_articlex.png)<br><br>旋转案例：<br><br>```html<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">canvas</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);</span><br><span class="language-javascript">        canvas.<span class="hljs-property">width</span> = <span class="hljs-number">500</span>;</span><br><span class="language-javascript">        canvas.<span class="hljs-property">height</span> = <span class="hljs-number">500</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 保存最初状态</span></span><br><span class="language-javascript">        <span class="hljs-comment">// ctx.save()</span></span><br><span class="language-javascript">        <span class="hljs-comment">//  位移 将 原心移动到 canvas的中心</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">translate</span>(canvas.<span class="hljs-property">width</span> / <span class="hljs-number">2</span>, canvas.<span class="hljs-property">width</span> / <span class="hljs-number">2</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 画一个 窄窄的矩形</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">5</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 保存最初状态</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">save</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 清除画布</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">restore</span>()</span><br><span class="language-javascript">            <span class="hljs-comment">// 将原心旋转 一定的角度</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">rotate</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> / <span class="hljs-number">180</span> * <span class="hljs-number">5</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 画一个矩形</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">5</span>)</span><br><span class="language-javascript">        &#125;, <span class="hljs-number">500</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h5><blockquote><p>缩放: scale(x, y)</p><p>x 水平方向缩放比例</p><p>y 垂直方向缩放比例</p><p>&lt;1 为缩小，&gt;1为放大</p><p>如果为负值, 坐标系会发生反转</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3, 绘制矩形</span><br>context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;red&#x27;</span>;<br>context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>context.<span class="hljs-title function_">scale</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>);<br>context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;green&#x27;</span>;<br>context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h5 id="将图片添加到canvas中"><a href="#将图片添加到canvas中" class="headerlink" title="将图片添加到canvas中"></a>将图片添加到canvas中</h5><blockquote><p>方法一：drawImage(img, x, y)</p><p>img 要绘制的图片</p><p>x 和 y 确定要绘制的位置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1, 获取Canvas</span><br><span class="hljs-keyword">var</span> firCan = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;firCan&quot;</span>);<br><span class="hljs-comment">// 2, 获取 2d渲染上下文</span><br><span class="hljs-keyword">var</span> context = firCan.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><span class="hljs-comment">// 3, 加载图片</span><br><span class="hljs-comment">// 创建 img对象</span><br><span class="hljs-keyword">var</span> imgObj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();  <span class="hljs-comment">//&lt;img /&gt;</span><br><span class="hljs-comment">// 设置 src</span><br>imgObj.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img/banner3.png&quot;</span>; <span class="hljs-comment">//&lt;img src = &#x27;123456&#x27;&gt;</span><br><span class="hljs-comment">// 图片加载完毕</span><br>imgObj.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 图片绘制到 canvas: drawImage()</span><br>context.<span class="hljs-title function_">drawImage</span>(imgObj, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>方法二：drawImage(img, x, y, w, h)</p><p>img 要绘制的图片</p><p>x 和 y 确定要绘制的位置</p><p>w 和 h 确定要绘制的大小</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">context.<span class="hljs-title function_">drawImage</span>(imgObj, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">500</span>);<br></code></pre></td></tr></table></figure><blockquote><p>方式三: drawImage(img, sx, sy, sw, sh, x, y, w, h)</p><p>img 要绘制的图片</p><p>sx和sy 要在图片上的截取位置</p><p>sw和sh 要截取的图片大小</p><p>x 和 y 要绘制在canvas上的位置</p><p>w 和 h 要在canvas上绘制的大小</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">context.<span class="hljs-title function_">drawImage</span>(imgObj, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-number">500</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>context.<span class="hljs-title function_">drawImage</span>(imgObj, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1280</span>, <span class="hljs-number">800</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">625</span>);<br></code></pre></td></tr></table></figure><h5 id="获取图片信息"><a href="#获取图片信息" class="headerlink" title="获取图片信息"></a>获取图片信息</h5><p>getImageData() 方法返回 ImageData 对象，该对象拷贝了画布指定矩形的像素数据。</p><p>语法       ctx.getImageData(<em>x,y,width,height</em>);</p><table><thead><tr><th><em>x</em></th><th>开始复制的左上角位置的 x 坐标（以像素计）。</th></tr></thead><tbody><tr><td><em>y</em></td><td>开始复制的左上角位置的 y 坐标（以像素计）。</td></tr><tr><td><em>width</em></td><td>要复制的矩形区域的宽度。</td></tr><tr><td><em>height</em></td><td>要复制的矩形区域的高度。</td></tr></tbody></table><p><strong>注意：</strong>ImageData 对象不是图像，它规定了画布上一个部分（矩形），并保存了该矩形内每个像素的信息。</p><p>对于 ImageData 对象中的每个像素，都存在着四方面的信息，即 RGBA 值：</p><p>R - 红色（0-255）<br>G - 绿色（0-255）<br>B - 蓝色（0-255）<br>A - alpha 通道（0-255; 0 是透明的，255 是完全可见的）</p><p>color&#x2F;alpha 信息以数组形式存在，并存储于 ImageData 对象的 <a href="https://www.runoob.com/tags/canvas-imagedata-data.html">data</a> 属性中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-comment">//获取canvas元素</span><br>    <span class="hljs-keyword">var</span> canvas=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br>    <span class="hljs-comment">// canvas.width=600;</span><br>    <span class="hljs-comment">// canvas.height=300;</span><br>    <span class="hljs-comment">//生成一个canvas工具箱</span><br>    <span class="hljs-keyword">const</span> ctx=canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><span class="hljs-comment">//画一个红色矩形</span><br>    ctx.<span class="hljs-property">fillStyle</span>=<span class="hljs-string">&#x27;red&#x27;</span><br>    ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//获取指定位置图片的信息</span><br>   <span class="hljs-keyword">const</span> imgData=ctx.<span class="hljs-title function_">getImageData</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">// console.log(ctx.getImageData(10,10,100,100).data)</span><br><br>    <span class="hljs-comment">//第一个像素的 rgba 信息</span><br>    <span class="hljs-keyword">var</span>  red=imgData.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">var</span> green=imgData.<span class="hljs-property">data</span>[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">var</span> blue=imgData.<span class="hljs-property">data</span>[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">var</span> alpha=imgData.<span class="hljs-property">data</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(red,green,blue,alpha)<br><br>    <span class="hljs-comment">//修改反转第一个像素的颜色，再使用putImageData() 方法将图像数据拷贝回画布上。</span><br>    imgData.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>];<br>    imgData.<span class="hljs-property">data</span>[<span class="hljs-number">1</span>]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[<span class="hljs-number">1</span>];<br>    imgData.<span class="hljs-property">data</span>[<span class="hljs-number">2</span>]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[<span class="hljs-number">2</span>];<br>    imgData.<span class="hljs-property">data</span>[<span class="hljs-number">3</span>]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[<span class="hljs-number">3</span>];<br><br>    <span class="hljs-comment">//使用putImageData() 方法将图像数据拷贝回画布上</span><br>    ctx.<span class="hljs-title function_">putImageData</span>(imgData,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment">//使用 getImageData() 来反转画布上的图像的每个像素的颜色</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;imgData.<span class="hljs-property">data</span>.<span class="hljs-property">length</span>;i+=<span class="hljs-number">4</span>)<br>      &#123;<br>        imgData.<span class="hljs-property">data</span>[i]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[i];<br>        imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">1</span>]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">1</span>];<br>        imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">2</span>]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">2</span>];<br>        imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">3</span>]=<span class="hljs-number">255</span>;<br>      &#125;<br>      ctx.<span class="hljs-title function_">putImageData</span>(imgData,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//使用 getImageData() 来反转画布上的图像的每个像素的颜色</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;imgData.<span class="hljs-property">data</span>.<span class="hljs-property">length</span>;i+=<span class="hljs-number">4</span>)<br>  &#123;<br>    imgData.<span class="hljs-property">data</span>[i]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[i];<br>    imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">1</span>]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">1</span>];<br>    imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">2</span>]=<span class="hljs-number">255</span>-imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">2</span>];<br>    imgData.<span class="hljs-property">data</span>[i+<span class="hljs-number">3</span>]=<span class="hljs-number">255</span>;<br>  &#125;<br>  ctx.<span class="hljs-title function_">putImageData</span>(imgData,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h4 id="图片的组合方式"><a href="#图片的组合方式" class="headerlink" title="图片的组合方式"></a>图片的组合方式</h4><h5 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h5><blockquote><p>全局阿尔法: globalAlpha (alpha 值的基数)</p><p>影响接下来绘制图形的透明度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">context.<span class="hljs-property">globalAlpha</span> = <span class="hljs-number">0.5</span>;<br>context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;rgba(255, 0, 0, 1.0)&#x27;</span>;<span class="hljs-comment">// 实际透明度 0.5 * 1.0 = 0.5</span><br>context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h5 id="图片叠加"><a href="#图片叠加" class="headerlink" title="图片叠加"></a>图片叠加</h5><blockquote><p>两个名词(概念):</p><p>源(source):  要绘制的新图形</p><p>目标(destination):  可能已经绘制了图形的 2d渲染上下文</p><p>图形的组合方式: globalCompositeOperation</p><p>设置或返回如何将一个源（新的）图像绘制到目标（已有）的图像上。</p></blockquote><ol><li>source-over: 源和目标都绘制, 源在目标上</li><li>destination-over: 源和目标都绘制, 目标在源上</li><li>source-atop: 绘制目标和重合部分的源, 源在目标上</li><li>destination-atop: 绘制源和重合部分的目标, 目标在源上</li><li>source-in: 只绘制重叠部分的源</li><li>destination-in: 只绘制重叠部分的目标</li><li>source-out: 只绘制未重叠部分的源</li><li>destination-out: 只绘制未重叠部分的目标</li><li>lighter: 源和目标都绘制, 重叠部分, 颜色相加, 最大值 255</li><li>copy: 只绘制源</li><li>xor: 绘制不重叠部分的源和目标</li></ol><blockquote><p>注意: 个别浏览器不支持全部的11个属性值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1, 获取Canvas</span><br><span class="hljs-keyword">var</span> firCan = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;firCan&quot;</span>);<br><span class="hljs-comment">// 2, 获取 2d渲染上下文</span><br><span class="hljs-keyword">var</span> context = firCan.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br><span class="hljs-comment">// 创建圆一</span><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">350</span>, <span class="hljs-number">250</span>, <span class="hljs-number">200</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>);<br>context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;rgb(255, 0, 0)&quot;</span>;<br>context.<span class="hljs-title function_">fill</span>();<br>context.<span class="hljs-property">globalCompositeOperation</span> = <span class="hljs-string">&#x27;xor&#x27;</span>;<br><span class="hljs-comment">// 创建圆二</span><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">650</span>, <span class="hljs-number">250</span>, <span class="hljs-number">200</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>);<br>context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;rgb(20, 255, 0)&quot;</span>;<br>context.<span class="hljs-title function_">fill</span>();<br></code></pre></td></tr></table></figure><h5 id="-2"><a href="#-2" class="headerlink" title=""></a></h5>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>css</title>
    <link href="/smiling-sheep.github.io/2022/05/21/css/"/>
    <url>/smiling-sheep.github.io/2022/05/21/css/</url>
    
    <content type="html"><![CDATA[<p>padding 不设置宽高，不撑大元素</p><p>笔记顺序，代码中的1，2，3，4，</p><h2 id="emmet语法"><a href="#emmet语法" class="headerlink" title="emmet语法"></a>emmet语法</h2><h3 id="快速生成html的结构"><a href="#快速生成html的结构" class="headerlink" title="快速生成html的结构"></a>快速生成html的结构</h3><ul><li><p>！</p></li><li><p>直接输入标签名，tab键生成标签</p></li><li><p>div*3 多个标签</p></li><li><p>div&gt;p*3 嵌套关系的标签</p></li><li><p>div+div 并列关系的标签</p></li><li><p>p.bubu div#mama 代类名或id名的标签</p></li><li><p>生成的类名是具有顺序的，可以使用自增符号$    </p><p>.bubu$*4 ($是自增符号) 生成了4个div，类名是bubu1 bubu2 bubu3 bubu4</p></li><li><p>生成的标签内写入内容可以使用{} </p><p><code>div&#123;$&#125;*3</code></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-number">1</span>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-number">2</span>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-number">3</span>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="快速生成css样式"><a href="#快速生成css样式" class="headerlink" title="快速生成css样式"></a>快速生成css样式</h3><p>采用简写的方式即可 w200 tab键 width：200px；lh200 tab键line-height：200px；</p><h2 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h2><p>免费的远程服务，免费空间 <a href="http://free.3v.do/">http://free.3v.do/</a></p><h2 id="css的书写顺序"><a href="#css的书写顺序" class="headerlink" title="css的书写顺序"></a>css的书写顺序</h2><ul><li>布局定位属性：display&#x2F;position&#x2F;float&#x2F;clear&#x2F;visibility&#x2F;overflow（dispaly第一个写）</li><li>自身相关的属性：width&#x2F;height&#x2F;margin&#x2F;padding&#x2F;border&#x2F;background</li><li>文本属性：color&#x2F;font&#x2F;text-decoration&#x2F;text-aglin&#x2F;vertical-align&#x2F;white-space&#x2F;break-word</li><li>css3其他属性：content&#x2F;coursor&#x2F;border-radius&#x2F;box-shadow&#x2F;text-shadow&#x2F;background-linear-gradient…</li></ul><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h3 id="标签属性，有些标签是自带属性的"><a href="#标签属性，有些标签是自带属性的" class="headerlink" title="标签属性，有些标签是自带属性的"></a>标签属性，有些标签是自带属性的</h3><p>&lt;标签名 属性名1&#x3D;’属性值’  属性名2&#x3D;’属性值’&gt;标签体&lt;&#x2F;标签名&gt;</p><ul><li><p>标签的通用属性，即每个标签都会有的属性，通用属性是写在标签里的</p><p>id class style title name</p></li><li><p>注意，有些自带属性是不能写在css样式中的，比如a链接的href属性，img的url属性，通用属性等…</p></li><li><p>有些标签会自带一些样式属性，不推荐使用，标签的样式要写在css样式中，这样才能实现结构与样式相分离</p></li></ul><h3 id="css作用：美化html，给网页布局"><a href="#css作用：美化html，给网页布局" class="headerlink" title="css作用：美化html，给网页布局"></a>css作用：美化html，给网页布局</h3><p>​1:选择标签</p><p>  2:给标签设置样式</p><h3 id="css引入方式"><a href="#css引入方式" class="headerlink" title="css引入方式"></a>css引入方式</h3><p>1：行内样式  标签添加style属性，属性值必须用双引号包围，只作用在当前标签</p><p><code>&lt;p style=&quot;coler:red;font-size:18px;&quot;&gt;&lt;/p&gt;</code></p><p>2:内嵌样式（内部样式表） head标签内写style标签，作用于整个html页面</p><p>3:外链样式 （外部样式表）head标签内写link标签，推荐使用，结构与样式</p><p> 将css样式编写在一个外部的css文件中，并通过link便签引入外部样式表</p><p>将样式表编写在css样式表中可以使用到浏览器的缓存机制，从而加快网页的加载速度，提高用户体验</p><p>在外部样式表中直接书写css样式即可</p><p>使用外链样式表的优点是：实现了结构于样式相分离，可作用于多个页面，</p><p>总结：行内样式：书写方便，权重高，不符合结构于样式相分离，只能控制一个标签，不推荐使用</p><p>​内嵌样式：部分结构与样式相分离，多用于练习时，控制一个页面</p><p>​外链样式：需要引入外部样式文件，实现了结构于样式相分离，可作用于多个页面，推荐使用</p><h3 id="css语法格式"><a href="#css语法格式" class="headerlink" title="css语法格式"></a>css语法格式</h3><p>css的主要构成，由选择器以及一条或多条样式声明</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">选择器</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable"> 属性：属性值；</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><p>选择器是用来选择页面中指定的元素</p></li><li><p>花括号内是对该选中元素设置的样式声明</p></li><li><p>样式声明是一个名值对的结构</p><p>格式：  样式名:样式值；</p><p>样式名和样式值之间以英文：分割</p></li><li><p>多个样式声明之间以英文；分割</p></li></ul><h3 id="选择器的分类"><a href="#选择器的分类" class="headerlink" title="选择器的分类"></a>选择器的分类</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><p>1：标签选择器，标签名作为选择器，把页面中某一类标签全部选择出来统一设置样式</p><p>2: 类选择器，以.类名作为选择器</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">.类名 </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">属性：属性值</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;类名&#x27;</span>&gt;</span>标签体<span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><p>哪个标签想要调用类选择器定义的样式需要给标签加上clss属性，属性值是类名，类名是我们自己任意起的</p></li><li><p>可以一个标签或多个标签设置相同的类名，调用相同的样式</p></li><li><p>类名的设置</p><ul><li><p>使用英文字母设置，不要使用纯数字及中文来定义类名,类名的要以英文字母开头</p></li><li><p>长名称或词组可以使用中横线来设置类名</p></li><li><p>常见的命名规则：。。。</p></li><li><p>标签可以通过class属性设置多个类名 ，多个类名之间以空格隔开</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;标签名 <span class="hljs-keyword">class</span>=&#x27;类名<span class="hljs-symbol">1</span> 类名<span class="hljs-symbol">2</span>&#x27;&gt;&lt;/标签名&gt;<br></code></pre></td></tr></table></figure><p>多类名的优点是：给标签设置公共样式，独有样式，节省代码且便于统一管理</p></li></ul><p>3：id选择器</p><p>给某一个标签设置id属性，属性值就是id名，css中id选择器通过<code>#id名</code>来定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">id</span>名&#123;</span><br> 属性名：属性值 <br>&#125;<br></code></pre></td></tr></table></figure><p>id值就像人的身份证一样，id值不能重复</p><p>类名像人的姓名一样，人可以重名</p><p>4: 通配符选择器，使用*表示，表示页面中所有的标签（元素）</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">*</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">属性名：属性值</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="元素的关系"><a href="#元素的关系" class="headerlink" title="元素的关系"></a>元素的关系</h4><p> 父元素：直接包含子元素的元素就是父元素</p><p>子元素：直接被父元素包含的就是子元素 （亲儿子）</p><p>祖先元素：直接或间接包含后代元素的就是祖先元素</p><p>​一个元素的父元素也是它的祖先元素</p><p>后代元素：直接或间接被祖先元素包含的元素就后代元素</p><p>​子元素也是后代元素</p><p>兄弟元素：拥有相同父元素的元素就是兄弟元素</p><p>复合选择器的案例格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;!-- 复合选择器的案例 --&gt;<br>    &lt;<span class="hljs-selector-tag">div</span>&gt;<br>        我是<span class="hljs-selector-tag">div</span>标签<br>        &lt;<span class="hljs-selector-tag">p</span>&gt;<br>            我是<span class="hljs-selector-tag">div</span>中的<span class="hljs-selector-tag">p</span>元素，我是<span class="hljs-selector-tag">div</span>的亲儿子<br>            &lt;<span class="hljs-selector-tag">span</span>&gt;我<span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>标签中的<span class="hljs-selector-tag">span</span>，我是<span class="hljs-selector-tag">div</span>的孙子&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>        &lt;/<span class="hljs-selector-tag">p</span>&gt;<br>        &lt;<span class="hljs-selector-tag">span</span>&gt;我<span class="hljs-selector-tag">div</span>中<span class="hljs-selector-tag">span</span>标签，我是<span class="hljs-selector-tag">div</span>的亲儿子&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><p>复合选择器就是将两个或多个基础选择器进行一些组合形成的选择器，其优点是可以更高效准确的选择出目标元素</p><p>复合选择器的分类</p><h5 id="后代选择器（常见）"><a href="#后代选择器（常见）" class="headerlink" title="后代选择器（常见）"></a>后代选择器（常见）</h5><ul><li>语法：</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">元素1 元素2</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">样式声明</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><p>语义是：将元素1的后代元素，元素2选择出来，给元素2添加样式。</p><p><strong>注意：</strong></p><ul><li><p>元素2只要是元素1的后代即可，无如是儿子，孙子，重孙子</p></li><li><p>元素1，元素2可以是任意的基础选择器</p></li></ul><h5 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h5><p>作用：选择父元素中直接子元素</p><p>语法：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">元素1&gt;元素2</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">样式声明</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><p>语义：将某元素内(最近一级)的子元素选择来，添加样式。（将元素1的亲儿子元素2选择出来）</p><h5 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h5><p>格式：选择器1选择器2选择器3{</p><p>}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.class-name</span>&#123;<br> <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><p>作用：选中同时符合多个条件的元素</p><p>交集选择器中如果有元素选择器，要以元素选择器开头</p><h5 id="并集选择器（常见）"><a href="#并集选择器（常见）" class="headerlink" title="并集选择器（常见）"></a>并集选择器（常见）</h5><p>所用：并集选择器是将多组 符合条件的标签 都选择出来，给他们添加共同样式集体声明</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>&#123;<br>样式声明<br>&#125;<br>语义：给元素<span class="hljs-number">1</span>和元素<span class="hljs-number">2</span>添加样式，,相当于和的意思<br>  <br>例子：<br><span class="hljs-selector-tag">p</span>,<br><span class="hljs-selector-tag">div</span>,<br><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>&#123;<br><span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：并集选择器要竖着写，选择器之间使用英文逗号,分隔，且最后一个选择器后没有,</p><h5 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h5><p>属性选择器格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[属性名]</span>&#123;&#125;   选择含有指定属性的元素，不论属性值是什么<br><span class="hljs-selector-attr">[属性名=<span class="hljs-string">&quot;属性值&quot;</span>]</span>&#123;&#125;  选择含有指定属性和属性值的元素，属性名和属性值必须都符合<br><span class="hljs-selector-attr">[属性名^=<span class="hljs-string">&quot;属性值&quot;</span>]</span>&#123;&#125; 选择含有指定属性并且属性值要以指定的值开头 的元素<br><span class="hljs-selector-attr">[属性名$=<span class="hljs-string">&quot;属性值&quot;</span>]</span>&#123;&#125; 选择含有指定属性并且属性值要以指定的值结尾 的元素 <br><span class="hljs-selector-attr">[属性名*=<span class="hljs-string">&quot;属性值&quot;</span>]</span>&#123;&#125; 选择含有指定属性并且属性值中只要包含指定的值即可 的元素<br></code></pre></td></tr></table></figure><ul><li><p>伪类选择器（常见）</p><p>伪类（不存在的类，特殊的类），伪类用来描述一个元素的特殊状态，比如：第一个字元素，被点击的元素，鼠标移入的元素……</p></li><li><p>伪类的写法最大特点是用冒号（:）表示</p><p>伪类的分类<a href="https://www.imooc.com/article/2799">https://www.imooc.com/article/2799</a>   <a href="https://www.cnblogs.com/1463069300limingzhi/p/11361709.html">https://www.cnblogs.com/1463069300limingzhi/p/11361709.html</a></p></li></ul><p>1:ui伪类：作用是给某些标签的不同状态添加特殊效果</p><ul><li><p>ui伪类又分为了：静态伪类和动态伪类</p><ul><li><p>静态伪类 ，这两种伪类只能用于超链接</p><ul><li>：link    <code>  a:link</code> 选择被没有访问的超链接（正常的链接）</li></ul></li><li><p>：visited a <code>a:visited</code> 选择被访问之后超链接</p><p>为了保护用户隐私。一般超链接的：visited伪类一般只修改字体颜色</p></li></ul></li><li><p>动态伪类，针对所有标签都是可用的</p><ul><li><p>：hover <code>a:hover</code>  鼠标放在标签上悬停</p></li><li><p>：active <code>a:active</code> 激活的意思，选择标签被 鼠标正在点击但是未弹起的状态</p></li><li><p>：focus  <code>input:focus</code>这个选择器主要用于获得焦点的表单元素。</p><p>焦点就是光标   input:focus</p></li></ul><p><strong>注意点：</strong>a链接有4种伪类即又加作链接伪类：link :visited :hover :active ,这4种伪类必须按照lvha的顺序写，否则会失效，即love hate爱恨原则，先爱后恨</p><p>因为a链接有默认样式，所以在工作中我经常给链接指定样式</p></li></ul><p>2：结构化伪类</p><ul><li><p>:first-child 伪类与指定的元素匹配：</p><p>选取父元素中的第一个子元素，被选出来的元素是一组兄弟元素中的第一个</p></li><li><p>： last-child<br>选取父元素中的最后一个子元素，即被选出来的元素是一组兄弟元素的最后一个元素</p></li><li><p>:nth-child(n)</p></li></ul><p>  选中第n个子元素</p><p>  特殊值：n 第n个 n的范围是0到正无穷</p><p>  ​2n 或even 选中偶数位的元素</p><p>  ​2n+1 或 odd 选择奇数位的元素</p><p>  ​               3n的倍数</p><p>  ​-n+3 前3个元素，从第一个到3元素</p><p>  ​                n+3 从3开始到后面的元素</p><p>  是根据所有的子元素进行排序</p><ul><li><p>:first-of-type</p></li><li><p>:last-of-type</p></li><li><p>:nth-of-type</p><p>这个伪类和nth-child组的伪类作用相似，只不过是它是在同类型的元素中进行排序</p></li><li><p>:not()  否定伪类</p><p>  将符合条件的元素从选择器中去除</p></li></ul><p>（结构化伪类先不讲，可以等css3再讲）</p><ul><li>等其他选择器</li></ul><h2 id="css的三大特性"><a href="#css的三大特性" class="headerlink" title="css的三大特性"></a>css的三大特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>后代元素可以继承祖先元素的一些样式</p><p>可继承的样式一般是和文字有关的样式：text-开头的样式   font-开头的样式   line-开头的样式 以及color</p><p>不可以继承的样式：背景相关的，布局相关的样式 …</p><p>优点：我们可以一些标签都有的样式统一设置到它们共同的祖先元素上，这样只需要设置一次就可以让所有的后代元素具有该共同的样式</p><p>常见的使用方式：在body标签设置页面整体的字体样式等</p><p><strong>注意：</strong>行高的继承性</p><ul><li>行高可以跟单位也可以不写单位</li><li>如果子元素没有写行高则会继承父元素行高，如果继承来的行高没有单位（1.5）则行高是相对于当前子元素字体大小*行高 </li><li>行高不写单位的写法的优点是子元素可以更具自身的字体大小计算行高</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">body</span>&gt;&lt;<span class="hljs-selector-tag">div</span>&gt;&lt;<span class="hljs-selector-tag">p</span>&gt;我脑子不好使&lt;/<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">body</span>&gt;样式：<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">font</span>:<span class="hljs-number">14px</span>/<span class="hljs-number">1.5</span> <span class="hljs-string">&quot;微软雅黑&quot;</span>；&#125;<span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;&#125;<span class="hljs-selector-tag">div</span>和<span class="hljs-selector-tag">p</span>都会继承<span class="hljs-selector-tag">body</span>的字体大小和行高，但是<span class="hljs-selector-tag">p</span>字体又重新赋值了，所以<span class="hljs-selector-tag">div</span>最后的<span class="hljs-attribute">font-size</span>是<span class="hljs-number">14px</span> <span class="hljs-selector-tag">p</span>的字体大小是<span class="hljs-number">16px</span> ；<span class="hljs-selector-tag">div</span>的行高是<span class="hljs-number">14</span>*<span class="hljs-number">1.5</span>；<span class="hljs-selector-tag">p</span>的行高是<span class="hljs-number">16</span>*<span class="hljs-number">1.5</span><br></code></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>当作用在一个元素上的样式发生冲突时应用哪个样式，由选择器的权重（优先级）决定</p><ul><li><p>选择器的优先级：</p><ul><li><p>继承的样式：  没有优先级</p></li><li><p>通配符选择器权重 ：0,0,0,0</p></li><li><p>标签(元素，伪元素)选择器权重：0,0,0,1</p></li><li><p>类和伪类选择器权重是：0,0,1,0</p></li><li><p>id选择器权重是：0,1,0,0</p></li><li><p>行内样式权重是：1,0,0,0</p></li><li><p>！important权重：无穷大   </p><p>在一个样式后面添加!important ,此时此时该样式会获得最高的优先级，但是要慎用，因为后期不好修改，通过js也不好修改</p></li></ul></li><li><p>复合选择器在比较优先级时，需要将选择器的优先级相加，谁的优先级高就显示谁声明的样式</p><p>例如： .classname p选择器的权重是10+1&#x3D;11</p></li><li><p>并集选择器（分组选择器）的权重是单独计算的 div,.class-name,#aa{}</p></li><li><p>选择器的累加不会超过其最大数量级，比如。再多的类选择器累加其权重也不会超过一个id选择器</p></li><li><p>选择器权重相同按就近原则，权重不同按权重高的样式</p><p>案例可以讲一下继承的样式和通配符权重</p></li></ul><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><ul><li><p>样式的冲突： 当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置了不同的样式值</p><ul><li><p>给一个元素通过<strong>相同的选择器</strong>（优先级相同）设置了相同的样式造成样式冲突，后面设置的样式会覆盖前的样式（遵循就近原则）</p></li><li><p>由选择器的优先级决定起作用样式，优先级高的起作用</p></li><li><p>选择器的权重(优先级)相同，遵循就近原则，后面设置的样式会覆盖前面设置的样式（css层叠）</p></li></ul></li><li><p>样式没有冲突，则都会作用在元素上</p></li></ul><h3 id="css中的长度单位"><a href="#css中的长度单位" class="headerlink" title="css中的长度单位"></a>css中的长度单位</h3><h4 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h4><ul><li>像素其实就是屏幕上一个个小的方形的发光点，这次小方格的位置和颜色就决定了屏幕中显示的图像的样子</li></ul><p>​       像素是是整个图像中最小的单位，单位是px</p><ul><li>屏幕分辨率是指在屏幕横向和纵向的像素个数，分辨率1920*1080，就是指在水平方向像素是1920个，垂直方向像素个数是1080个</li><li>对相同尺寸的屏幕而言，屏幕分辨率越低时（640*480），在屏幕上的像素就越少，单个像素的尺寸就越大，屏幕分辨率高时（1600 *  1200），在屏幕上的像素点就越多，屏幕显示的效果就越清晰，单个像素的尺寸就越小，所以同样的200px在不同的设备上显示的图像尺寸是不一样。（所以有些高清设备会对像显示的像素做一些加倍的处理。）</li></ul><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.opticsjournal.net%2Fupload%2Fpost%2F201610%2FPT161016000005v2x5.png&refer=http%3A%2F%2Fwww.opticsjournal.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1625758672&t=daeef5b4c0edd71fa7e964fbf8a885d7"></p><p>移动端时讲</p><p>像素：</p><p>屏幕是由一个个的发光小点构成，这一个个的小点就是像素</p><p>在前段开发中像素分为两种情况讨论，css像素 和 物理像素</p><p>物理像素 就是屏幕上的小发光点，是真实存在的，是厂商的出场设备的时候就设置好的 比如iphone6&#x2F;7&#x2F;8的是750*1334</p><p>css像素，就是我们css中写的多少像素   10px</p><p>浏览器在显示网页时是将css像素转换为物理像素然后再呈现的的</p><p>一个css像素最终由几个物理像素显示，由浏览器决定，默认情况下pc端的一个css像素对应一个物理像素，但是移动端设备就不尽相同了，1px的css像素和其能显示的物理像素的个数的比值，称为物理像素比或者屏幕像素比</p><p>视口：</p><p>视口就是屏幕中用来显示网页的区域，就是浏览器的窗口，视口的大小随着浏览器的拖拽可以改变，我们的网页就是在视口显示的</p><p>可以通过查看视口的大小，来观察css像素和物理像素的比值。（方法是：将浏览器全屏显示，没有滚动条的情况下，html标签在盒模型中widht就是视口的大小）看视口一般只看宽度不看高度，因为网页的高度是不固定的</p><p>在默认情况下（浏览器没有进行缩放的情况下）：</p><p>​视口宽度 1920px（css像素）1920（物理像素） 此时css像素和物理像素的比例是1:1</p><p>就浏览器放大两倍的情况下 放大的原理是将以前的一个css像素变为2个css像素</p><p>​视口的宽度  960（css像素）1920（物理像素，即屏幕上的小发光点的个数是不会改变的）  此时css和物理像素的比是1:2</p><p>我们可以通过改变视口的大小，来改变css像素和物理像素的比值</p><p>在不同的屏幕下，单位像素的大小是不同的，像素越小屏幕越清晰</p><p>智能手机的像素点 远远小于计算机的像素点</p><p>问题：一个宽度为900px的网页在</p><p>默认情况下，移动端的网页都会将视口设置为980像素（css像素）以确保pc端的网页可以在移动端正常访问，但是如过网页宽度超过了980px</p><p>移动端的浏览器会自动对网页缩放以完整显示网页</p><p>移动端默认的视口大小为980px（css像素）</p><p>默认情况下，移动端的像素比就是 980&#x2F;移动端的宽度 </p><p>编写移动端页面的时候，必须要确保一个比较合理的像素比</p><p>1css像素 对应 2个物理像素  1css像素 对应 3个物理像素 </p><p>每一款移动设备设计时，都会有一个最佳的像素比，一般我们只需要将像素比设置为最佳像素比，就可以得到一个最佳的效果，将像素比设置为最佳像素比的视口大小我们称其为完美视口</p><h4 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h4><p>将样式的属性值设置为相对于父元素属性的百分比</p><p>有点是：子元素可以随着父元素的改变而改变</p><h4 id="em"><a href="#em" class="headerlink" title="em"></a>em</h4><p>em是相对于元素自身的字体大小（font-size）来计算的</p><p>元素自身没有设置font-size的话，会继承父元素的font-size</p><p>1em&#x3D;1font-size</p><p>em会随着字体的大小改变而改变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">30px</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">10em</span>;  //<span class="hljs-number">300px</span><br><span class="hljs-attribute">height</span>:<span class="hljs-number">20em</span>; //<span class="hljs-number">600px</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>rem是相对于跟元素的字体大小来计算的</p><p>根元素是html标签</p><h3 id="fonts字体属性"><a href="#fonts字体属性" class="headerlink" title="fonts字体属性"></a>fonts字体属性</h3><h4 id="font-family属性"><a href="#font-family属性" class="headerlink" title="font-family属性"></a>font-family属性</h4><p>作用：推荐文本使用的字体系列(字体的格式)</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;微软雅黑&quot;</span>；<br>&#125;<br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">font-family</span>:Arialy,<span class="hljs-string">&#x27;Micosoft yahei&#x27;</span>,<span class="hljs-string">&#x27;微软雅黑&#x27;</span>；<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：</p><ul><li><p>可以设置多个字体，多字体之间要使用英文逗号分隔开，浏览器会依此查找推荐的字体在用户的电脑中有没有，有就优先使用，没有就查找下一个，最后一个字体是保底的</p></li><li><p>尽量使用系统默认的字体，以确保用户的浏览器都可以正常显示</p></li><li><p>如果字体是由有空格隔开的多个单词的组成的字体，字体要加引号</p></li><li><p>在windows系统中字体文件夹:  C:&#x2F;Windows&#x2F;Fonts</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font</span>-face可以将服务器中的字体直接提供给用户去使用，用户会将字体下载到自己的电脑中<br><br><span class="hljs-keyword">@font-face</span> &#123;<br>   指定字体的名字<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;字体名字&quot;</span>;<br>   字体文件包含在您的服务器上的某个地方，<br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">字体文件包在服务器上的地址</span>);<br>    如果字体文件是在不同的位置，请使用完整的URL：<br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;http://www.w3cschool.css/css3/Sansation_Light.ttf&#x27;</span>)  <br>&#125;<br><br><span class="hljs-attribute">src</span>定义字体下载的网址<br>这种自定义字体的方式的问题<br>下载速度的问题，第一次没有加载出来，会先显示默认字体然后再变为指定的字体<br>版权的问题，因为在<span class="hljs-attribute">font-family</span>中声明的字体是推荐用户使用，如果用户电脑上有就用，没有就不用，但是这种方式是给直接提供了字体，所以可能会涉及版权的问题<br></code></pre></td></tr></table></figure></li></ul><h4 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h4><p>作用：定义字体的大小</p><ul><li><p>字体框就是字体所在的框子，设置font-size实际就是设置字体框的大小</p></li><li><p>px（像素）是网页常用的单位</p></li><li><p>每个浏览器的默认字体大小是不一致的，我们尽量明确指定字体大小值，chrome浏览器默认文字的大小是16px</p></li><li><p>可以在body标签中指定页面文字的统一字体大小，但是h系标签需要单独指定字体大小</p></li></ul><h4 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h4><ul><li><p>作用：字重，设置字体的粗细效果</p></li><li><p>font-weight取值：</p><p>normal：默认值，正常字体不加粗，相当于400</p><p>blod：粗体，相当于数字700</p><p>bloder：特粗体</p><p>lighter：细体</p><p>数字：100至900（没什么用）</p><p>font-weight其实就是看用户的电脑中，有没有相对应的字体组的粗细版本，比如说，100字重的微软雅黑，200字重的微软雅黑，300字重的微软雅黑…一般用户的电脑上不会有这么多的字重版本，所以，有时设置font-weight没有效果</p></li></ul><h4 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h4><p>作用：设置文本的风格，倾斜</p><p>取值：normal  常用来给em，i标签改为不倾斜</p><p>​   italic：设置为斜体</p><h4 id="font组合属性"><a href="#font组合属性" class="headerlink" title="font组合属性"></a>font组合属性</h4><ul><li><p>设置字体相关的所有属性</p><p>font:font-style font-weight font-size&#x2F;line-height font-family;     各属性之间使用空格分开</p></li><li><p>font属性是组合属性，是有严格的顺序的，不能颠倒顺序。font-size和font-family不能省略且必须是后两位，且必须同时出现，其他的属性省略的话有采用默认的样式，默认属性值会覆盖之前的设置的属性值，比如说行高如果不写会采用其默认值</p></li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">body&#123;<br><span class="hljs-built_in">font</span>:<span class="hljs-built_in">font</span>-<span class="hljs-built_in">style</span> <span class="hljs-built_in">font</span>-weight <span class="hljs-built_in">font</span>-size/line-<span class="hljs-built_in">height</span> <span class="hljs-built_in">font</span>-family<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><p>用来定义文本的外观，比如文本的颜色，对齐方式，装饰文本，文本缩进，行间距等</p><p>(color，text-diraction，text-align，line-height)</p><h4 id="color：文本的颜色"><a href="#color：文本的颜色" class="headerlink" title="color：文本的颜色"></a>color：文本的颜色</h4><p>网页中常见的颜色取值方式：预定义颜色（颜色的名称），16进制（#fff），rgb（255,255,255）</p><ul><li><p>rgb是根据三种颜色的不同浓度调配出来的颜色</p><p>格式：rgb(red,green,blue)   </p><p> red green blue 这个是光的三原色，绘画的三原色是红黄蓝</p><p>red 代表颜色中红色成分  取值范围0-255或者（0%-100%）</p><p>green 代表颜色中绿色成分  取值范围0-255或者（0%-100%）</p><p>blue 代表颜色中蓝色成分 取值范围0-255或者（0%-100%）</p><p>注意：当三种颜色值都为0时是黑色，当三种颜色值都是255或100%时是白色</p><p>rgba(red, green,blue,alpha)</p></li><li><p>rgba(red,green,blue,alpha) 就是在rgb的基础上增加了通明度 </p><p>alpha表示不透明度，取值是0(完全透明)-1(完全不透明)  0.5半透明</p></li><li><p>十六进制的rgb值</p><ul><li><p>十六进制是计算机中常用的计数方式。他的规则是 逢十六进一</p><p>123456789ABCDEF 用英文字母A到F表示10进制中的10到15</p><p>如果计数到15时需要再加1，就进位</p><p>js中十六进制数的表示方式为0x开头</p></li><li><p>在css中使用十六进制的rgb值</p><p>语法：#红色绿色蓝色</p><p>颜色的浓度通过 00-ff。比如：#ff0000  </p><p>如果颜色两位重复可以只写一个  #f00</p></li></ul></li></ul><ul><li>HSL值  HSLA值（可以不讲）<ul><li>H 色相（0-360）工业设计中常用色相</li><li>S 饱和度  ，颜色的浓度 0%–100%</li><li>L亮度，颜色的亮度 0%-100%</li></ul></li></ul><h4 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a>text-align</h4><p>作用：设置元素内文本的水平对齐方式</p><p>取值：left&#x2F;right&#x2F;center&#x2F;justify （两端对齐）</p><p>父元素添加text-align：center，可以使内部的行内元素和行内块元素水平居中</p><h4 id="text-decoration-装饰文本"><a href="#text-decoration-装饰文本" class="headerlink" title="text-decoration  装饰文本"></a>text-decoration  装饰文本</h4><p>作用：给文本添加上划线，下划线，删除线</p><p>取值：none 默认，没有装饰线 ,给a链接删除默认的下划线</p><p>​underline 下划线</p><p>​overline 上划线（几乎不用）</p><p>​line-through 删除线</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">text</span>-decoration:underline <span class="hljs-built_in">red</span> dotted;  <span class="hljs-comment">//后面的值可以指定装饰线的颜色和装饰线的样式，但是有浏览器的兼容问题，chrom浏览器支持，ie浏览器不支持</span><br></code></pre></td></tr></table></figure><h4 id="text-indent-文本首行缩进属性"><a href="#text-indent-文本首行缩进属性" class="headerlink" title="text-indent 文本首行缩进属性"></a>text-indent 文本首行缩进属性</h4><p>作用：指定文本的第一行的缩进一个给定的长度，这个长度也可以设置负值。（通常是段落首行缩进。）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">p&#123;<br><span class="hljs-type">text</span>-<span class="hljs-keyword">index</span>:<span class="hljs-number">2</span>em;//缩进两个字体大小<br>或<br><span class="hljs-type">text</span>-<span class="hljs-keyword">index</span>:<span class="hljs-number">20</span>px;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>em是一个相对单位，是相对于当前需缩进文字的字体大小而言的（字体大小是通过font-size设置的），如果当前文字没有设置大小，则相对于父元素的文字大小进行缩进</li></ul><h4 id="line-height-行高属性"><a href="#line-height-行高属性" class="headerlink" title="line-height 行高属性"></a>line-height 行高属性</h4><ul><li><p>行高是文字在页面中占有的实际高度，通过line-height属性来控制行高即而控制了文字行与行之间的间距。</p></li><li><p>行高组成：文字本身的高度加上 上空隙和下空隙，文字的行间距&#x3D;行高-字体大小</p></li><li><p>行高可以直接指定一个带单位大小，如果 10px 10em rem  长度单位在此之前讲</p><p>也可以为行高设置一个数值（不带单位），行高会是字体大小的指定倍数</p><p>line-height省略不写的话会采用默认值 1.3333333…</p></li></ul><p>行高等于高度 可以控制单行文字 行内元素 行内块元素垂直方向居中 ，多行文字则不行</p><p>单行文字垂直居中的原理：设置行高等于盒子的height，行高的上空隙和下空系把文字挤到中间，如果行高小于盒子高度文字会偏上，如果行高大于盒子高度文字会偏下</p><h4 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h4><p>作用：设置网页如何处理空白（如何换行）</p><p>取值：normal 正常显示</p><p>​nowrap  不换行</p><p>​pre 保留，在默认情况下网页会把多个空格和换行解析成一个空格，pre会以预处理的格式会保留所有的空白（空格和换行），代码写成什么样就显示什么样</p><p>常有的方式是对溢出的内容显示省略号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">300px</span>;   定宽<br><span class="hljs-attribute">white-space</span>:nowrap;   不换行<br>over-<span class="hljs-attribute">flow</span>:hidden;  溢出的显示隐藏<br><span class="hljs-attribute">text-overflow</span>:ellipsls;  溢出的文字显示省略号<br>&#125;<br><br>单行显示省略号，这几个属性缺一不可<br></code></pre></td></tr></table></figure><p>多行显示省略号：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">设置宽度<br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br><span class="hljs-attribute">display</span>: -webkit-box; <span class="hljs-comment">/** 将对象作为伸缩盒子模型显示 **/</span><br>-webkit-box-orient: vertical; <span class="hljs-comment">/** 设置或检索伸缩盒对象的子元素的排列方式 **/</span><br>-webkit-line-clamp: <span class="hljs-number">3</span>; <span class="hljs-comment">/** 显示的行数 **/</span><br><span class="hljs-attribute">overflow</span>: hidden;  <span class="hljs-comment">/** 隐藏超出的内容 **/</span><br></code></pre></td></tr></table></figure><h4 id="over-flow"><a href="#over-flow" class="headerlink" title="over-flow"></a>over-flow</h4><p>作用：规定元素内容溢出元素框时发生的事情</p><p>取值：visible 默认值 不剪切内容，无滚动条</p><p>​hidden 将溢出的内容隐藏掉，内容实际依旧存在结构中，只是隐藏掉了</p><p>​scroll   无论内容是否溢出，显示水平和垂直方向两个滚动条</p><p>​auto   根据内容来决得是否显示滚动条及显示哪个方向的滚动条</p><p>overflow-x    属性</p><p>overflow-y    属性</p><p>over-flow只作用在定高的块状元素上</p><h2 id="css的background属性"><a href="#css的background属性" class="headerlink" title="css的background属性"></a>css的background属性</h2><p>作用：通过css的背景属性给元素添加背景样式，如背景颜色，背景图片，背景平铺，背景图片位置，背景图像的固定</p><h4 id="background-color："><a href="#background-color：" class="headerlink" title="background-color："></a>background-color：</h4><ul><li>默认值是transparent（透明）</li><li>设置背景颜色 <ul><li>预定义颜色</li><li>16进制（#fff） </li><li>rgb</li><li>rgba 设置背景颜色半透明，a是值alpha透明度取值是0到1，1是不透明(有兼容性问题但一般不考虑)</li></ul></li></ul><h4 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h4><p>作用：给元素设置背景图片，多用于设置logo，一些小图片，超大的图片</p><p>优点：便于控制背景图片的位置（精灵图）</p><p>取值：none（默认）｜url</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">图片地址</span>);<br>图片地址可以加引号也可以不加引号，加引号可以避免一些特殊符号引起的问题，所以推荐加引号<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>元素可以同时添加背景颜色和背景图片，只不过背景图片会压住背景颜色，背影颜色会成为背景图片的背景色</p></li><li><p>如果背景图片小于元素，则背景图片会自动在元素之中平铺，将元素铺满</p></li><li><p>如果背景图片大于元素，则背景图片会有一部分无法完全显示</p></li><li><p>如果背景图片和元素一样大，则会正常显示</p></li></ul><h3 id="background-repeat-背景平铺"><a href="#background-repeat-背景平铺" class="headerlink" title="background-repeat 背景平铺"></a>background-repeat 背景平铺</h3><p>作用：用来设置背景图片的平铺方式</p><p>取值：repeat 默认值 在水平方向和垂直方向双向平铺</p><p>​no-repeat   不平铺</p><p>​repeat-x   水平平铺</p><p>​repeat-y   纵向平铺</p><h3 id="background-positon-背景图片的位置"><a href="#background-positon-背景图片的位置" class="headerlink" title="background-positon 背景图片的位置"></a>background-positon 背景图片的位置</h3><p>background-positon：x y；</p><p>x坐标 y坐标 ，可以使用方位名词或精确单位</p><ul><li><p>方位名词：top center bottom left center right；</p><ul><li>两个值都是方位名词：没有顺序之分  即background-position：center right和right center是等效的</li></ul><p>通过方位名词是可以区分出是水平方向还是垂直方向的</p><ul><li><p>如果只指定一个方位名词，另一个省略的方位名词默认是center</p><p>方位名词的方式像是一个九宫格，案例展示，画九宫格</p></li></ul></li><li><p>通过偏移量来指定背景图片的位置</p><p>百分数  或 数字和单位标识符组成的长度值（10px）</p><ul><li><p>如果参数是精确单位则两个值的顺序是固定的，即第一个是x轴，第二个是y轴</p></li><li><p>如果只设置一个数值，则该数值是x轴，另一个默认是center</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">background</span>-position:-<span class="hljs-number">50</span>px <span class="hljs-number">300</span>px;<br></code></pre></td></tr></table></figure></li></ul><p>注意：background-position取值为百分比的时候，正值是向左走，负值是向右走</p></li><li><p>参数是混合单位 (可以不讲)</p><p>方位名词和精确单位混合使用，则第一个是x轴，第二个是y轴</p></li></ul><p><strong>案例：</strong>雪碧图··</p><h3 id="background-size-背景图片的大小"><a href="#background-size-背景图片的大小" class="headerlink" title="background-size 背景图片的大小"></a>background-size 背景图片的大小</h3><p>取值：</p><ul><li><p>宽度值 高度值；第一个是宽度 第二个是高度。 <code>background-size:100px 200px </code></p><p>可以采用精确数字加单位，也可以采用百分百，百分比是计算相对于背景定位区域的百分比</p><p>若写一个数字的话，则默认是宽度，第二个默认是auto（自动）</p></li><li><p>cover 是将背景图片按照图片比例进行缩放，只到可以将背景定位区域全部覆盖的最小尺寸（图片比例不变，将元素铺满）</p></li><li><p>contain（包含）是将背景图片按照图片比例进行缩放，直到背景图片可以在背景定位区域完全展示的最大尺寸(图片比例不变，图片在元素中完整显示)</p></li></ul><p>精确的尺寸，一般是数字加单位</p><h3 id="background-attachment-背景图片附着（固定）-了解"><a href="#background-attachment-背景图片附着（固定）-了解" class="headerlink" title="background-attachment 背景图片附着（固定） 了解"></a>background-attachment 背景图片附着（固定） 了解</h3><p>作用：设置背景图片是否跟随元素移动</p><p>background-attachment：取值</p><p>​ scroll 背景跟随元素滚动</p><p>​    fixed 背景图片固定在页面中，不会随元素移动，此时再定位（background-position）就是相对于整个浏览器窗口定位（设置偏移量）</p><p>案例：<a href="https://im.qq.com/">https://im.qq.com</a></p><h4 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h4><p>作用：设置背景的范围。clip修剪</p><p>取值：border-box 默认值，背景会出现在边框的下面</p><p>​paddding-box 背景不会出现在border下面，只会出现在内容区和内边距</p><p>​            content-box 背景只会出现在内容区</p><p>（有一点点的兼容性问题，可以忽略不计，ie浏览器的ie8不支持）</p><h4 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h4><p>作用：<strong>背景图片</strong>偏移量开始计算的原点。（注意是背景图片，不是背景颜色）</p><p>取值：padding-box 默认值，background-position从元素的的左上角 内边距处开始计算</p><p>​           content-box  背景图片的偏移量从元素的左上角 内容区处开始计算</p><p>​border-box 背景图片的偏移量从元素的左上角 边框处开始计算</p><h3 id="background复合写法"><a href="#background复合写法" class="headerlink" title="background复合写法"></a>background复合写法</h3><p>所有背景相关的样式都可以通过该属性设置</p><p>样式书写没有固定顺序，但一般习惯顺序是：背景的颜色 图片地址 平铺 滚动 位置</p><p>bg-color bg-image bg-repeat bg-position&#x2F;bg-size  bg-attachment background-origin background-clip</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">background:<span class="hljs-built_in">red</span> url() no-reapt fixed <span class="hljs-built_in">right</span> <span class="hljs-built_in">top</span>;<br></code></pre></td></tr></table></figure><p>注意点</p><ul><li>样式没有顺序之分，但是background-size必须再background- position的后面，且用&#x2F;隔开（  即bg-position&#x2F;bg-size）</li><li>bg-orign和bg-clip的取值相同但是表示的含义不同，为了区分开，这两个样式书写顺序得是bg-origin要在bg-clip的前面</li></ul><p>图片属于网页中的外部资源，外部资源都需要浏览器单独发送请求加载</p><p>浏览器加载图片时是按需加载，即需要的时候再加载，不需要9⃣️先不加载</p><p>:line :hover :active伪类中添加的背景图片是在指定状态出发时才会加载，第一次在没有缓存的情况下会有空白间隙</p><p>css渐变</p><p>作用：可以让两个或多个指定的颜色之间显示平稳的过渡</p><p>css有来两种渐变 - 线性渐变 line-gradient      -颈向渐变 radial -gradient      </p><p>background-image：line-gradient（方向，颜色1，颜色2…）  </p><p>background-image：line-gradient（颜色1，颜色2…）方向默认是从上到下</p><p>background-image：line-gradient（to right，颜色1，颜色2…）从左到下右</p><p>background-image：line-gradient（to bottom right，颜色1，颜色2…）从左上角到下右下角</p><h2 id="css盒模型"><a href="#css盒模型" class="headerlink" title="css盒模型"></a>css盒模型</h2><p>css将所有的页面元素设计为了一个个矩形的盒子，页面布局实际上就是在页面上摆放这一个个的盒子（看其他网站比划出一个个盒子）</p><p>看礼盒的图片</p><p>html页面中的元素本质就是一个的矩形盒子，用来封装周围的html元素，它包括实际内容 填充 边框 边距</p><p>看盒模型图片：标准盒模型</p><h3 id="Content-盒模型的实际内容"><a href="#Content-盒模型的实际内容" class="headerlink" title="Content 盒模型的实际内容"></a>Content 盒模型的实际内容</h3><p> 元素的内容区域使用width和height设置的，元素的子元素文本等内容都在内容区中排列</p><h3 id="border-边框"><a href="#border-边框" class="headerlink" title="border 边框"></a>border 边框</h3><ul><li><p>作用：border可以定义元素的边框，边框就是盒子的边缘，边框里面属于盒子内部，边框外面属于盒子的外部</p></li><li><p>设置border要通过三个样式设置</p><ul><li><p>Border-width:设置边框的宽度，单位一般都是px</p><ul><li><p>border-width 有默认值，默认值是3px，所以border-width可以不写，不设置时采用默认值</p></li><li><p>border-width取值方式：</p><ul><li><p>四个值：上 右 下 左</p><p>三个值：上 左右 下</p><p>二个值：上下 左右</p><p>一个值：设置四个方向的值相同</p></li></ul></li><li><p>只设置一个方向的宽度</p><p>border-top-width  border-right-width  border-bottom-width   border-left-width</p></li></ul><p>  </p></li><li><p>border-style：设置边框的样式 </p><p>取值方式同上border-widht和border-color一样</p><p>可去的值有：solid 实线边框</p><p>​dashed 虚线边框</p><p>​dotted 点线边框</p><p>​double 双线</p></li><li><p>border-color：设置边框的颜色</p><p>同样可以分别指定四个方向的边框颜色，取值方式和border-width一样</p><p>​四个值   border：red green blue yellow；</p><p>​三个值</p><p>​二个值</p><p>​一个值</p><ul><li><p>只设置一个方向的颜色</p><p>border-top-style  border-right-style  border-bottom-style   border-left-style  </p></li><li><p>boder-color也可以省略不写，采用默认值为黑色</p><p>默认颜色是透明 tansparent？？？</p></li></ul></li><li><p>border简写属性，所有边框相关的样式都可以通过该样式设置，没有固定顺序</p><p>border：border-width border-style border-color;  这种方式是设置了四个方向的边框是一样</p><p><code>borer：1px solid red；</code></p><p>还可以单独设置一个方向的边框样式：</p><p>border-top     border-right     border-bottom       border-left</p><p><code>borer-top：1px solid red；</code></p></li></ul></li><li><p><strong>注意</strong>：在标准盒模型中boder会加大盒子的宽高</p></li><li><p>案例：css三角形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">150px</span> solid red;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">100px</span> solid blue;<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">100px</span> solid yellow;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">100px</span> solid green;<br>&#125;<br></code></pre></td></tr></table></figure><p>表格的细线边框</p><p>border-spacing：0px；  这个属性设置单元格的外边距</p><p>border-collapse：collapse；       collapse：折叠   设置表格的边框合并成一个边框</p><p>设置了border-collapse：collapse后border-spacing将不在起作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">500px</span>;  表格可以不设置宽高由内容撑开尺寸<br>  <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid  red;<br>  <span class="hljs-attribute">border-spacing</span>:<span class="hljs-number">0px</span>; <br>  <span class="hljs-attribute">border-collapse</span>:collapse;<br>&#125;<br><span class="hljs-selector-tag">td</span>&#123;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid  red;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="padding-内边距-填充"><a href="#padding-内边距-填充" class="headerlink" title="padding 内边距 填充"></a>padding 内边距 填充</h3><p>padding设置元素的内边距，即盒子的边框和内容之间的距离（填充）</p><p>​可以单独设置： padding-top 上内边距   padding- right 右内边距  padding-bottom 下内边距 * padding-left 左内边距</p><ul><li>可以简写，使用padding属性设置：（用法和border-width一样有四种取值方式）</li></ul><p>​4个值padding：3px 2px 8px 8px; 上右下左</p><p>​1个值padding：3px; 四个方向的内边距值一样时的写法</p><p>​2个值padding：3px 2px； 第一个值表示上下内边距是3px  第二个值表示左右内边距是2px</p><p>​3个值padding：3px 2px 3px； 第一个值表示上内边距是3px  第二个值表示左右内边距是2px   第三个值表示下内边距是3px</p><ul><li>padding取值：length｜百分比</li></ul><blockquote><p> <strong>百分比是按照父元素的宽度的百分比，无论父元素有没有设置padding值，子元素的padding采用百分比都是相对于父元素宽度width来计算的padding值</strong></p></blockquote><p><strong>注意：</strong></p><ul><li>在标准盒子模型中如果盒子已经设定了宽高，padding会加大盒子的尺寸，背景颜色会延伸到内边距</li><li><strong>如果元素没有指定宽高属性，则此时padding不会撑开盒子所以说当元素和父元素是一样宽时不用给子元素设置宽度值了，它会自己默认时父元素的100%</strong></li></ul><p><strong>注意：一个盒子可见框的大小由内容，内边距，边框相加决定</strong></p><h3 id="margin外边距"><a href="#margin外边距" class="headerlink" title="margin外边距"></a>margin外边距</h3><p>margin设置元素与其他元素之间的间距</p><p>外边距不会影响盒子可见框的大小，但是外边距会影响盒子的位置</p><ul><li><p>有四个方向的取值，可取的值：length｜百分比|auto</p><p>margin-top    上边距，设置正值，盒子会向下移动，设置负值盒子会向上移动</p><p>margin-right   默认情况下margin-right不会产生任何效果</p><p>margin-bottom  设置正值会使其下面的元素向下移动，设置负值会使下面的元素向上移动</p><p>margin-left。 左边距设置正值元素会向右移动，设置负值元素会向左移动</p></li><li><p>margin的简写属性，可以同时设置四个方向上的margin，用法和padding和border-width一样</p></li></ul><blockquote><p><strong>百分比是按照父元素的宽度的百分比，无论父元素有没有设置margin值，子元素的margin采用百分比都是相对于父元素宽度width来计算的margin值</strong></p></blockquote><blockquote><p>auto是由浏览器自动计算的值</p></blockquote><ul><li>margin会影响盒子实际的占用空间</li></ul><h4 id="元素在水平方向上的布局"><a href="#元素在水平方向上的布局" class="headerlink" title="元素在水平方向上的布局"></a>元素在水平方向上的布局</h4><p>元素在器父元素中水平方向的位置由以下几个属性共同决定，且必须满足这个等式</p><p>margin-left + border-left +  padding-left + contern + padding-right +  border-right +  margin-right&#x3D;其父元素的内容区的宽度</p><p>这七个值中，有三个值可以设置为auto； width margin-left margin-right</p><p>原则是：如果这三个值中某个值设置为auto，则会自动调整为auto的那个值是以使等式成立</p><ul><li><p>如果将一个宽度和一个外边距设置为auto，则宽度会调到最大，设置为auto的那个外边距会自动为0</p><ul><li><p>如果将三个值都设置为auto，则宽度最大，外边距都是0</p></li><li><p>如果将两个外边距设置为auto，宽度固定值，则会将两遍的外边距设置为相同的值，所以利用这个特点使定宽的块状元素水平居中</p><p><strong>注意</strong>：1:巧用外边距使<strong>定宽</strong>块级元素水平居中，必须是设置了宽度的块级元素</p></li></ul></li></ul><p>​方法：盒子左右边距都设置为auto；</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">margin</span>：<span class="hljs-number">0</span> auto;<br><span class="hljs-attribute">margin</span>：auto auto；<br><span class="hljs-attribute">margin</span>：<span class="hljs-number">10px</span> auto；<br><br><span class="hljs-attribute">margin-left</span>：auto；<br><span class="hljs-attribute">margin-right</span>：auto；<br></code></pre></td></tr></table></figure><p>​2:行内元素，行内块元素水平居中是给父元素设置：text-align：center；</p><p><img src="/smiling-sheep.github.io/Users/wei/Desktop/markdown/css%E5%A4%87%E8%AF%BE/WechatIMG46.jpeg" alt="image-20210610234713208"></p><ul><li><p>外边距合并（边距重叠）</p><p>外边距合并指的是相邻的垂直方向的外边距会发生重叠的现象</p><ul><li><p>兄弟元素</p><p>当两个兄弟元素之间的相邻垂直外边距相遇时会合并为一个外边距，取两者之间的较大值（两者都是正值）</p><ul><li><p>特殊情况</p><p>如果相邻的外边距一正一负，取两者之和</p><p>如果相邻的外边距都是负值，则取两者中的绝对值较大的那一个的值</p></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">两个普通的元素<span class="hljs-attribute">margin</span>如果都是正值，合并后的实际边距取他们之间的最大值。？如果有负值则就把两个<span class="hljs-attribute">margin</span>值相加<br></code></pre></td></tr></table></figure><p> 只有标准流中块状元素才会发生垂直外边距合并的问题，行内块元素，浮动元素，绝对定位元素之间的外边距不会发生合并</p><p>解决方法：1<strong>给{第二个}盒子浮动,2给第二个盒子绝对定位3给任意一个盒子加display:inline-block</strong>;</p><p>（但是这种兄弟之间相邻的垂直外边距合并的现象是有利于开发的（防止元素之间间距太大），可以不解决）</p><ul><li><p>父子元素</p><p>对两个嵌套关系的块级元素，第一个字元素的margin回传给父元素</p><p>即第一个子元素的margin会顶开父元素与父元素相邻元素的间距，或者父元素和子元素都有margin值，margin会重叠为一个margin值，谁大显示谁</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs applescript">html：<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;middle&quot;</span>&gt;<br>  &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;firstChild&quot;</span>&gt;我其实只是想和我的父元素隔开点距离。&lt;/<span class="hljs-keyword">div</span>&gt;<br>  &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;secondChild&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>css：<br>.top&#123;width:<span class="hljs-number">160</span>px; height:<span class="hljs-number">50</span>px; background:<span class="hljs-comment">#ccf;&#125;</span><br>.<span class="hljs-keyword">middle</span>&#123;width:<span class="hljs-number">160</span>px; background:<span class="hljs-comment">#cfc;&#125;</span><br>.<span class="hljs-keyword">middle</span> .firstChild&#123;margin-top:<span class="hljs-number">20</span>px;&#125;<br></code></pre></td></tr></table></figure><p>（这种父子元素的相邻的垂直外边距重叠问题会影响页面布局，必须解决）</p><p>解决方法：1:给父元素设置上边框 即border-top   但是注意这种方式会影响父元素的尺寸</p><p>​2:给父元素设置上内边距 padding-top  但是注意这种方式会影响父元素的尺寸</p><p>​3:给父元素设置overflow：hidden；</p><p>还有其他的解决方法，浮动，固定，绝对定位的元素不会有塌陷问题（后讲）</p></li></ul></li></ul><h4 id="行内元素的盒模型"><a href="#行内元素的盒模型" class="headerlink" title="行内元素的盒模型"></a>行内元素的盒模型</h4><ul><li>行内元素不支持直接设置宽高属性</li><li>行内元素可以设置padding，但是垂直方向padding不会影响页面的布局（行内元素会变大但是在垂直方向不会挤开其他元素）</li><li>行内元素可以设置border，垂直方向border不会影响页面的布局</li><li>行内元素可以设置margin，垂直方向margin不会影响页面布局</li></ul><h4 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h4><p>通常情况下，浏览器会为元素设置默认样式，但是不同的浏览器设置的默认样式会有些不同</p><p>默认样式会影响我们的页面布局，所以在编写网页之前要清楚一下或者统一一下默认样式（特别是pc端）</p><p>页面中很多元素都有默认的内外边距，页面样式初始化，清除内外边距 </p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">*&#123;<br><span class="hljs-string">margin:0;</span><br><span class="hljs-string">padding:0;</span><br>&#125;<br><span class="hljs-string">ul</span>&#123;<br><span class="hljs-built_in">list-style:none;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>推荐用于清除修改默认样式的css文件：normalize.css</p><p>css3新增属性：border-radius box-shadow text-shadow</p><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><p>默认情况下盒子可见区域的大小内容，内边距和边框共同决定</p><ul><li><p>box-sizing用来设置盒子尺寸的计算方式，用来设置width和height的作用，</p><p>取值：content-box  默认值，width和height用来表示内容区</p><p>​border-box    width和height表示盒子可见框的尺寸，即包含内容，内边距和边框，定了可见框的总尺寸后再设置border和内边距会调整（减小）内容区的尺寸，我们不用再单独计算content的尺寸了</p></li></ul><h3 id="outline-轮廓线"><a href="#outline-轮廓线" class="headerlink" title="outline 轮廓线"></a>outline 轮廓线</h3><p>作用：设置元素的轮廓线,用法和border一样 <code>outline:1px solid red;</code></p><p>不同的是，border会影响盒子可见框的尺寸，outline不会影响盒子可见框的尺寸，对页面布局没有影响</p><h2 id="圆角边框-border-radius"><a href="#圆角边框-border-radius" class="headerlink" title="圆角边框 border-radius"></a>圆角边框 border-radius</h2><ul><li><p>作用：设置元素边框为圆角  radius（半径）</p></li><li><p>原理：圆形和元素边框的交集形成的圆角效果（原理展示）</p><p>取值： 精确数值加单位 20px ｜百分比  </p></li><li><p>单独设置一个角的 ：</p><p>border-top-left-radius ：水平方向圆角的半径  垂直方向圆角的半径；  </p> <figure class="highlight plaintext"><figcaption><span>：50px  60px； ```     两个值不一样是椭圆，两个值一样是正圆可以简写只写一个值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs border-top-left-radius">  <br>  border-top-right-radius <br>  <br>   border- bottom-right-radius  <br>  <br>  border-bottom-left-radius <br><br>* border-radius是一个简写属性可以分别设置4个值<br><br>  border-radius：左上角    右上角  右下角   左下角；<br><br>  border-radius：左上角     右上角和左下角    右下角；<br><br>  border-radius：左上角和右下角     右上角和左下角；  对角<br><br>  border-radius：四个角一样；<br><br></code></pre></td></tr></table></figure><p>border-radius:10px 20px 30px 40px;<br>border-radius:10px;</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br>  以上是设置了正圆相切<br><br>  还可以设置椭圆形的圆角<br><br>  ``` <span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>:10px 20px 30px 40px/20px 30px 40px 50px；```<br><br>  /前的四个值是圆角的水平半径，/后的值是圆角的垂直半径<br><br>常见的使用：<br><br>​将元素设置为正圆：元素的宽高值一样（正方系），<span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>设置为宽高值的一半 或<span class="hljs-number">50</span><span class="hljs-symbol">%</span><br><br>​圆角矩形：<span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>设置为矩形短边的一半<br><br>## <span class="hljs-built_in">box</span>-shadow 盒子阴影<br><br><span class="hljs-built_in">box</span>-shadow：阴影的水平偏移量 垂直偏移量 模糊距离 阴影尺寸 阴影颜色 将外部阴影改为内部阴影；<br><br>* 默认情况下阴影在元素的正下方和元素大小一样，所以看不到<br><br>* 水平和垂直方向的阴影便宜量这两个值是必须的<br><br>* 默认的阴影是outset（外阴影）但是不能写这个值，否则阴影无效。设置为外阴影时直接省略即可<br><br>  Inset是设置阴影为内阴影<br><br></code></pre></td></tr></table></figure></li></ul><p>.shadow-show{<br>  width:400px;<br>  height:200px;<br>  background:red;<br>  box-shadow: 20px 20px 10px 10px;<br>}</p><div class="shadow-show"></div><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>案例演示：在浏览器控制台调试看效果<br><br>**注意：**盒子的阴影不占据位置，不会对其他元素产生影响，不会影响页面布局<br><br>## Text-shadow 文字阴影<br><br>作用：为文本设置颜色<br><br>text-shadow：水平阴影位置 垂直阴影位置 模糊距离 阴影颜色；<br><br>其中水平阴影和垂直阴影位置是必须的，不可以省略<br><br>### 文档流<br><br>网页是一个多层结构，一层摞着一层，css可以分别为每一层设置样式，用户只能看见最上面一层的，这些层中，最底下的一层被称为文档流，文档流是网页的基础。我们所创建的元素默认是在文档流中排列的。<br><br>对于我们元素而言有两个状态在文档流中和不在文档流中（即 脱离文档流）<br><br>元素在文档流中的特点：块状元素和行内元素的特点<br><br>块级元素在标准流中：独占一行 ，宽度默认是父元素的<span class="hljs-number">100</span>%，可以直接设置宽高，从在垂直方向上上向下依次排列<br><br>行内元素在标准流中的特点:可以和其他元素在一行显示，从左向右依次排列，一行放不下另起一行<br><br>## float浮动<br><br>* 浮动最初产生的目的是实现文字环绕。<br><br>  在我们实际开发中为什么需要浮动：块级元素在正常的文档流中是由上至下依次排列的，但有时我们想要块级元素进行左右排列，虽然将元素转化为行内块元素可以使元素在一行展示但是行内块元素之间有缝隙不好控制，所以需要使用浮动<br><br>* 作用：float属性可以使元素在其父元素内左右移动，来达到使页面元素水平排列的页面的布局<br><br>* float取值：none 不浮动<br><br>  ​left  左浮动<br><br>  ​right 右浮动<br><br></code></pre></td></tr></table></figure>div {    float:left}<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">*</span> <span class="hljs-strong">**注意：**</span><br><span class="hljs-bullet">  *</span> 浮动元素会脱离文档流，漂浮在文档流之上，和文档流不在一个层级。浮动元素原来占据文档流中位置的位置就空了出来，其后面的在文档流中的元素会自动顶替他原来在文档流中的位置。而此时浮动了的元素漂浮在文档流之上会所以会遮挡文档流中的一些元素（浮动的原理）<br>  <br><span class="hljs-bullet">  *</span> 一个元素浮动会尽量在其父元素中的向左或向右浮动，默认不会从父元素中移出（直到它的外边缘碰到包含框或另一个浮动框的包含框为止）<br><span class="hljs-bullet">  *</span> 如果在一行中放不下浮动元素了，那么浮动元素会自动转到下一行<br><span class="hljs-bullet">  *</span> 右浮动会颠倒盒子的位置<br><span class="hljs-bullet">  *</span> 浮动元素只会影响后面的标准流不会影响前面的标准流，即如果浮动元素上面是一个没有浮动块元素，则浮动元素不会上移<br><span class="hljs-bullet">  *</span> 浮动元素不会超过它前面的浮动的兄弟元素，最多就是和他一样高<br><span class="hljs-bullet">  *</span> 浮动元素脱离文档流后会压住下一块元素，但不会压住其内的文字和img图片，因为浮动产生的原就是实现文字环绕的效果<br><br><span class="hljs-bullet">-</span> 脱离文档流的元素特点<br><br>  任何元素都可以浮动，不管其原来是什么显示模式，浮动后的元素就具有类似行内块元素的特点<br><br>  1:块级元素不再独占一行<br><br><span class="hljs-code">     块状元素在文档流时如果没有设置宽度，宽度默认是父元素的100%；但是脱离文档流后它的宽高由内容撑开，如果块级元素设置了宽度，脱7来离文档流后宽度不会改变</span><br><span class="hljs-code"></span><br>  2:行内元素设置脱离文档后，可以直接设置宽高，无需转换显示模式<br><br>  3:浮动后的元素是紧挨着的中间没有间隙<br><br>  脱离文档后不用再区分块状元素和行内块元素了<br><br><span class="hljs-section">#### 高度塌陷</span><br><br>块级元素在不指定高度时，其高度是靠内容撑开的，当其子元素设置了浮动后就会脱离文档流，脱离文档流后将无法撑起父元素的高度，导致父元素的高度塌陷，父元素的高度塌陷后会影响和父元素同在标准流中其他元素，导致页面布局混乱，所以这个问题必须要解决<br><br><span class="hljs-section">### BFC（block Fomatting Context）块级格式化环境</span><br><br>bfc是css中一个独立的渲染区域独立的布局区域，属于标准流，（bfc是一个隐含的属性）不能直接开启，要通过其他属性开启，开启bfc后该元素会变成一个独立的布局区域，它有自己的布局规则，bfc里面的子元素不会影响外面的元素，外面的元素也不会影响bfc里面元素。<br><br>元素开启bfc后的特点：<br><br><span class="hljs-bullet">-</span> bfc内的块级元素会在垂直方向依次排列<br><span class="hljs-bullet">-</span> 元素的margin-left与其包含块的border-left相接触<br><span class="hljs-bullet">-</span> bfc内块级元素的垂直方向的距离由margin决定，属于同一个bfc的相邻的兄弟元素的外边距相遇会发生合并<br><br><span class="hljs-bullet">*</span> 开启bfc的元素不会被浮动元素所覆盖（外界不会影响bfc）<br><span class="hljs-bullet">*</span> 开启bfc的元素内的第一个子元素和父元素（开启了bfc）外边距不会重叠(子元素的外边距不会冲出父元素，不会bfc外界产生影响)<br><span class="hljs-bullet">*</span> 开启bfc的元素可以包含浮动的子元素，即计算bfc的高度时候浮动元素也参与计算，不会因浮动造成高度塌陷，即清除了浮动的影响<br><br>开启bfc的方式：因为bfc要通过其他属性间接开启，会有一些副作用<br><br><span class="hljs-bullet">-</span> 根元素 有的地方说跟元素是html，有的说是body<br><br><span class="hljs-bullet">*</span> 给元素设置浮动即 float值非none ； 开启bfc的副作用浮动元素脱离文档流，会影响页面布局<br><br><span class="hljs-bullet">*</span> 将元素转换为行内块元素 dispaly：inline-block或dispaly：flex等；副作用：设置元素为inline-block的宽度会变化为靠内容撑开<br><br><span class="hljs-bullet">*</span> 给元素的设置overflow属性，属性值不是visited（hideen，scroll，auto）<br><br>  常使用overflow：hidden，开启bfc可以使其包含浮动的元素；副作用相对较少<br><br><span class="hljs-bullet">-</span>  绝对定位元素，position的值为absolute，fixed；即position的值不是static或者relative；副作用：脱离文档流<br><br>浮动布局的注意点：<br><br><span class="hljs-bullet">*</span> 先用在标准流之中的父元素在页面中确定位置，在让子元素浮动<br><span class="hljs-bullet">*</span> 一个盒子中有多个盒子，一个子元素浮动了，那么其他元素也应该浮动，为了防止发生问题<br><br><span class="hljs-section">#### 清除浮动：</span><br><br>因为浮动的元素会脱离文档流，会使其后面的元素上移，并会导致父元素塌陷，影响页面布局，所以要清除浮动<br><br>clear的作用：通过在被浮动影响的元素上设置clear属性，清楚浮动元素对自身的影响<br><br>Clear本质：是在设置了clear属性的元素上添加看不见但是真实存在的margin-top，这个margin-top的值就是要清楚的浮动元素的高度值。<br><br>clear取值：<br><br>left    清除左侧浮动元素的影响<br><br>right     清除右侧浮动元素的影响<br><br>both  清除左右侧中谁的高度大就按谁的清楚<br><br><span class="hljs-strong">**清除浮动的策略是闭合浮动，只让浮动在父元素内影响，不影响外面的元素**</span><br><br>方法：1:（隔墙法）给浮动的最后一个元素后面添加一个清除浮动的的空的块级标签，设置样式为clear：both；<br><br>​缺点：添加了额外的标签，结构化差，不推荐使用<br><br>​<span class="hljs-strong">**注意：添加的这个元素必须是块级元素**</span><br><br>​2:给父元素添加伪元素 after伪元素 或 双伪元素 （推荐使用）<br><br>​缺点：ie6 ，ie7不兼容:after<br><br></code></pre></td></tr></table></figure>父元素::after{    content："";    display:block;    clear:both;}<p>双伪类：在浮动元素的父元素上添加用来清除浮动的类名，谁用给谁加上即可<br>这个方式可以同时解决父元素高度塌陷问题和父子元素垂直外边距合并的问题<br>.clear-all::before,<br>.clear-all::after{<br>    content:””;<br>    display:table;<br>    clear:both;<br>}</p><p>&#x2F;&#x2F;？？<br>:clearfix{<br>    *zoom:1<br>}<br>处理ie浏览器的兼容性问题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>​3:给父元素设置overflow属性，属性值可以是hidden｜auto｜scroll    <br><br>​缺点：无法显示溢出的部分<br><br><span class="hljs-strong">**注意**</span>浮动元素不能使用margin：0 auto实现水平居中，没有边偏移，没有z-index，定位元素比浮动元素的层级高可以压住浮动元素<br><br><span class="hljs-section">## position定位属性</span><br><br><span class="hljs-bullet">*</span> 作用：可以让元素自由的移动到页面中的任意位置，这点是标准流和浮动所不能实现的效果<br><br><span class="hljs-bullet">*</span> 使用方法：确定元素的定位模式，使用边偏移来确定移动的位置<br><br>1: 定位模式是通过css的position属性设定的，一共有4种定位模式<br><br><span class="hljs-bullet">*</span> position:static 静态定位，是元素默认的定位方式，即标准流，不需要设置，它没有偏移量<br><span class="hljs-bullet">*</span> position:relative 相对定位 <br><span class="hljs-bullet">*</span> position:absolute 绝对定位 <br><span class="hljs-bullet">*</span> position:fixed 固定定位<br><span class="hljs-bullet">*</span> position:sticky  粘滞定位<br><br>2:偏移量有4个属性<br><br>作用：元素设置定位以后，可以通过偏移量来移动元素的位置<br><br><span class="hljs-bullet">*</span> top  从顶端偏移量，即定位元素和定位位置（相对位置）上边的距离<br><br><span class="hljs-bullet">*</span> bottom  从底端偏移量<br><br>  定位元素垂直方向的位置由top和bottom两个属性来控制，通常情况下我们使用其中一个来移动元素在垂直方向的位置<br><br><span class="hljs-bullet">*</span> left 从左侧偏移量<br><br><span class="hljs-bullet">*</span> right 从右侧偏移量<br><br><span class="hljs-section">#### 相对定位</span><br><br><span class="hljs-bullet">*</span> 设置了相对定位的元素是相对自身原来在标准流中的位置进行偏移的<br><br><span class="hljs-bullet">*</span> 语法：position:relative；<br><br><span class="hljs-bullet">*</span> <span class="hljs-strong">**注意**</span>：<br><span class="hljs-bullet">  *</span> 设置了相对定位的元素是相对于自身在标准流中原来的位置偏移<br><span class="hljs-bullet">  *</span> 开启相对定位以后，如果不设置偏移量元素不会发生任何的变化<br><span class="hljs-bullet">  *</span> 相对定位的元素不会脱离文档流，在文档流中仍然保留其原位置，所以后面的元素不会占据其原位置<br><span class="hljs-bullet">  *</span> 相对定位没有脱离文档流，不会改变元素的性质，块级元素还是块级元素，行内元素行内元素<br><span class="hljs-bullet">  *</span> 相对定位会提高元素的层级，比浮动还高，其可以压住其他元素包括元素中的文字及图片<br><span class="hljs-bullet">  *</span> 因为其会占据原来的位置，不会影响页面布局。最常见的用法是使用相对定位的元素来嵌套绝对定位的元素（子绝父相）来进行页面布局<br>  <br>  ### 包含块（containing block）<br>  <br><span class="hljs-bullet">  -</span> 正常情况下，包含块就是离元素自身最近的祖先块级元素<br>  <br></code></pre></td></tr></table></figure>  <div><span><em>今天天气很不错</em></span></div>  em的包含块是div  <figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs nsis">  <br>  - 绝对定位的元素是相对于其包含块进行定位的<br>  <br>  绝对定位的包含块就是离他最近的开启了定位的祖先元素，如果所有祖先元素都没开启定位则根元素就是它的包含块，html（根元素，初始包含块）<br><br><span class="hljs-comment">#### 绝对定位</span><br><br>* 设置了绝对定位的元素是相对于离它最近的开启了定位的祖先元素进行移动的，如果其所有的祖先元素都没有开启定位，则相对于根元素定位<br><br>* 语法：position:absolute<br><br>* **注意：**<br>  <br>  * 设置了绝对定位的元素位置不会改变，要通过偏移量才可以移动<br>  <br>  * 如果其没有祖先元素或祖先元素没有定位，则相对于根元素（html）定位移动<br>  * 如果其祖先元素设置了定位（相对定位，绝对定位，固定定位中的一种），则相对于其**有定位的最近一级的祖先元素**进行定位偏移<br>  * 绝对定位的元素脱离了标准流并且不在占据标准流中的原来位置<br>  * 绝对定位会改变元素的性质，具有行内块元素的一些特点，行内元素可以设置宽高，块级元素的宽高靠内容撑开<br>  * 脱离文档流后其层级会升高比浮动还高，其可以压住其他元素包括元素中的文字及图片<br>  * 因为相对定位会占据原来的位置，不会影响页面布局。最常见的用法是使用相对定位的元素来嵌套绝对定位的元素（子绝父相）来进行页面布局。子绝父相主要是看是否需要占据页面中的位置<br><br><span class="hljs-comment">#### 固定定位</span><br><br>固定定位的元素是固定在浏览器可视窗口的某一位置不动，即该元素不会随着页面的滚动而滚动<br><br>语法：position:fixed；<br><br>**注意：**<br><br>* 相对于浏览器可视窗口偏移定位的。与其任何祖先元素都没有关系，无论祖先元素有没有设置定位<br><br>* 定位后不会随着页面滚动（html和视窗是不一样的，html会随内容的增加而变化）<br><br>* 固定定位可以看作是一种特殊的绝对定位，固定定位和绝对定位一样是完全脱离标准流的，不在占据其原位置<br><br>* 脱离文档流后其层级会升高比浮动还高，其可以压住其他元素包括元素中的文字及图片<br><br>  <br><br>**使用了position绝对定位和固定定位的元素，水平方向居中要使用偏移设置，使用margin：<span class="hljs-number">0</span> <span class="hljs-literal">auto</span>；不在起作用，水平居中时要使用偏移实现。**<br><br>**使用了相对定位的元素margin：<span class="hljs-number">0</span> <span class="hljs-literal">auto</span>；水平居中仍然起作用，会使边偏移设置的效果失效（与书写顺序无关）**<br><br>案例练习：<span class="hljs-number">1</span>： 绝对定位水平居中 <span class="hljs-number">2</span>: 固定在页面的版心<br><br>**定位扩展**：<br><br>设置了固定定位和绝对定位的元素同float元素一样具有类似于行内块元素的特点<br><br><span class="hljs-number">1</span>:块级元素如果没有设置宽度和高度。设置了固定定位和绝对定位后，大小变为有其内容撑开的大小<br><br><span class="hljs-number">2</span>:行内元素设置了固定定位和绝对定位后，可以直接设置宽度高度，无需显示模式的转换<br><br><span class="hljs-number">3</span>:脱标的元素（浮动，绝对定位，固定定位）不会发生边距合并的问题<br><br><span class="hljs-comment">#### 粘滞定位</span><br><br>pisition：sticky；<br><br>粘滞定位和相对定位的特点基本一致，不同的是粘滞定位可以在元素到达某个位置的时候将其固定<br><br>了解即可，有兼容性问题，ie浏览器不支持，此效果可以通过js实现<br><br><span class="hljs-comment">#### 定位元素水平布局</span><br><br>当元素开启定位以后，水平方向的布局等式就要加上<span class="hljs-literal">left</span>和<span class="hljs-literal">right</span>两个值，规则和文档流中的水平布局等式一样只不过多了两个值<br><br><span class="hljs-literal">left</span>+margin-<span class="hljs-literal">left</span>+border-<span class="hljs-literal">left</span>+padding-<span class="hljs-literal">left</span>+content+padding-<span class="hljs-literal">right</span>+border-<span class="hljs-literal">right</span>+margin-<span class="hljs-literal">right</span>+<span class="hljs-literal">right</span>=包含块的宽度<br><br>当发生过渡约束时即等式右边大于等式左边，如果<span class="hljs-number">9</span>个值中没有<span class="hljs-literal">auto</span>，则自动调整<span class="hljs-literal">right</span>值以使等式成立，如果有<span class="hljs-literal">auto</span>可自动调整<span class="hljs-literal">auto</span>的一项的值来使等式成立<br><br>可以设置的<span class="hljs-literal">auto</span>的值有，width，margin-<span class="hljs-literal">left</span>，margin-<span class="hljs-literal">right</span>，<span class="hljs-literal">left</span>，<span class="hljs-literal">right</span><br><br>因为<span class="hljs-literal">left</span>和<span class="hljs-literal">right</span>的默认值是<span class="hljs-literal">auto</span>，所以如果不知道<span class="hljs-literal">left</span>和<span class="hljs-literal">right</span>则等式不成立时，会自动调整这两个值<br><br><span class="hljs-comment">#### 定位元素垂直方向布局</span><br><br>定位元素垂直方向的布局等式也必须成立<br><br><span class="hljs-literal">top</span>+margin-<span class="hljs-literal">top</span>/<span class="hljs-literal">bottom</span>+b order-<span class="hljs-literal">top</span>/<span class="hljs-literal">bottom</span>+padding-<span class="hljs-literal">top</span>/<span class="hljs-literal">bottom</span>+height+<span class="hljs-literal">bottom</span>=包含块的高度<br><br>给以开启了定位的元素设置在父元素中水平垂直居中(fixed定位则相对于视窗水平垂直居中)<br><br></code></pre></td></tr></table></figure>div{  width:200px;  height:200px;  background:red  position:absolute;  left:0;  right:0;  top:0;  bottom:0;   margin:auto;  //水平方向的marigin为auto水平居中，垂直方向的margin为auto垂直居中}<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><br><br><br><br>#<span class="hljs-meta"># z-index定位层级</span><br><br>定位元素的层级默认都是一样的，如果元素的层级都一样的话则优先显示结构中靠下的（后来者居上）<br><br>z-index属性用来控制定位元素显示的层级顺序（在z轴上的层叠顺序）<br><br>* 默认值是<span class="hljs-keyword">auto</span>；<br><br>* 只有定位元素才有z-index<br><br>* z-index属性值必须是整数（负值，正值，<span class="hljs-number">0</span>），且不能带单位，可以是负值但是负值用起来会有很多问题，不讲<br><br>* z-index属性数值越大，显示顺序越靠上，数值相同则按照书写顺序后来居上<br><br>* 祖先元素的层级再高也盖不住它里面的后代元素<br><br>  <br><br>  **注意**浮动元素不能给定宽的块状元素使用margin：<span class="hljs-number">0</span> <span class="hljs-keyword">auto</span>实现水平居中，没有边偏移，没有z-index，定位元素比浮动元素的层级高可以压住浮动元素<br><br>  浮动元素脱标后可以压住标准流中的盒子，但是不会压住元素内的文字即图片，可以用来实现文字环绕的效果<br><br>  position定位（相对，绝对，固定）后的元素可以压住标准流中的盒子，浮动元素及盒子里的内容<br><br>#<span class="hljs-meta"># display（显示）</span><br><br>作用：用来设置元素的显示模式，实现元素显示模式的转换<br><br>display:<span class="hljs-built_in">inline</span>(默认值) 将元素设置为行内元素<br><br>display:block 将元素设置为块级元素<br><br>display:<span class="hljs-keyword">inline</span>-block  行内块元素，可以设置宽高属性，但是又不会独占一行<br><br>display:none   将元素隐藏，隐藏后元素不再占据原位置，但是在页面结构中并没有删除该元素<br><br>#<span class="hljs-meta"># visibility 可见性属性</span><br><br>用来设置元素的显示状态，即控制元素可见或不可见，其隐藏的元素在页面中仍然占据原来的位置<br><br>visibility：visibility  默认值，元素可见<br><br>visibility：hidden   元素不可见，但是依旧占据原来的位置<br><br>#<span class="hljs-meta"># overflow 溢出属性</span><br><br>作用：规定元素内容溢出元素框时发生的事情<br><br>取值：visible 默认值 不剪切内容，无滚动条<br><br>​hidden 将溢出的内容隐藏掉，内容实际依旧存在结构中，只是隐藏掉了<br><br>​scroll   无论内容是否溢出，显示水平和垂直方向两个滚动条<br><br>​<span class="hljs-keyword">auto</span>   根据内容来决得是否显示滚动条及显示哪个方向的滚动条<br><br>​           overlay。滚动条压在页面上面，不占据页面宽度（有兼容性问题）<br><br>overflow-x    属性<br><br>overflow-y    属性<br><br>over-flow只作用在定高的块状元素上<br><br>## 字体图标<br><br>字体的优点：矢量，不会失真，可以修改颜色，比图片存储小<br><br>iconfont 显示的是图标，实际是字体，放大缩小不会失真，可以设置大小及颜色<br><br>阿里妈妈字体图标库，免费 。推荐<br><br>#<span class="hljs-meta"># cursor 鼠标样式</span><br><br>作用：设置鼠标在桌面上的光标形式<br><br>cursor：取值<br><br>* <span class="hljs-keyword">default</span> 默认样式是小白箭头<br>* pointer  小手<br>* text 文本<br>* move 移动方块<br>* no-allowed 禁止<br><br>#<span class="hljs-meta"># outline 边框线</span><br><br>给表单元素去掉默认的蓝色边框   使用方式和border一样但是outline不影响页面布局<br><br>outline：<span class="hljs-number">0</span>或 outline:none;<br><br></code></pre></td></tr></table></figure>input,textarea{    outline:none;}<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>禁止拖拽文本域textarea{    resize:none;}<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>### <span class="hljs-attribute">vertical-align</span><br><br>作用：常用来设置图片或者表单（行内块元素）和文字垂直对齐方式（而不是元素在父元素中的垂直对齐方式<span class="hljs-number">0</span><br><br>作用于行内元素(a,span)和行内块元素（<span class="hljs-selector-tag">img</span>,<span class="hljs-selector-tag">input</span>）<br><br>基线：<br><br>基线的位置是不固定的，文本之类的行内元素的基线是字符x的下边缘<br><br><span class="hljs-selector-tag">img</span>图片的基线是图片的下边缘<br><br>在行内块元素inline-block的基线是分两种情况<br><br>- 如果行内块元素中有内联元素（文字）则基线是最后一行内联元素的基线<br>- 如果行内块元素内没有内联元素或者该行内块元素<span class="hljs-attribute">overflow</span>不是visible，其基线就是<span class="hljs-attribute">margin</span>的边缘<br><br><span class="hljs-attribute">vertical-align</span>：<br><br>文字默认是在基线上排列的，不过也要根据字体的设计，有的设计的文字就不在基线上，基线只是一个参考，看不见却真实存在，基线是英文的基线对于我们中文来说并不适应，算是一个小的bug<br><br>* baseline 默认值   和文字的基线对齐  子元素的基线和父元素的基线对齐<br>* <span class="hljs-attribute">top</span> 子元素的顶端和父元素的顶部对齐<br>* middle 子元素的中线和父元素中的小写的x的中线对齐<br>* <span class="hljs-attribute">bottom</span> 子元素的低线和父元素的低部对齐<br><br>  <span class="hljs-attribute">vertical-align</span>：<span class="hljs-number">10px</span>，在默认值的基础上向上走<span class="hljs-number">10px</span>（也可以设置负值）<br><br></code></pre></td></tr></table></figure>div{  width:500px;  font-size:50px;  border:1px solid red;}span{    font-size:20px;    border:1px solid blue;    vertical-align:middle;}<div>  今天天气很不错 helloyx  <span>hello</span><div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>常见案例是，图片在div中底部有一条缝隙，是因为图片是行内块元素，行内块元素的<span class="hljs-keyword">vertical</span>-align默认和文字的基线对齐。（因为基线不是最底端所以低端有一个缝隙）<br><br>解决方法是：<span class="hljs-number">1</span>:将图片的<span class="hljs-keyword">vertical</span>-align属性值改为除基线外的其他值<br><br>​<span class="hljs-number">2</span>:将图片转换为块级元素<br><br>**注意：**文字基线图<br><br><br><br><br><br>css的<span class="hljs-keyword">vertical</span>-align可以设置td单元格内的元素垂直方向的对齐，不单单只是文字的在td标签上的对齐<br><br>（<span class="hljs-keyword">vertical</span>-align一般只是作用在行内元素，文本，行内块元素在垂直方向的对齐方式，但是对于td标签或者通过<span class="hljs-keyword">display</span>：table-cell转化td单元格的标签可以通过<span class="hljs-keyword">vertical</span>-align属性设置单元格内的元素的垂直对齐方式，可以给一个块级元素转化为diaplay：table-cell为单元格元素，就可以使用<span class="hljs-keyword">vertical</span>-align：top｜middle｜bottom来设置其里面元素在垂直方向的对齐方式了，但是这种方式很少使用）<br><br>块级元素在父元素内：<br><br>​水平居中：margin：<span class="hljs-number">0</span> auto；<br><br>​    垂直居中：将父元素转化为单元格并设置<span class="hljs-keyword">vertical</span>-align：middle       定位<br><br>行内元素，文字，图片在父元素内：<br><br>​水平居中：text-align：<span class="hljs-keyword">center</span><br><br>​垂直居中：<span class="hljs-built_in">line</span>-height等height     <span class="hljs-keyword">vertical</span>-align:middle并将父元素转换为单元格<span class="hljs-keyword">display</span>:table-cell<br><br><br><br>## css初始化<br><br></code></pre></td></tr></table></figure>*{  margin:0;  padding:0;}li{    list-style:none;}img{ border:0;  照顾低版本浏览器 如果图片外包含了链接会有边框的问题 vertical-align:middle;  取消图片底布有空隙的问题}button{ cursor:pointer;}a{  color:#666;  text-decoration:none;}<p>等…查看文档</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-section">## css3新增语义化标签</span><br><br>块元素主要是用来布局的，就是将我们页面分为一块一块的<br><br><span class="hljs-bullet">*</span> header 头部标签 一个页面中可以使用多次<br><br><span class="hljs-bullet">*</span> main  页面的主体部分， 一个页面只能用一次<br><br><span class="hljs-bullet">*</span> footer 尾部标签 一个页面中可以使用多次  head和footer可以表示整个页面头部和尾部，也可以变表示网页中某一个部分的头部和尾部<br><br><span class="hljs-bullet">*</span> nav 导航标签 nav导航航海家的意思  一个页面可以使用多次<br><br><span class="hljs-bullet">*</span> aside 侧边栏标签，和主体相关的其他内容<br><br><span class="hljs-bullet">*</span> article 内容标签，表示一个独立的文章<br><br><span class="hljs-bullet">*</span> section 定义文档某个区域 表示一个独立的区域，上面的标签都不能表示的时候可以使用section<br><br><span class="hljs-bullet">*</span> 这些标签在显示上没有区别，只是用来区分语义的，但是实际上使用最多的还是div和span<br><br>  div 没有语义，用来便表示一个区块，是我们使用最多的布局元素<br><br>  span 没有语义，行内元素，用来在页面中选中文字<br><br>  <br><br>  查文档看图<br><br>  <span class="hljs-strong">**注意**</span><br><br><span class="hljs-bullet">  *</span> 在ie9中需要将这些标签转化为块级表签<br><span class="hljs-bullet">  *</span> 这些标签主要是针对搜索引擎的<br><span class="hljs-bullet">  *</span> 在移动端经常使用<br><span class="hljs-bullet">  *</span> 这些标签在页面中可以多次使用，包括header<br><br><span class="hljs-section">## css新增的表单属性</span><br><br><span class="hljs-bullet">*</span> placeholder=&quot;提示文本&quot; 表单默认信息<br><br><span class="hljs-bullet">*</span> multiple=&quot;multiple&quot; 可以多选文件提交<br><br><span class="hljs-bullet">*</span> autofocus=&quot;autofocus&quot;  页面加载完成后自动聚焦到指定表单<br><br><span class="hljs-bullet">*</span> required=&quot;required&quot;  必填项<br><br><span class="hljs-bullet">*</span> autocomplete 值为 on或off  <br><br></code></pre></td></tr></table></figure><p>  input::placeholer{<br>      color:blue;<br>      font-size:14px;<br>  }<br>  对表单占位符样式修改<br>  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><br><br><br><span class="hljs-comment">## Css3 新增 属性选择器</span><br><br>作用：属性选择器可以根据元素已有的属性选择相应的元素，这样就不用在借助id或类选择器<br><br>* E[att]   选择具有att属性的E元素<br><br>* E[att=val]   选择具有att属性且属性值为val的E元素<br><br>* ....其他的属性选择器带学生看，了解即可<br><br>  **属性选择器和类选择器，伪类选择器一样，权重为<span class="hljs-number">10</span>**<br><br><br><br><span class="hljs-comment">## Css3 结构伪类选择器</span><br><br>作用：结构伪类多用于选择将父元素中的子元素<br><br>* <span class="hljs-symbol">:first-child</span><br><br>```父E <span class="hljs-symbol">:first-child```</span>  选择父元素中第一个子元素<br><br>```父E <span class="hljs-symbol">p:</span>first-child ``` 还可以在<span class="hljs-symbol">:first-child</span>前加上对另一个选择器用于验证。如果第一个子元素是p标签，则将其选择出来。如果第一个子元素不是p标签则没有元素被选择出来。<br><br>  此方法会将所有子元素进行排序，先选择<span class="hljs-symbol">:first-child</span>，再与p进行校验<br><br>* <span class="hljs-symbol">:last-child</span> <br><br>  选择父元素的最后一个子元素，用法同：first-child一样<br><br>*  <span class="hljs-symbol">:nth-child</span>(n)      ntn翻译第n个<br><br>  用作：选择父元素中的一个或多个特定的子元素<br><br>  n有多种取值方式，n可以是数字，关键字和公式<br><br>  * n是数字时，将父元素中的第n个子元素选择出来，数字从<span class="hljs-number">1</span>开始<br><br>  * n是关键取值：<span class="hljs-number">1</span><span class="hljs-symbol">:even</span>偶数    <span class="hljs-symbol">:nth-child</span>(even)选择父元素中的偶数子元素<br><br>    ​<span class="hljs-number">2</span><span class="hljs-symbol">:odd</span> 奇数     <span class="hljs-symbol">:nth-child</span>(odd) 选择父元素中的奇数子元素<br><br>  * n取值为公式（n是由<span class="hljs-number">0</span>开始计数的每一次+<span class="hljs-number">1</span>，即 <span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span>...，但是第<span class="hljs-number">0</span>个子元素或者超出了元素的个数则会被忽略）<br><br>    常见公式：<span class="hljs-number">2</span>n 选择偶数子元素<br><br>    ​<span class="hljs-number">2</span>n+<span class="hljs-number">1</span> 奇数<br><br>    ​<span class="hljs-number">5</span>n  <span class="hljs-number">5</span>的倍数<br><br>    ​n+<span class="hljs-number">5</span> 从<span class="hljs-number">5</span>开始<span class="hljs-number">5</span>以上的子元素直到最后。 即 <span class="hljs-number">0</span>+<span class="hljs-number">5</span>+<span class="hljs-number">5</span> ，<span class="hljs-number">1</span>+<span class="hljs-number">5</span>=<span class="hljs-number">6</span> <span class="hljs-number">2</span>+<span class="hljs-number">5</span>=<span class="hljs-number">7</span><br><br>    ​-n+<span class="hljs-number">5</span>  从<span class="hljs-number">5</span>开始<span class="hljs-number">5</span>以下的子元素直到第一个<br><br>* <span class="hljs-symbol">E:</span>last-of-type <span class="hljs-symbol">E:</span>first-of-type   <span class="hljs-symbol">E:</span>nth-of-type 指定类型E的第n个元素<br><br>  会将父元素中的所有E类型的元素进行排序，再按<span class="hljs-symbol">:first-child</span>选择子元素<br><br>  **注意：**类选择器，伪类选择器，属性选择器权重为<span class="hljs-number">10</span><br><br><br><br><span class="hljs-comment">## 伪元素选择器</span><br><br>作用：在某标签中通过css的方式添加新的表签，这个新添加的标签不是html标签在文档树结构中找不到，但是却可以起到一样的效果，从而简化html的结构<br><br><span class="hljs-comment">#### ::before  ::after</span><br><br>格式：<br><br>* E::before&#123; &#125; <br><br>  在标签E内容最前面添加伪元素，该伪标签是E的子标签<br><br>* E::<span class="hljs-keyword">after</span>&#123; &#125;<br><br>  在标签E内容最后面添加伪元素，该伪标签是E的子标签<br><br>**注意：**<br><br>::before 和::<span class="hljs-keyword">after</span>创建的元素是行内元素<br><br>::before 和::<span class="hljs-keyword">after</span>伪元素必须有 content=“标签体”<br><br>伪元素和标签选择器一样权重是<span class="hljs-number">1</span><br><br>伪元素常用场景，清除浮动<br><br>清除浮动的本质是闭合浮动<br><br>* 额外标签法，在最后一个浮动元素的后面创建一个空的块级元素，给这个元素设置clear：both<br><br>* 给浮动元素的父元素设置overflow：hidden<br><br>* 给浮动元素的父元素设置 ::<span class="hljs-keyword">after</span>伪元素<br><br>  ```父元素::<span class="hljs-keyword">after</span>&#123;<br>  父元素::<span class="hljs-keyword">after</span>&#123;<br>  <span class="hljs-symbol">content:</span><span class="hljs-string">&#x27;&#x27;</span>;  伪元素必备属性<br>  <span class="hljs-symbol">display:</span>block;  伪元素是行内元素，将其改为块级元素，额外标签法插入的必须是块级标签<br>  height：<span class="hljs-number">0</span>；  使伪元素不显示<br>  visibility：hidden； 使伪元素不显示<br>  clear：both； 清除浮动<br>  &#125;<br></code></pre></td></tr></table></figure></p><ul><li><p>双伪元素清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">父元素<span class="hljs-selector-pseudo">::before</span>,父元素<span class="hljs-selector-pseudo">::after</span>&#123;<br><span class="hljs-attribute">content</span>：&quot;&quot;;<br><span class="hljs-attribute">display</span>:table;  将伪元素改为块级元素并在一行显示，如果改为block的话，两个块级元素没法在一行显示<br>&#125;<br>父元素<span class="hljs-selector-pseudo">::after</span>&#123;<br><span class="hljs-attribute">clear</span>:both;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><p>后两种使用伪元素清除浮动的方法本质上是额外标签法的升级优化，简化了html结构</p><h3 id="其他的伪元素"><a href="#其他的伪元素" class="headerlink" title="其他的伪元素"></a>其他的伪元素</h3><p>::first-letter   表示第一个字母</p><p>::first-line 表示第一行</p><p>::selection  表示用户使用鼠标选中的内容</p><h2 id="filter-（滤镜）属性"><a href="#filter-（滤镜）属性" class="headerlink" title="filter （滤镜）属性"></a>filter （滤镜）属性</h2><ul><li><p>作用：filter定义了元素的可视效果，模糊 饱和度，常用于img。ie不兼容</p></li><li><p>取值：none（默认）</p><p>​blur(3px) 函数。作用：给图片设置模糊的效果，blur(0)是个函数，里面的参数取值越大，图片越模糊，参数为0是不模糊，参数不能是百分比</p></li></ul><p>常用场景：毛玻璃效果</p><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><p>给元素设置透明度。opcity  翻译不透明</p><p>opacity：0.7       </p><p>0是完全透明，1是完全不透明</p><h2 id="clac-函数"><a href="#clac-函数" class="headerlink" title="clac()函数"></a>clac()函数</h2><p>给元素的属性设置动态值，calc()是个函数，使用通用的数学运算规则</p><ul><li><p>可以使用 + - * 运算，注意在使用+ -是运算符号前后要加空格，使用* &#x2F; 运算符时可以不加空格，但是建议加上</p></li><li><p>可以使用白分比，px，em，rem等单位</p><p>移动端浏览器有兼容性问题</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">height</span>:<span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span>-<span class="hljs-number">20px</span>);<br></code></pre></td></tr></table></figure><h1 id="总结-元素水平垂直居中汇总"><a href="#总结-元素水平垂直居中汇总" class="headerlink" title="总结 元素水平垂直居中汇总"></a>总结 元素水平垂直居中汇总</h1><p>文档流中的行内元素及文字</p><p>​              水平居中：text-align：center；  </p><p>​              垂直居中：line-height 等于height  此方式不能使行内块元素垂直居中</p><p>​                      display：table-cell 且 vertical-align：middle 此方法可以使在文档流中的行内元素，行内块元素，块级元素都垂直居中，脱离文档流则不可以了</p><p>​        文档流中的行内块元素</p><p>​             水平居中 ：text-align：center</p><p>​             垂直居中：display：table-cell 且 vertical-align：middle 此方法可以使在文档流中的行内元素，行内块元素，块级元素都垂直居中，脱离文档流则不可以了</p><p>​        文档流中的块级元素</p><p>​            水平居中：指定在文档流中的宽度的块级元素 margin：0 auto； </p><p>​            垂直居中：display：table-cell 且 vertical-align：middle</p><p>​        定位可以给任意显示模式的元素设置，设置了绝对定位，固定定位的元素的脱离了文档流后就不在区分元素的性质了，可以通过偏移量来自动移动元素的位置，自然可以使元素垂直水平居中了</p><p>​        定位元素水平垂直居中的方法：</p><p>​步骤1： left：50%（百分比是相对于父元素的百分比）</p><p>​             步骤2：  margin-top：-自身宽度的一半  margin-top：-自身高度的一半 </p><p>​                                   但是当元素自身宽高没有设置固定值，而是随内容撑开宽高时可以使用 tansform：translateX(-50%) translateY(-50%); 因为transform的translate位移的百分比是相对于元素自身的百分比</p><p> 扩展：通过定位设置元素水平垂直居中方法 </p><p>​步骤1：元素指定宽高值且设置绝对或固定定位</p><p>​                步骤2: top：0；</p><p>​bottom：0；</p><p>​left：0；</p><p>​right：0；</p><p>​margin：auto；</p><h2 id="transition-过渡-属性"><a href="#transition-过渡-属性" class="headerlink" title="transition(过渡)属性"></a>transition(过渡)属性</h2><ul><li>作用：为元素样式的改变添加过度的效果，提升用户体验  通常配合:hover使用   网络搜索sprite animation图片</li></ul><ul><li>transiton是一个简写属性</li></ul><p>​      transtion：需要添加过度效果的属性名 花费的时间 运动曲线 延迟时间；</p><ul><li><p>transition-property （property性能）需要添加过度效果的属性名 ，多个属性名之间使用逗号 ，隔开 </p><p>想要所有属性都有过渡效果，使用all，all是默认值，可以省略不写</p><p>大部分样式都支持过渡效果，注意过渡时必须从一个有效值向另一个有效值进行过渡。比如width：0 至width：100px；（使用百分比也可以）但是不能是auto，auto没法确定具体的值</p><p>例如width height background；</p><p>transition-property：width, height,background;</p></li><li><p>Transsition-duration 过度效果花费的时间  (duration 持续)</p><p>即过度从开始到完成的时间，单位是秒 s 或者毫秒ms，单位不能省略  1s&#x3D;1000ms</p></li><li><p>Transition-timing-function  过渡的时序函数 运动曲线 （可省略）</p><ul><li><p>ease 慢速开始先加速，再减速  默认值     （ease减缓，下降）</p></li><li><p>linear 匀速运动 </p></li><li><p>ease-in 加速运动 </p></li><li><p>ease-out 减速运动 </p></li><li><p>ease-in-out 先加速后减速 </p></li><li><p>steps()  分步执行过渡效果</p><p>steps(2,start) 可以设置一个第二个值</p><p>end 在时间的结束执行过渡（默认值），start，在时间开始执行过渡</p></li><li><p>cubic-bezier() 来指定时序函数。 https：&#x2F;&#x2F;cubic-bezier.com</p></li></ul></li><li><p>transition-delay 过渡效果的延迟时间，即等一段时间后再执行过渡</p><p>单位是s ，2s，即2s后开始. 可省略</p></li></ul><p><strong>注意：</strong>谁做过渡就将transiton属性加给谁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs \">.father&#123;<br>  width: 400px;<br>  height: 500px;<br>  background: #000;<br>  transition:all 2s;<br>&#125;<br>.father:hover&#123;<br>  width:600px;<br>  background: palevioletred;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果想要多个属性过渡且过渡设置不同可以分开写，并使用英文逗号分隔 ‘,’</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span>&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#000</span>;<br>  <span class="hljs-attribute">transition</span>:width <span class="hljs-number">2s</span>,background .<span class="hljs-number">3s</span>;<br>&#125;<br><span class="hljs-selector-class">.father</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">background</span>: palevioletred;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="transform-转换-2d转换"><a href="#transform-转换-2d转换" class="headerlink" title="transform(转换)2d转换"></a>transform(转换)2d转换</h2><ul><li><p>作用：transform翻译是使…变形,css中transform就是通过css来改变元素的形状和位置（实现元素的移动，旋转，缩放等效果），元素变形不会影响到页面布局</p><p>transform只是一个大的属性，但是元素具体怎么变形还要通过transform的值来决定，tansform的值都为函数，（什么是函数我们先不深究，记住带括号的就是函数，就像之前饿url()就是函数）</p></li></ul><h3 id="translate-位移"><a href="#translate-位移" class="headerlink" title="translate 位移"></a>translate 位移</h3><p>格式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(x,y);<br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3d</span>(x,y，z); <span class="hljs-number">3</span>d位移<br><span class="hljs-attribute">transform</span>：<span class="hljs-built_in">translateX</span>(x); x轴位移，平移<br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(y); y轴<br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateZ</span>(y); z轴平移 <br><span class="hljs-attribute">transform</span>：<span class="hljs-built_in">translateX</span>(x) <span class="hljs-built_in">translateY</span>(y);在x，y轴都移动<br></code></pre></td></tr></table></figure><ul><li><p>translate()函数 ，参数x，y分别代表了元素在水平方向和垂直方向的移动的距离，中间使用逗号分开</p></li><li><p>x y 可以采用数字加单位的精确值，也可以是百分比，百分比是相对于元素自身的宽度或高度和计算的</p><p>采用margin移动的百分比是相对于父元素的宽度计算的，采用定位移动的百分比是相对于父元素的宽度或高度计算的</p></li></ul><ul><li><p>tranform：translateZ();元素在z轴平移即调整元素在z轴的位置，即调整元素和人眼之间的距离，向z轴正值方向了移动的距离越大，即元素离人越近，z轴平移属于立体效果（近大远小），默认情况下网页是不支持透视的，如果要看到近大远小的效果，必须设置网页视距，视距设置在有3d属性的元素上（给不同的元素上设置视距会有不同的效果）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">transform</span>：<span class="hljs-attribute">perspective</span>（<span class="hljs-number">1200px</span>）<span class="hljs-built_in">translateZ</span>(<span class="hljs-number">800px</span>)<br>  <span class="hljs-comment">// 设置当前网页的视距是1200px，即人眼距离网页（屏幕）的距离</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>使用此移动方式不会影响其他元素的位置</p></li><li><p><strong>此属性对行内元素不起作用</strong></p><p>案例：让元素水平垂直居中，替代margin：0 auto的方式</p></li><li><h2 id="3d转换"><a href="#3d转换" class="headerlink" title="3d转换"></a>3d转换</h2><p>三维空间就是立体空间，在立体空间中有三个坐标轴，分别是x轴，y轴，z轴</p><ul><li>x轴，水平方向向右，x轴左边为负值，右边为正值</li><li>y轴，垂直向下，下边为正值，上边为负值</li><li>z轴，z轴垂直于x，y轴组成的平面，向外是正值，向里是负值</li></ul><h3 id="3d位移"><a href="#3d位移" class="headerlink" title="3d位移"></a>3d位移</h3><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3d</span>(x,y,z);<br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3dX</span>(x); <br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3dY</span>(y);<br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3dZ</span>(z);<br></code></pre></td></tr></table></figure><ul><li><p>其中x，y，z指在轴上要移动的距离；</p><p>x，y是可以采用px，百分比，百分比是相对于元素自身计算的百分比</p><p>z轴的值一班都是采用px，</p><p>x，y，z不能省略，如果没有就写0</p></li><li><p>3d移动后看不出变化，因为是要陪和透视属性一起使用</p></li></ul><p>笔记不详细</p><p>3d旋转，透视，3d呈现没看呢</p><h3 id="perspective-透视"><a href="#perspective-透视" class="headerlink" title="perspective 透视"></a>perspective 透视</h3><p>如果想要在网页中产生3d的效果需要用到透视，可以理解成3d物体投影在2d平面上</p><p>透视我们称之为视距，就是人的眼睛到屏幕的距离</p><p>距离视觉点（眼睛）越近的物体在电脑平面成像越大，越远成像越小</p><p><strong>透视属性要写在被观察元素的父盒子上</strong></p><p><strong>物体在z轴上向外走的距离越远，即离我们的眼睛越近，距离屏幕的距离越远，我们看到的物体就越大</strong></p><p>透视的单位是像素</p></li></ul><h3 id="rotate-旋转"><a href="#rotate-旋转" class="headerlink" title="rotate 旋转"></a>rotate 旋转</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotate</span>(度数);<br>作用：<span class="hljs-number">2</span>d旋转作用是让元素在平面内顺时针或者逆时针旋转<br></code></pre></td></tr></table></figure><ul><li><p>度数单位是deg    transform:rotate(30deg)</p><p>单位是turn  transform：rotate(0.5turn)  旋转0.5圈</p></li><li><p>默认情况下是以元素的中心为旋转点旋转，顺时针旋转是正值，逆时针旋转是负值，旋转一周是360deg</p></li></ul><p>可以单独设置让元素沿着x,y,z轴旋转指定的角度</p><p>transform：rotateX()  rotateY().  rotateZ()</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>)  <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">180deg</span>);<br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateY</span>(<span class="hljs-number">180deg</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>);<br>注意位移旋转写的顺序不一样，效果也不一样<br><br><br><span class="hljs-attribute">transform</span>：translateY(<span class="hljs-number">180deg</span>);<br>元素旋转到背面后是否显示元素的背面<br><span class="hljs-attribute">backface-visibility</span>:hidden; 不显示背面<br><span class="hljs-attribute">backface-visibility</span>:visible; 显示背面<br></code></pre></td></tr></table></figure><h2 id="transform-origin-转换中心点"><a href="#transform-origin-转换中心点" class="headerlink" title="transform-origin 转换中心点"></a>transform-origin 转换中心点</h2><p>作用：设置元素的变形的原点。 中心点. origin 起源</p><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform-origin</span>:x y;<br></code></pre></td></tr></table></figure><ul><li>默认的转换中心点是元素的中心点（50% 50%），百分比是相对于元素自身的宽度或高度和计算的</li><li>x y可以是精确值（数值px） ，也可以是百分比，方位名词</li></ul><h3 id="transform之缩放-scale"><a href="#transform之缩放-scale" class="headerlink" title="transform之缩放 scale()"></a>transform之缩放 scale()</h3><ul><li><p>作用在；设置元素的放大和缩小</p></li><li><p>格式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">transform</span>：<span class="hljs-built_in">scaleX</span>() 水平方向缩放<br><span class="hljs-attribute">transform</span>：<span class="hljs-built_in">scaleY</span>() 垂直方向缩放<br><span class="hljs-attribute">transform</span>:<span class="hljs-built_in">scale</span>(x,y);  水平和垂直双方向缩      放参数用,分隔<br></code></pre></td></tr></table></figure></li><li><p>x，y是元素宽度和高度的缩放倍数，没有单位</p></li><li><p>transform:scale(1,1); 缩放一倍 即没有缩放  x y的值一样时可以只写一个即transform:scale(1); </p></li><li><p>transform:scale(0.5); 小于1的值是缩小</p></li><li><p>使用此方式缩放元素的优点是：不影响其他元素，如果直接修改元素的宽高的话影响其他元素。</p></li><li><p>transform：scale()是可以通过transform设置缩放的中心点的,缩放是以转化中心点为缩放中心的</p></li></ul><h3 id="transform的简写"><a href="#transform的简写" class="headerlink" title="transform的简写"></a>transform的简写</h3><p>tansform可以将位移，旋转，缩放综合写，但是有顺序之分，在有位移的情况下要把位移放在最前面</p><p>transform：translate() scale() rotate()等;</p><p>因为旋转会影响元素的中心点，先旋转在位移元素会跑偏</p><h2 id="animition动画"><a href="#animition动画" class="headerlink" title="animition动画"></a>animition动画</h2><ul><li><p>作用：将定义好的动画绑定到元素上</p><p>动画和过渡类似，都可以实现一些动态的效果，不同的时过渡要在某个样式属性变化时才能触发，动画可以自动触发动态效果</p></li><li><p>动画的使用步骤：先定义动画，再绑定到调用动画的元素上</p><p>1:定义动画： @keyframes 关键帧    @不能省略</p><p>关键帧设置了动画执行的每一个步骤</p></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">@keyframes</span> 动画名&#123;<br><span class="hljs-number">0</span><span class="hljs-string">%&#123;   </span><br><span class="hljs-string">  样式声明   </span><br><span class="hljs-string">&#125;</span><br><span class="hljs-number">50</span><span class="hljs-string">%&#123;</span><br><span class="hljs-string"> 样式声明</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-number">100</span><span class="hljs-string">%&#123;</span><br><span class="hljs-string"> 样式声明</span><br><span class="hljs-string">&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>0%至100%是指的动画序列</p><p>0%（from）是动画的开始，100%（to）是动画的结束</p><p>使用百分比来划分动画花费的时间，我们可以将花费时间划分为任意多份，设置多个状态的变化</p><p>百分比要是整数，百分比就是总时间的划分</p><p>在@keyframes中规定某种动画样式，就能创建由当前样式逐渐改为新样式的动画效果</p><p>​2:调用动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">E&#123;<br><span class="hljs-attribute">animation</span>:动画名称 花费时间 运动曲线 延迟时间 动画播放次数 是否轮流反复播放动画 动画不播放时的样式；<br>&#125;<br></code></pre></td></tr></table></figure><p>animation是简写属性，里面的每一项属性都可以单独设置,简写也可以省略某些项</p><ul><li><p>无论简写还是单独设置，动画名称和花费时间是不能省略的</p><p>animation-name 要对元素绑定的关键帧的名字（动画名称）</p><p>animation-duration 动画花费的时间   duration 持续</p><p>animation-timing-function 动画运动曲线</p><p>animation-delay 动画延迟时间 </p></li><li><p>animation-iteration-count   定义动画应该播放的次数 </p><p> 取值 数值次数   或者  infinite  动画无限次播放</p></li><li><p>animation-direction （direction方向） 指定动画执行的方向 </p><p>取值：normal 默认值，动画正向播放 即 从from到to 每次都是这样</p><p>​reverse 动画反向播放 ，每次都是反着</p><p>​alternate  动画正着去反着回来  动画走回来而不是跳回来 要掌握</p><p>​alternate-reverse 动画先反着执行再正着执行</p></li></ul><ul><li><p>animation-fill-mode 动画不播方时（即动画完成时或者动画有一个延迟未开始时），要引用到元素的样式</p><p>取值：none 默认值 动画执行完毕元素回到原来的位置</p><p>​forwards 动画结束后停止在结束的位置 </p><p>​backwards 动画延时等待时，元素会处于开始位置</p><p>​both 结合了frowrads和backwards，动画会在两个方向上扩展动画属性</p></li></ul><ul><li><p>简写属性里不能包含animation-play-state 设置动画的执行状态</p><p>取值：running 默认值 动画执行</p><p>​            paused；暂停动画  此属性经常与鼠标等操作配合使用。要单独设置</p></li></ul><p>要掌握的属性：animation-fill-mode：forwards；动画结束后停在结束位置</p><p>​animation-direction：alternate  动画走回来而不是跳回来</p><p>可以给一个元素添加多个动画，使用英文,分隔</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">E&#123;<br><span class="hljs-attribute">animation</span>:动画名称<span class="hljs-number">1</span> 花费时间 运动曲线 延迟时间,动画名称<span class="hljs-number">1</span> 花费时间；<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="flex布局-flexible灵活的"><a href="#flex布局-flexible灵活的" class="headerlink" title="flex布局   flexible灵活的"></a>flex布局   flexible灵活的</h2><p>在传统的布局方式中我们常采用：在盒模型的基础上使用定位，浮动，display转换元素的显示模式，但是有些效果实现起来很不方便，w3c提出了解决方案使用flex布局，flex可以灵活，响应式的实现各种页面布局</p><p>flex是css中有一种布局手段，主要用来代替浮动来完成页面的布局，flex可以使元素具有弹性，让元素可以随着页面的大小的改变而改变</p><p>flex在pc端有兼容性问题（ie11或更低版本不支持或仅部分支持），多用于移动端开发，传统布局多用于pc端开发，pc端若不考虑兼容性也可以使用flex布局</p><p>要使用弹性盒，就要使用display属性将一个元素设置为弹性容器</p><p>弹性容器：</p><p>​display：flex 将元素设置为块级弹性容器，元素独占一行   用的较多</p><p>   display：inline-flex 将元素设置为行内弹性容器 元素可以和其他元素在同一行展示</p><p>弹性元素：</p><p>弹性容器里的直接子元素（亲儿子）是弹性元素（弹性项）</p><p>一个元素可以同时是弹性容器和弹性元素</p><p>注意：</p><ul><li><p>通过给父元素设置flex属性来控制子元素的排列方式</p></li><li><p>任何元素都可以采用flex布局，行内元素也可以指定为flex布局，行内元素采用了flex布局后可以直接设置宽高无需转换</p></li><li><p>当我们为父元素设置了flex布局后，子元素的float，clear，vertical-align属性将失效</p></li><li><p>被指定为flex布局的元素叫做flex容器，它里面的所有子元素就是flex项目，简称为项目</p></li></ul><p>flex相关的属性有的是要设置在父元素上的有的是要设置在子元素上的</p><h3 id="父元素设置的属性："><a href="#父元素设置的属性：" class="headerlink" title="父元素设置的属性："></a>父元素设置的属性：</h3><p>1:需要给父元素设置display：flex；就是知道这个盒子就是弹性容器，采用flex布局</p><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>取值： </p><ul><li>row  默认值 弹性元素在容器中水平排列，由左向右       主轴为水平方向，起点在左端</li><li>row-reverse  弹性元素在容器中水平排列，由右向左        主轴为水平方向，起点在右端。</li><li>column(列)  弹性元素在容器中垂直排列，自上而下     主轴为垂直方向，起点在上沿</li><li>column-reverse  弹性元素在容器中垂直排列，自下而上  主轴为垂直方向，起点在上沿</li></ul><p>作用：决定flex容器主轴的方向，弹性元素排列方向称为主轴（即项目排列的方向，子元素是根据主轴排列的），</p><p>与主轴垂直方向的称为侧轴</p><ul><li>flex布局的容器有两根轴主轴和侧轴，主轴和侧轴没有固定；默认情况下水平方向为主轴，垂直方向为侧轴，flex-direction可以转换主轴的方向，</li></ul><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>作用：设置子元素在主轴上的排列方式(如何分配主轴上的空白空间)</p><p><strong>使用该属性前一定要确定好哪个方式是主轴</strong></p><p>取值：</p><ul><li>flex-start：默认值 子元素在主轴的头部对齐</li><li>flex-end  子元素在主轴的尾部对齐</li><li>center 子元素在主轴上居中对齐</li><li>space-between 子元素在主轴上两端对齐，项目之间的间隔相等</li><li>space- around 每个子元素两侧的间隔相等，所以，项目之间的间隔比项目与两端的间隔要大一倍</li><li>space-evenly。 空白分布到元素的单侧  有兼容性问题</li></ul><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p>作用：默认情况子元素都在一条轴线上排列，flex-wrap属性指定当子元素在一行排不下时如何换行</p><p>取值：nowrap 默认值 子元素不自动换行，子元素会被压缩</p><pre><code class="hljs">      wrap   换行，第一行在上方  元素沿着副轴方向自动换行</code></pre><p>​  wrap-reverse 换行，第一行在下方 元素沿着副轴反方向换行</p><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>flex-flow是flex-direction和flex-wrap的简写属性。没有书写顺序</p><p><code>flex-flow:row wrap;</code></p><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><ul><li><p>作用：设置单行子元素在侧轴上的排列方式</p></li><li><p>取值：</p><p>flex-start： 侧轴的起点对齐</p><p>flex-end：侧轴的终点对齐</p><p>center：在侧轴的中点对齐</p><p>stretch 拉伸 默认值 在子元素没有设置高度或设为auto时，在侧轴上拉伸弹性元素使其占满整个容器的高度</p><p>baseline 弹性元素第一行文字基线对齐</p></li></ul><h4 id="align-centent"><a href="#align-centent" class="headerlink" title="align-centent"></a>align-centent</h4><ul><li><p>作用：设置多行子元素在侧轴上的对齐方式  多行即是子元素有换行的情况，该属性在子元素为单行的情况下不起作用</p></li><li><p>取值：</p><ul><li>flex-start： 侧轴的起点对齐</li><li>flex-end：侧轴的终点对齐</li><li>center：在侧轴的中点对齐</li><li>space- around 每根轴线两端的间隔相等，所以轴线与轴线之间的间隔比轴线与边框之间的间隔要大一倍</li><li>space-between 与侧轴两端对齐，轴线之间的间隔平均分配</li><li>stretch  拉伸 默认值，轴线占满整个侧轴</li></ul></li></ul><h3 id="设置在子元素（项目）上的属性"><a href="#设置在子元素（项目）上的属性" class="headerlink" title="设置在子元素（项目）上的属性"></a>设置在子元素（项目）上的属性</h3><h4 id="Flex-grow属性"><a href="#Flex-grow属性" class="headerlink" title="Flex-grow属性"></a>Flex-grow属性</h4><p>作用：定义弹性元素放大比例。即当父元素有多余空间时，弹性元素如何分配剩余空间，剩余空间是值父元素剪去那些已经设置尺寸元素后所剩下的空间</p><ul><li>使用flex-grow定义子元素在剩余空间所占的分数<ul><li><p>flex-grow取值：0|数字</p></li><li><p>flex-grow：0；表示该即是存在剩余空间，该子元素也不放大</p><ul><li>如果所有的子元素flex-grow的值都为1，则他们将等分剩余空间</li></ul><ul><li>如果有一个子元素flex-grow的值为2，其他的子元素flex-grow：1，则为2的子元素分配剩余空间时所占的剩余空间比其他子元素多一倍</li></ul></li></ul></li></ul><h4 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h4><p>作用：定义项目（子元素）缩小的比例，默认值为1；即在父元素中的空间不足的以容纳所有子元素时，弹性元素如何缩小  （弹性元素缩小的是根据flex-shrink和元素本身的大小来共同决定的，比较复杂不要深究）</p><p>格式：flex-shrink：numeber</p><ul><li>如果所有项目的flex-shrink属性值都为1，在空间不足时他们将等比例缩小。</li><li>如果有一个项目的flex-shrinks属性值为0，其他项目的值为1，在空间不足时前者不会缩小</li><li>负值对该属性无效</li></ul><h3 id="flex-basis-（可不讲）"><a href="#flex-basis-（可不讲）" class="headerlink" title="flex-basis  （可不讲）"></a>flex-basis  （可不讲）</h3><p>作用：设置弹性元素在主轴上的基础长度   就像一个弹簧的静止状态时的自身长度，如果设置了该属性，元素本身设置的宽高属性就没有作用了</p><p>当弹性容器的主轴为水平方向时，flex-basis决定了元素的元素的宽度</p><p>当弹性容器的主轴为垂直方向时，flex-basis决定了元素的元素的高度</p><p>默认值为auto，参考元素自身的高度或者宽度</p><p>如果flex-basis设置了一个具体的数值，则以该值为准</p><h3 id="flex简写属性"><a href="#flex简写属性" class="headerlink" title="flex简写属性"></a>flex简写属性</h3><p>flex属性时flex-grow flex-shrink flex-basis的简写属性</p><p>默认值为      flex:initial;     即表示：   flex:0 1 auto;</p><p>快捷键：     flex：auto；  即表示        flex:1 1 auto;</p><p>​     flex:none;      即表示        flex:0 0 auto;  不能放大，缩小即弹性元素没有弹性</p><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>作用：在元素是单行的情况下，允许某单个项目与其他项目在侧轴上的对齐方式不同，设置该项目自己在侧轴上的对齐方式。</p><p>对该单个项目而言，设置了aglin-self属性会覆盖父元素align-items的属性作用在它身上的属性</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">.item &#123;<br>  align-self: <span class="hljs-built_in">auto</span> | <span class="hljs-type">flex</span>-start | <span class="hljs-type">flex</span>-<span class="hljs-keyword">end</span> | <span class="hljs-type">center</span> | <span class="hljs-type">baseline</span> | <span class="hljs-type">stretch</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>默认值为auto，表示继承父元素align-items的属性，如果没有父元素，则等同于<code>stretch</code></li><li>属性值除了auto以外，其他的同align-items一样</li></ul><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>作用：定义弹性元素在页面上的排列顺序（前后顺序）</p><p>取值为数值     默认值为0，数值越小，排列的越靠前</p><ul><li>不改变html结构</li><li>可以有负值</li></ul><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><p>浏览器的私有前缀 ，css3的一些新增属性老板本的浏览器不一定能支持，为了各种浏览器兼容其老版本的所有新增样式要加私有前缀，比较新的浏览器无须添加</p><p>-moz-     firefox 浏览器私有前缀</p><p>-ms-      ie浏览器私有前缀</p><p>-webkit-     safari chrome 私有前缀</p><p>-o-  opera浏览器私有前缀</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">-moz-<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">16px</span>;        firefox 浏览器私有前缀<br><br>-ms-<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">16px</span>;         ie浏览器私有前缀<br><br>-webkit-<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">16px</span>;     safari chrome 私有前缀<br><br>-o-<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">16px</span>;            opera浏览器私有前缀<br></code></pre></td></tr></table></figure><p>移动端浏览器大多是webkit的内核，所以移动端处理webkit内核浏览器的兼容性问题即可，在移动端端我们可以放心的时候h5标签和css3样式 ，浏览器的私有前缀我们只要考虑-webkit-即可</p><p>Css3  box-sizing ，在pc端考虑兼容性就标准盒模型 不考虑就怪异盒模型 移动端可以直接怪异盒模型</p><p> 移动端的特殊样式要单独清理一下</p><p>点击高亮清除   -webkit-tap-highlight-color：transparent；</p><p>移动端浏览器默认的外观在ios上加上这个属性才能给按钮和输入框自定义样式</p><p>-webkit-appearance：none；</p><p>禁止长按页面时弹出菜单</p><p>img，a{-webkit-touch-callout:none;}</p><p>现在移动端手机的分辨率和屏幕尺寸大小不一</p><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><p>视口就是浏览器显示页面内容的屏幕区域，视口分为布局视口 视觉视口 和理想视口</p><p>一半移动端设备在早起为了使pc端的网页在移动端也可以显示全，所以都将布局视口分辨率设置为980px，这样pc端的网页大多在手机上可以基本呈现（早起的网站宽度一般都不会超过1000，980，990的宽度，没有做移动端适配的网站 ifeng.com），但是每个元素显示的很很小，一般默认用户可以手动缩放网页查看，这样的用户体验并不好，为了解决这个问题，大部分网站都会为移动端单独设计一套ui</p><p>视觉视口：就是用户在手机上可以看网页的区域，我们可以通过缩放操作视觉视口，但是不会影响布局视口，布局视口仍然保持原来的宽度</p><p>理想视口：为了使网页在移动端有最理想的浏览和阅读宽度而设定，对设备来讲，最理想的视口就是视觉视口，我们需要给我们的移动端页面手动添加meta标签来通知浏览器操作，meta标签的主要目的就是告诉浏览器布局视口的宽度和理想视口的宽度一致，也就是设备有多宽，我们的布局视口就有多宽</p><p>（展示页在移动端状态下设置了meta标签和不设置meta标签的不同状态）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">标准的viewport设置<br>&lt;meta <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0,maxmum-scale=1.0,minmum-scale=1.0,user-scalable=0&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>width设置的是viewport宽度，我们的布局视口的宽度等于设备的宽度（视觉视口的宽度），即实现了理想视口的状态</p><p>initial-scale 初始缩放比，大于0的数字 </p><p>maxmum-scale 允许的最大缩放比，大于0的数字 </p><p>minmum-scale 允许的最小缩放比，大于0的数字 </p><p>user-scalable  用户是否可以缩放，yes （1）或no（0）</p><p>视口就是屏幕中用来显示网页的区域</p><p>可以通过查看视口大小来观察css像素和物理像素的比值</p><p>默认情况下 视口宽度 1920px（css像素） 1920px（物理像素）此时是1:1</p><p>​通过对屏幕缩放，放大两倍 视口 960px （css像素） 此时的物理像素仍然是1920px，css像素和物理像素的像素比是 1:2</p><p>所以我们可以通过改变视口的大小，来改变css像素和物理像素的比值</p><p>不同的屏幕，单位像素的大小是不同的，像素越小屏幕就会清晰，智能手机的像素点远远小于计算机的像素点</p><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><p>先查看上面对长度单位中的像素知识点</p><p>pc端和早前的手机频幕（普通屏幕） 1css像素&#x3D;1物理像素</p><p>视网膜屏幕是一种显示技术，可以将更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕的显示的细腻程度</p><p>我们需要一个50<em>50的css像素的图片，直接放到手机中里，手机会放大2倍，即100 * 100 （使用100</em>100的物理像素点显示我们图片）图片显示变模糊，处理这种问题的方法时，我们设计的时候就设计一个100 * 100的图片，然后程序员在写css代码的时候，将图片的尺寸缩小为50 * 50（css像素），这样我们的网页在移动设备上显示的时候，移动再将图片放大两倍显示，即100*100 ，这样就和我们设计图设计的是一样了，这样就不会出现图片模糊的情况了（文字是矢量的放大或者缩小都不糊，背景颜色也不会）</p><p>（也就是使用倍图来提高图片质量，来解决高清设备中图片模糊的问题）</p><p>总结:我们准备的图片比我们实际需要的大2倍，这就是2倍图（通常是2倍图，还有3倍图，4倍图等）</p><p>常见的设计稿的是相对iphone6&#x2F;7&#x2F;8的2倍图 即750px的，3倍图为1125px；放弃一些不常见的极端屏幕</p><p>img标签和背景图片在使用倍图的时候，注意缩放的问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span>&#123;<br>  原始图片尺寸为<span class="hljs-number">100</span> * <span class="hljs-number">100</span><br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span>&#123;<br>原始图片尺寸为<span class="hljs-number">100</span> * <span class="hljs-number">100</span><br><span class="hljs-attribute">background-size</span>:<span class="hljs-number">50px</span> <span class="hljs-number">50px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>移动端制作方案 单独制作移动端页面 （常见） 或者响应式页面</p><h2 id="rem-1"><a href="#rem-1" class="headerlink" title="rem"></a>rem</h2><p>em是一个单位，是元素相对于元素自身字体大小的倍数</p><p>rem（root em）与em类似，是相对于html元素的字体大小的倍数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-selector-tag">html</span>&#123;<br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">10rem</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20rem</span>;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">10em</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">20em</span>;<br>  <span class="hljs-attribute">background</span>: black;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用rem单位的优点是：可以通过在html中设置字体大小来控制整个页面元素的大小</li></ul><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>产生原因：页面元素根据屏幕大小自动缩放，以呈现等比例变化</p><p>​流式布局和flex布局主要是针对宽度的布局，在高度上不能响应式变化</p><p>响应式布局：</p><ul><li>网页可以根据不同的设备或者窗口大小呈现出不同的效果</li><li>使用响应式布局，可以使一个网页适用于所有的设备</li><li>响应式布局的关键是  媒体查询</li></ul><p>作用：可以通过媒体查询给不同宽度的屏幕设置不同的样式，当我们重置浏览器大小的时候，页面也会根据浏览器的宽度和高度重新渲染页面</p><p>格式： media翻译 媒体   关键字 and or only ；and可以将多个媒体特性链接在一起，且（交集）；not 排除某个媒体类型，非（可以省略）；only 指定某个特定的媒体类型 可以省略； 逗号， 表示 或（并集）</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-meta">@media</span> 媒体类型 and|<span class="hljs-string">not</span>|<span class="hljs-string">only (媒体功能)&#123;</span><br><span class="hljs-string"> 样式声明</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>@media，@不可省略</strong></p><p>媒体类型：screen 屏幕 ；手机，电脑，平板屏幕</p><p>​all 所有设备</p><p>​print 打印设备</p><p>​speech 屏幕阅读器等发生设备</p><p>可以使用逗号 , 连接多个媒体类型，这样他们之间就是或的关系</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen，print&#123;<br>  <span class="hljs-selector-tag">body</span>&#123;<br>   <span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在媒体类型之前添加一个only，表示只有，使用only是为了兼容一些老版本的浏览器</p><p>媒体功能：(max-width:500px) 定义在输出设备中页面最大可见区域的宽度，最大宽度500px，即&lt;&#x3D;500px的屏幕</p><p>​视口的最大宽度（视口小于指定宽度时生效）</p><p>​(min-width:500px) 定义在输出设备中页面最小可见区域的宽度，最小宽度500px，即&gt;&#x3D;500px的屏幕</p><p>​视口最小宽度 （视口大于指定宽度时生效）</p><p>​(width:500px) 定义在输出设备中页面可见区域的宽度，屏幕宽度为500px</p><p>样式切换的分界点，我们称其为断点，也就是网页的样式会在这个点时发生变化</p><p>一般比较常用的断点</p><p>小于768 超小屏幕  max-width&#x3D;768px  手机</p><p>大于768  小屏幕   min-width&#x3D;768px</p><p>大于992 中型屏幕 min-width&#x3D;992px</p><p>大于1200  大屏幕  min-widt&#x3D;1200px</p><p><strong>注意：</strong></p><p><strong>媒体功能要使用括号包围</strong></p><p>max-width和min-width都是包含等于</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@<span class="hljs-function">media screen <span class="hljs-title">and</span> <span class="hljs-params">(max-width:<span class="hljs-number">350</span>px)</span></span>&#123;<br>html&#123;<br>font-size:<span class="hljs-number">24</span>px;<br>&#125;<br>&#125;<br>@<span class="hljs-function">media screen <span class="hljs-title">and</span> <span class="hljs-params">(min-width:<span class="hljs-number">351</span>px)</span></span>&#123;<br>html&#123;<br>font-size:<span class="hljs-number">24</span>px;<br>&#125;<br>&#125;<br><br>在我们的屏幕上 并且 最大的屏幕宽度为<span class="hljs-number">350</span>px 设置样式，即宽度&lt;=<span class="hljs-number">350</span>px的屏幕<br></code></pre></td></tr></table></figure><p><strong>推荐媒体查询我们按照从小到大的顺序来书写</strong></p><p>移动端布局通过媒体查询和rem就可以实现不同的设备宽度，元素的尺寸也动态变化</p><p>使用媒体查询根据不同的设备比例设置html字体大小，然后页面元素使用rem单位，当html字体变化时元素的尺寸也会发生变化，从而达到等比例缩放的适配效果</p><p>按照设计稿与设备宽高的比例，动态的计算出html标签的font-size大小（媒体查询），css中，设计稿元素的宽高相对位置等取值，按照同等比例换算为rem单位的值 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">60px</span>;<br>    &#125;<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">768px</span>) &#123;<br>        <span class="hljs-selector-tag">h1</span> &#123;<br>            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">90px</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">992px</span>) &#123;<br>        <span class="hljs-selector-tag">h1</span> &#123;<br>            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="通过媒体查询-不同的屏幕尺寸引入不同的样式资源"><a href="#通过媒体查询-不同的屏幕尺寸引入不同的样式资源" class="headerlink" title="通过媒体查询,不同的屏幕尺寸引入不同的样式资源"></a>通过媒体查询,不同的屏幕尺寸引入不同的样式资源</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 外链样式文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./style.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;screen and (max-width:350px)&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./style.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;screen and (min-width:351px)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h2><p>不同设备的完美视口大小是不同的，iphone6&#x2F;7&#x2F;8 是375 ipnone6&#x2F;7&#x2F;8 P是414</p><p>不同设备的像素比（物理像素与css像素的比值）是不同的，所以我们给一个元素设置width：375px；在不同设备上的显示效果是不同，在375的设备就是全屏，在414的设备就不是全屏</p><p>所以在移动端开发的时候就不能使用px作为单位来进行页面布局了</p><p>使用百分比布局的话，每个元素都是相对于父元素的百分比，所以百分比的相对物是不固定的，使用百分布局也不合适，我们得找一个在同一个设备中不会变化的来作为参照物</p><p>vw即viewport width 视口的宽度 在一个设备中视口的宽度是固定的，vw设个单位永远相对于视口的宽度来进行计算</p><p>100vw&#x3D;1个视口的宽度  在视口为375px的设备上 100vw等375px。在视口为414的设备上 100vw等414px</p><p>1vw&#x3D;1%的视口的宽度</p><p>设计图上一个48px * 35px的元素 在750px的设备上使用vw</p><p>100vw&#x3D;750px（设计图的像素）  0.133333333vw&#x3D;1px</p><p>6.4vw&#x3D;48px；</p><p>4.667vw&#x3D;35px； 即每一个元素的npx用vw表示极为 n*0.1333333</p><p>但是这样计算很麻烦，我们可以 使用vw和rem配合使用</p><p>即</p><p>html{font-size:0.133333333vw}  即font-size为1px</p><p>div{width:48rem}  即48vw即为48*0.133333vw 即48px</p><p>但是浏览器都设置的有最先显示的font-size值为12px，即如果我们设置的font-size小于12px（0除外），就会给我们的font-size重置为12px</p><p>我们写的48rem实际表现为48*12px为576px这是因为我的html的font-size为0.1333333vw为1px小于12px的，所以我么可以将html的font-size值扩大一些，随意扩大到40px即5.333333vw，即html{font-size:5.3333333vw};</p><p>我们的div{width:1.2rem} 即48&#x2F;40</p><h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h2><ul><li><p>什么是sass，目前市场上三大css 预编译语言之一</p><p>sass less stylus</p><ul><li><p>什么是css预编译语言：可以以语言的形式书写css样式（css不是语言，是css样式表）</p></li><li><p>css预编译语言不能直接在浏览器中运行，需要编译成css文件以后运行，这样我们就需要将一个叫sass的工具将sass编写的代码编译成.css文件，将我们写的.sass文件转换成.css文件去浏览器运行</p></li><li><p>sass工具的安装依赖的环镜：rube环境 python环境 node环境</p></li><li><p>如何安装，因为sass是一个依赖node环境的前端工具，我们就可以使用npm安装，因为是要安装在我们的电脑上的，一次安装多次使用所以要使用npm安装全局包</p><ul><li><p>打开命令行，目录无所谓</p></li><li><p>输入指令$  npm install –global sass</p><p>mac 指令$ sudo npm install –global sass</p></li><li><p>检测安装 打开命令行，目录无所谓，输入指令$ sass –version</p></li></ul></li><li><p>工具的使用 </p><ul><li><p>了解sass的文件形式</p><ul><li><p>.sass 后缀的文件 和 .scss 后缀的文件都是sass文件，这两个文件在语法上没有区别，写法一样，只是.sass 没有打括号的分号，全部依靠缩进保持关系（这是以后css发展的趋势，但是现在支持的还不是很好）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.sass</span> 文件<br><span class="hljs-selector-tag">div</span><br><span class="hljs-attribute">font-size</span>：<span class="hljs-number">19px</span><br><span class="hljs-attribute">color</span>：red<br></code></pre></td></tr></table></figure></li><li><p>.scss 文件，就是你怎么写css就怎么写</p></li></ul></li><li><p>编译成css文件</p><ul><li><p>单文件编译</p><ul><li><p>打开命令行</p></li><li><p>切换到你要编译的目录</p></li><li><p>输入指令$ sass 编译哪一个文件 编译成哪一个文件</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">sass <span class="hljs-keyword">index</span>.scss <span class="hljs-keyword">index</span>.css<br></code></pre></td></tr></table></figure></li><li><p>缺点：每一次修改源文件都要从新编译</p></li></ul></li><li><p>单文件实时编译</p><ul><li><p>打开命令行</p></li><li><p>切换到你要编译的目录</p></li><li><p>输入指令$ sass –watch 要编译的文件:要编译成的文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sass --watch <span class="hljs-built_in">index</span>.<span class="hljs-keyword">scs</span><span class="hljs-variable">s:index</span>.css<br></code></pre></td></tr></table></figure></li><li><p>缺点：只能同时监控一个scss文件，要修改多少个文件就要开多少个cmd窗口分别监控</p></li></ul></li><li><p>文件夹实时编译</p><p>能帮我们监控整个文件的变化，只要你监控的文件夹里面有任何一个scss或者sass文件发生变化，就会自动帮你进行编辑</p><ul><li><p>打开命令行</p></li><li><p>切换到你要监控的文件夹目录</p></li><li><p>输入指令$ sass –watch 要监控的文件夹：生成的文件存放的文件夹</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-----目录结构</span><br>zw的项目<br> <span class="hljs-keyword">index</span>.html<br> sass<br><br><span class="hljs-comment">----cmd命令</span><br>$ sass <span class="hljs-comment">--watch sass:css</span><br>(会自动帮我们生成css文件夹)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>map文件的作用</p><p>按照这个形式进行开发，我要修改样式应该修改sass文件，不能去修改css文件，一旦放修改css文件，下次编译的时候就会被覆盖了，html里面引入的是css文件</p><p>map文件的作用：帮我们把原本 映射在css文件的行数直接映射在sass文件，前提是css文件里面的映射源注释不要删除</p></li></ul></li></ul></li></ul></li><li><p>vscode插件Easy sass</p><p>vue 项目引入sass ：<a href="https://blog.csdn.net/m0_38010595/article/details/112258189">https://blog.csdn.net/m0_38010595/article/details/112258189</a></p><p>html引入sass：<a href="https://blog.csdn.net/qq_41571838/article/details/81634968">https://blog.csdn.net/qq_41571838/article/details/81634968</a></p></li><li><p>sass是css的预处理器，是css的扩展可以帮助我们减少css的重复代码，节省开发时间</p><p>sass文件的扩展名为.scss</p></li></ul><p>​      使用sass的原因：css没有很好的计算能力，代码冗余，不便维护，不利于复用</p><h3 id="sass的注释"><a href="#sass的注释" class="headerlink" title="sass的注释"></a>sass的注释</h3><ul><li><p>单行注释  &#x2F;&#x2F;开头 后面书写注释，会在编译的时候被忽略掉，开发注释</p></li><li><p>多行注释 &#x2F;* 注释的内容  *&#x2F;     快捷键：shift + alt + A</p><p>会在编译的时候被保留下来，但是打包的时候被忽略掉</p><p>打包，就是压缩文件，没有换行空格等</p></li><li><p>强力注释</p><p>&#x2F;*！ 注释的内容 *&#x2F;</p><p>在注释的开始写一个感叹号！，会在编译的时候保留下来，将来打包的时候也会保留</p></li></ul><h3 id="sass变量使用-符号"><a href="#sass变量使用-符号" class="headerlink" title="sass变量使用$符号"></a>sass变量使用$符号</h3><ul><li>定义变量，在sass中可以定义一些变量，后期可以统一使用修改</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">$变量名：value;</span><br><span class="hljs-section">--</span><br>$color1:red;<br>$abc:left;<br></code></pre></td></tr></table></figure><p>sass变量可以存储的信息：字符串，数字，布尔值，颜色值，列表，null</p><p>在变量中可以引用其他的变量，在编译后的css文件中使用变量的地方会被替换成变量的值</p><ul><li><p>在变量定义时剪号和下划线可以交替使用，即两者之间没有严格的区分</p></li><li><p>1:使用变量，直接使用在值的位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">color</span>:$color1;<br>&#125;<br></code></pre></td></tr></table></figure><p>2:在样式名或者选择器上使用，使用插值表达式</p><p>相当于把变量的值插入到另一个内容中，格式为：把变量使用#{ }包裹起来</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">div</span>&#123;<br> margin-<span class="hljs-comment">#&#123;$abc&#125;:100px;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>使用变量的地方，将来一旦变量修改，每一个使用变量的位置都会改变</p><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>1:嵌套选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br> <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br> <span class="hljs-selector-tag">p</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">10px</span>;<br>  <span class="hljs-selector-tag">a</span>&#123;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#ddd</span>;<br>  &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在嵌套选择器中调用父选择器 使用&amp;符号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    &amp;<span class="hljs-selector-pseudo">:hover</span>&#123;<br>        <span class="hljs-attribute">color</span>:red;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2:嵌套属性 </p><p>和选择器没有关系和属性名有关系，前提是：属性名中带有中划线（-）的才可以嵌套</p><p>属性名:  后要加空格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font</span>: &#123;<br> size:<span class="hljs-number">14px</span>;<br> weight:<span class="hljs-number">4</span>;<br>&#125;<br><br>等同于:<br>font-weight:<span class="hljs-number">4</span>;<br><span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<br></code></pre></td></tr></table></figure><h3 id="混合-mixin-include"><a href="#混合-mixin-include" class="headerlink" title="混合 @mixin. @include"></a>混合 @mixin. @include</h3><p>格式：在定义mixin的时候可以使用其他的sass特性 比如说嵌套</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@<span class="hljs-keyword">mixin</span> 名字&#123;<br>样式声明<br>&#125;<br>@<span class="hljs-keyword">mixin</span> 名字 (参数名<span class="hljs-number">1</span>,参数名<span class="hljs-number">2</span>)&#123;<br>样式声明<br>&#125;<br><br>调用时<br>div&#123;<br>  @include 名字;<br>&#125;<br>div&#123;<br>  @include 名字(实际参数<span class="hljs-number">1</span>,实际参数<span class="hljs-number">2</span>);<br>&#125;<br>掉用时参数的顺序要和定义时参数顺序一致<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@mixin</span> all &#123;<br><span class="hljs-attribute">color</span>:red;<br><span class="hljs-selector-tag">p</span>&#123;<br> <span class="hljs-attribute">font-size</span>:<span class="hljs-number">24px</span>;<br>&#125;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-keyword">@include</span> all;<br>&#125;<br><br><br>等同于<br><span class="hljs-selector-tag">div</span>&#123;<br><span class="hljs-attribute">color</span>:red;<br><span class="hljs-selector-tag">p</span>&#123;<br> <span class="hljs-attribute">font-size</span>:<span class="hljs-number">24px</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="extend-继承"><a href="#extend-继承" class="headerlink" title="extend 继承"></a>extend 继承</h3><p>作用：一个选择器与另一个选择器的样式几乎一致，只有少量区别时，可以采用继承，让样式a继承样式b的样式</p><p>让一个选择器A继承另一个选择器B的内定义的所有样式及与B相关的其他样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.button-A</span>  &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.button-B</span>  &#123;<br>  <span class="hljs-keyword">@extend</span> .button-A;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.button-C</span> &#123;<br>  <span class="hljs-keyword">@extend</span> .button-A;<br>  <span class="hljs-attribute">background-color</span>: green;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br><br>后两个样式继承样式<span class="hljs-selector-tag">A</span>  编译后式并集选择器<br>等同于：<br><span class="hljs-selector-class">.button-A</span>,<span class="hljs-selector-class">.button-B</span>,<span class="hljs-selector-class">.button-C</span> &#123;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><span class="hljs-selector-class">.button-B</span>  &#123;<br>  <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.button-C</span>&#123;<br>  <span class="hljs-attribute">background-color</span>: green;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="import-和Partials"><a href="#import-和Partials" class="headerlink" title="@import 和Partials"></a>@import 和Partials</h3><p>在css中支持使用@import引入其他css文件，但是css每次在调用@import指令时都会向服务器发送一次http请求，很消耗资源。但是使用sass的@import指令将引入sass时不会发送http请求，将所有的sass文件最终编译成一个css文件。</p><p>在一个.scss文件中引入另一个.scss文件时使用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;被引入的文件名&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li><p>引入文件时不需要加文件的后缀名，sass会自动添加.scss后缀</p></li><li><p>如果你不希望将一个sass文件编辑成一个css文件，要在<strong>创建</strong>被引入的文件名前加一个下划线_  这样sass不会将其编译成css文件</p><p>即给文件命名时名字前要加下划线.     _style-box.scss</p></li><li><p>在@import引入文件时不用加下划线</p></li></ul><h3 id="sass函数"><a href="#sass函数" class="headerlink" title="sass函数"></a>sass函数</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss">乘法：（不可以单位不同）<br><span class="hljs-attribute">width</span>：<span class="hljs-number">100px</span>*<span class="hljs-number">2</span><br><br>除法：（不可以单位不同，除法为了和css样式表中的/区分，所以书写格式要格外注意）<br><span class="hljs-variable">$width</span>:<span class="hljs-number">1000px</span>;<br><span class="hljs-attribute">width</span>：<span class="hljs-variable">$width</span> /<span class="hljs-number">2</span>; <span class="hljs-comment">//使用变量，是除法运算</span><br><span class="hljs-attribute">width</span>：<span class="hljs-built_in">round</span>(<span class="hljs-number">1.5</span>)/<span class="hljs-number">2</span>;  <span class="hljs-comment">//使用函数，是除法运算</span><br><span class="hljs-attribute">height</span>：（<span class="hljs-number">500px</span> /<span class="hljs-number">2</span>）; <span class="hljs-comment">//使用圆括号，是除法运算</span><br><span class="hljs-attribute">height</span>：<span class="hljs-number">20px</span>+<span class="hljs-number">100px</span>/<span class="hljs-number">2px</span>;  <span class="hljs-comment">//使用了加号，是除法运算</span><br><br>变量计算，加减乘除都可以<br><span class="hljs-variable">$width1</span>:<span class="hljs-number">100px</span>;<br><span class="hljs-variable">$width2</span>:<span class="hljs-number">200px</span>;<br><span class="hljs-variable">$width3</span>:<span class="hljs-number">300px</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-variable">$width1</span>+<span class="hljs-variable">$width2</span>-<span class="hljs-variable">$width3</span>;<br></code></pre></td></tr></table></figure><p>处理数字的函数</p><ul><li>abs(-10px)   返回结果是 10px     绝对值函数</li><li>round(3.5)  返回结果是 4    四舍五入函</li></ul><h2 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h2><ul><li>bootstrap是根据类名添加样式的</li></ul><p>​       组件 </p><ul><li><p>bootstrap需要为页面内容和栅格系统包裹一个.container容器，bootstrap预定好了这个类，叫.container,它提供了两个作此作用的类</p></li><li><p>container类</p><p>container类是有padding值的</p><ul><li>响应式布局 固定宽度</li><li>大屏（&gt;&#x3D;1200px）宽度定为1170px</li><li>中屏（&gt;&#x3D;992px）宽度定为970px</li><li>小屏  （&gt;&#x3D;768px）宽度为750px</li><li>超小屏即手机 （&lt;768px）宽度自动为100%</li></ul></li><li><p>container-fluid类</p><ul><li>流式布局容器 宽度为100% 占据全部视口的容器，适合用于单独做移动端开发</li></ul></li></ul><ul><li><p>栅格系统中是靠行和列的组合来创建页面的，我们将要写的页面内容放在这些创建好的布局中</p></li><li><p>row必须放到container布局容器的里面  </p><p>row设置了margin负值，所以container内写入row后container的padding则被抵消掉了</p></li></ul><ul><li><p>我们实现列的平均分配，需要给列添加类前缀</p><p>col-xs-所占的份额   xs为extra small   超小</p><p>col-sm-                     sm为small     小</p><p>col-md-份额               md为medium      中等</p><p>col-lg-分额。         lg为large       大屏幕</p></li><li><p>每个列有默认的padding值 大约为15px</p></li><li><p>如果一行内各列所占的分数相加等于12分 则会沾满container的宽度  每个子元素按照分配的份额分布</p></li><li><p>如果一行内各列所占的分数相加小于12 则占不满container的宽度 在行的最后面会有空余时间</p></li><li><p>如果一行（row）内所包含的列（column）占的分额相加大于12，则后面多余的列所在的元素将会被挤到下一行</p></li><li><p>可以同时为一列指定多个试用于不同设备设备的类名，以便在不同宽度的屏幕下划分不同的分数</p><p>class&#x3D;“coll-lg-2 col-md-3 col-sm-6 col-xs-12”</p></li><li><p>列嵌套</p><p>即在一个列中嵌套一个新的行row，行内再分为多个小列column</p><p>row的margin负值会抵消列的padding,而且高度自动和父元素一样高</p></li><li><p>列偏移</p><p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 <code>*</code> 选择器为当前元素增加了左侧的边距（margin）。例如，<code>.col-md-offset-4</code> 类将 <code>.col-md-4</code> 元素向右侧偏移了4个列（column）的宽度。</p></li><li><p>列排序</p><p>使用col-lg-pull-份额 使元素向左侧移动</p><p>使用col-lg-push-份额 使元素向右移动</p></li><li><p>工具类</p><p>为了加快对移动设备的友好页面的开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同设备展示或者隐藏页面的内容</p><p>隐藏</p><ul><li>hidden-xs 在超小屏幕隐藏</li><li>hidden-sm 在小屏幕隐藏</li><li>hidden-md 在中屏隐藏</li><li>hidden-lg 在大屏幕隐藏</li></ul><p>显示类</p><ul><li>visible-xs 在超小屏幕显示</li><li>visible-sm 在小屏幕显示</li><li>visible-md 在中屏显示</li><li>visible-lg 在大屏幕显示</li></ul></li></ul><p>ps使用：</p><p>前端常用的面板 </p><p>窗口 –》打开 这些面板： 图层 信息 字符 选项 工具 选项 历史记录</p><p>创建画布：</p><p>文件–》新建 （创建出一个画布） ctrl+n</p><p>常用的工具：</p><p>文字：T</p><p>输入文字后 文字很小 –》字符面板 提供了文字的信息 可以对文字进行修改</p><p>默认是添加横排文字 还可以添加竖排文字 </p><ul><li>移动</li></ul><p>只能移动对应图层上的元素，不能移动锁定的图层，想要移动锁定的图层要先将锁解开（比如：背景图层是锁定的，要先将小锁解开，双击图层 会有一个修改名字的弹窗 点击确定）</p><p>可以在右侧选择图层后移动 也可以将上方的 自动选择 改为图层</p><ul><li><p>选区工具</p><p>作用：可以用于测量页面中的元素大小，结合信息面板看起来更方便</p><ul><li><p>在信息面板中可以看到框选中的值</p></li><li><p>也可以用于选中页面中的区域，复制出一个新的图层</p></li></ul><p>截取素材：选中选取后 按 ctrl+c （会有一个小剪子）ctrl+n （新建一个图层，会以选取的宽高建立）ctrl+v 将图片粘上去，就获取到一个图片素材了  。点击文件 –》存储为  ，将素材存到我们的电脑上 可以选择存储的格式 一般存储为jpg </p><ul><li>测量得到的尺寸默认是厘米可以修改  编辑 –》首选项–〉单位与标尺    在单位里 将标尺与文字都改为像素</li></ul><p>案例：打开一个网页 截屏 按下电脑键盘上 prt scr sys rq 键，回到ps工具中新建一个页面，会默认以我们截屏的宽高来进行设置</p><ul><li><p>调整选取：使用选取工具选中区域后，按着空格选区会跟着走，将选取调整到合适的位置后再松手可以再调整选取的大小</p></li><li><p>可以使用放大镜 alt+滚轮 可以放大或缩小</p></li><li><p>截取素材：选中选取后 按 ctrl+c （会有一个小剪子）ctrl+n （新建一个图层，会以选取的宽高建立）ctrl+v 将图片粘上去，就获取到一个图片素材了  。点击文件 –》存储为  ，将素材存到我们的电脑上 可以选择存储的格式 一般存储为jpg</p></li></ul></li><li><p>抓手工具 （小手）</p><p>拖拽画布，放大的时候特别好用   放大时可以使用小抓手拖拽画布</p></li><li><p>菜单栏 下的视图  勾选标尺（ctrl+R）</p><p>参考线 鼠标在标尺上按下 向下 拖到合适的位置，使用选取工具在参考线周围 参考线会有一个吸附的功能 </p><p>参考线可以使用移动工具移动回去，或者使用菜单栏 视图 清除参考线</p><ul><li><p>使用参考线和选取工具配合 裁剪出准确的元素</p><p>将图像放大 在需要裁剪的边缘使用选区工具先框选 然后拉出参考线到合适的位置，各个方向参考线都拉到合适的位置后，再使用选区工具选中元素 ctrl+c    ctrl+n     ctrl+v 文件 存储为</p></li></ul></li><li><p>调整图像大小</p><p>菜单栏 图像  图像大小 可以修改图片的大小</p></li><li><p>裁剪工具</p></li><li><p>吸管工具 取色器 </p><p>取色后点击左侧工具栏显示的颜色，出现颜色信息面板（拾色器）</p></li><li><p>画笔 </p><p>可以随意绘制，前端用的不多</p></li><li><p>橡皮擦</p></li></ul><p>​</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Webpack</title>
    <link href="/smiling-sheep.github.io/2022/05/12/webpack/"/>
    <url>/smiling-sheep.github.io/2022/05/12/webpack/</url>
    
    <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>webpack中文网： <a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a></p><p>Webpack是一种前端资源构建工具，一个静态模块打包器（module bundler）. 在Webpack看来，前端的所有资源文件（js&#x2F;json&#x2F;css&#x2F;img&#x2F;sass&#x2F;…)都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</p><h1 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装Webpack</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> i webpack@<span class="hljs-number">5</span>.<span class="hljs-number">62</span>.<span class="hljs-number">1</span> webpack-cli@<span class="hljs-number">4</span>.<span class="hljs-number">9</span>.<span class="hljs-number">1</span> -g<br><br><span class="hljs-attribute">npm</span> i webpack@<span class="hljs-number">5</span>.<span class="hljs-number">62</span>.<span class="hljs-number">1</span> webpack-cli@<span class="hljs-number">4</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>  webpack-dev-server@<span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span> -D<br></code></pre></td></tr></table></figure><h1 id="根据ES6模块依赖关系打包js"><a href="#根据ES6模块依赖关系打包js" class="headerlink" title="根据ES6模块依赖关系打包js"></a>根据ES6模块依赖关系打包js</h1><ol><li><p>新建项目目录</p></li><li><p>npm init -y 项目初始化</p></li><li><p>创建src文件夹，并在文件夹内创建三个js文件： index.js rnd.js child.js</p><blockquote><p>webpack默认的入口文件： src&#x2F;index.js</p></blockquote><p>rnd.js</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> rnd(<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>)&#123;<br>    <span class="hljs-keyword">return</span> Math.floor(Math.random() * (<span class="hljs-keyword">end</span> - <span class="hljs-keyword">start</span> + <span class="hljs-number">1</span>)) + <span class="hljs-keyword">start</span><br>&#125;<br>export <span class="hljs-keyword">default</span> rnd<br></code></pre></td></tr></table></figure><p>child.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> rnd <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./rnd&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">child</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">rnd</span>(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>))<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> child<br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import child from <span class="hljs-string">&quot;./child&quot;</span><br><span class="hljs-function"><span class="hljs-title">child</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure></li><li><p>在根目录创建index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>执行打包命令，生成dist文件夹，及main.js</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>种方案： 默认以production模式打包, webpack默认打包后创建dist文件夹，main.js<br>webpack<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>种方案： 或者指定打包模式为开发模式<br>webpack --mode=development<br><br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>种方案： 或者自定义打包后的目标文件夹和生成的目标文件<br>webpack .<span class="hljs-regexp">/src/i</span>ndex.js -o .<span class="hljs-regexp">/build/</span>built.js --mode=development<br></code></pre></td></tr></table></figure><blockquote><p>development开发版本，便于调试，未压缩</p><p>production 生产版本，代码优化，压缩</p></blockquote></li><li><p>预览index.html</p><blockquote><p>webpack默认只能打包js文件和json文件，如果要打包其它类型的文件 ，需要安装对应的加载器，并进行配置</p></blockquote></li></ol><h1 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h1><p>webpack的配置文件, </p><p><strong>webpack 的配置文件是 JavaScript 文件，文件内导出了一个 webpack配置的对象。 webpack 会根据该配置定义的属性进行处理。</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lua">const <span class="hljs-built_in">path</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>//定义入口文件 <br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-built_in">output</span>: &#123;<br>  //定义打包后生成的文件夹和js文件<br>      <span class="hljs-built_in">path</span>: <span class="hljs-built_in">path</span>.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>      filename: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p><strong>按配置文件进行打包方式有两种</strong> </p><ul><li><p>命令行</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">webpack --config webpack.config.js<br></code></pre></td></tr></table></figure></li><li><p>npm脚本</p><p>在package.json的scripts中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --config webpack.config.js&quot;</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>执行脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> start<br></code></pre></td></tr></table></figure></li></ul><h1 id="Webpack五个核心概念"><a href="#Webpack五个核心概念" class="headerlink" title="Webpack五个核心概念"></a>Webpack五个核心概念</h1><ul><li><p>Entry</p><p>入口（Entry)指示 Webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。 </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">entry:</span> <span class="hljs-comment">&#x27;./src/index.js&#x27;,</span><br></code></pre></td></tr></table></figure></li><li><p>Output</p><p>输出（Output)指示 Webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">output: &#123;<br>  //定义打包后生成的文件夹和js文件<br>      path: path.<span class="hljs-built_in">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>      filename: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>Loader</p><p>Loader 让 Webpack 能够去处理那些非 Javascript 文件（webpack 自身只理解JavaScript)</p><p>loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p></li><li><p>Plugins</p><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。</p></li><li><p>Mode</p><p>模式（Mode)指示 Webpack 使用相应模式的配置</p><p>development: 能让代码本地调试运行的环境 </p><p>production: 能让代码优化上线运行的环境</p></li></ul><h1 id="打包css样式资源"><a href="#打包css样式资源" class="headerlink" title="打包css样式资源"></a>打包css样式资源</h1><h3 id="style-loader和css-loader的使用"><a href="#style-loader和css-loader的使用" class="headerlink" title="style-loader和css-loader的使用"></a>style-loader和css-loader的使用</h3><ul><li><p>安装loader</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i style-loader css-loader -D<br></code></pre></td></tr></table></figure><blockquote><p>css-loader  将css文件变成commonjs模块加载到js中，加载后的代码是样式字符串</p><p>style-loader 在引入js的html中创建style标签，将js中的样式资源插入</p></blockquote></li><li><p>配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">const path = require(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br>module.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  output: &#123;<br>      path: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>      filename: <span class="hljs-string">&#x27;main.js&#x27;</span><br>  &#125;,<br>  <span class="hljs-regexp">//m</span>odule选项决定了如何处理项目中的不同类型的模块<br>  module: &#123;<br>    rules: [<br>      &#123;<br>      <span class="hljs-regexp">//</span>css样式资源的处理<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        <br>        <span class="hljs-regexp">//</span> 注意：use数组中loader执行顺序，从右到左，从下到上，依次执行<br>        <span class="hljs-regexp">//</span> style-loader,css-loader二者顺序不能调换<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>,<span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="打包sass资源"><a href="#打包sass资源" class="headerlink" title="打包sass资源"></a>打包sass资源</h3><ul><li><p>安装loader</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i sass sass-loader -D<br></code></pre></td></tr></table></figure><blockquote><p>sass-loader 只有预先安装了sass才有效</p><p>不同类型的文件必须设置不同的loader处理规则</p></blockquote></li><li><p>配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">...<br>module: &#123;<br>  rules: [<br>    &#123;<br>      test: <span class="hljs-regexp">/\.css$/</span>,<br>      use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>,<span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>    &#125;,<br>    &#123;<br>    <span class="hljs-regexp">//</span>sass资源的处理<br>      test: <span class="hljs-regexp">/\.scss$/</span>,<br>      use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>,<span class="hljs-string">&#x27;css-loader&#x27;</span>,<span class="hljs-string">&#x27;sass-loader&#x27;</span>]<br>    &#125;,<br>  ]<br>&#125;<br>  <br></code></pre></td></tr></table></figure></li></ul><h3 id="mini-css-extract-plugin插件的使用"><a href="#mini-css-extract-plugin插件的使用" class="headerlink" title="mini-css-extract-plugin插件的使用"></a>mini-css-extract-plugin插件的使用</h3><p>style-loader 在目标html中加入<code>&lt;style&gt;</code>，并把css代码进行复制，这样可能会生成庞大的html.</p><p>mini-css-extract-plugin插件会生成css文件，并在html中以<code>&lt;link&gt;</code>方式进行引入</p><p><strong>安装</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">cnpm <span class="hljs-selector-tag">i</span> mini-css-extract-plugin -D<br></code></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br>...<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  ...<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(sa|sc|c)ss$/</span>,<br>        <span class="hljs-attr">use</span>: [<br>        <span class="hljs-comment">//使用模块加载</span><br>          <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>          <span class="hljs-string">&quot;css-loader&quot;</span>,<br>          <span class="hljs-string">&quot;sass-loader&quot;</span><br>        ],<br>      &#125;<br>      ...<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-comment">//打包后生成app.css</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123; <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;css/app.css&#x27;</span> &#125;)<br>  ]<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="css兼容性问题的处理"><a href="#css兼容性问题的处理" class="headerlink" title="css兼容性问题的处理"></a>css兼容性问题的处理</h3><p>postcss-loader和对应插件autoprefixer来处理css兼容性问题</p><ul><li><p>安装</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">cnpm i postcss-loader <span class="hljs-built_in">auto</span>prefixer -D<br></code></pre></td></tr></table></figure></li><li><p>在根目录中添加postcss.config.js</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">module</span>.exports = &#123;<br>    <span class="hljs-symbol">plugins:</span> [<br>        <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;autoprefixer&#x27;</span>)(&#123;<br>        <span class="hljs-regexp">//</span>理会的浏览列表： 最近两个版本，市场份额大于<span class="hljs-number">1</span>%的，ios7<br>            <span class="hljs-symbol">overrideBrowserslist:</span> [<span class="hljs-string">&#x27;last 2 version&#x27;</span>, <span class="hljs-string">&#x27;&gt;1%&#x27;</span>, <span class="hljs-string">&#x27;ios 7&#x27;</span>]<br>        &#125;)<br>    ]<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>webpack.config.js的配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">...<br>&#123;<br>  test: <span class="hljs-regexp">/\.(sa|sc|c)ss$/</span>,<br>  use: [<br>    MiniCssExtractPlugin.loader,<br>    <span class="hljs-string">&quot;css-loader&quot;</span>,<br>    <span class="hljs-string">&quot;sass-loader&quot;</span>,<br>    <span class="hljs-regexp">//</span>配置postcss-loader<br>    <span class="hljs-string">&#x27;postcss-loader&#x27;</span><br>  ],<br>&#125;,<br></code></pre></td></tr></table></figure><blockquote><p>可在css中使用backface-visibility: hidden; 打包后查看是否添加私有前缀</p></blockquote></li></ul><h1 id="清除目录的clean-webpack-plugin"><a href="#清除目录的clean-webpack-plugin" class="headerlink" title="清除目录的clean-webpack-plugin"></a>清除目录的clean-webpack-plugin</h1><blockquote><p>如果报错：  Error: EPERM: operation not permitted</p><p>解决方案： </p><p>尝试一、项目文件夹修改权限 （在文件夹右键 &gt; 安全  &gt; 选 Administrator 管理员）</p><p>尝试二、在vscode终端输入  set-ExecutionPolicy RemoteSigned ， 回车即可</p><p>尝试三、dist中文件或文件夹被占用，把打开的文件或文件夹关闭即可</p></blockquote><p>**clean-webpack-plugin插件的作用 **</p><p> 先把 dist目录里的文件先清除干净，再生成新的。</p><ul><li><p>安装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">cnpm <span class="hljs-selector-tag">i</span> clean-webpack-plugin -D<br></code></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-comment">//引入插件</span><br><span class="hljs-keyword">const</span> <span class="hljs-comment">&#123; CleanWebpackPlugin &#125;</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<span class="hljs-punctuation">;</span><br>...<br><span class="hljs-keyword">module</span>: <span class="hljs-comment">&#123;&#125;</span>,<br>plugins: [<br><span class="hljs-comment">//配置</span><br>        <span class="hljs-keyword">new</span> CleanWebpackPlugin(), <span class="hljs-comment">//删除目录</span><br> ]<br></code></pre></td></tr></table></figure></li></ul><h1 id="打包html文件"><a href="#打包html文件" class="headerlink" title="打包html文件"></a>打包html文件</h1><ul><li><p>安装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">cnpm <span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">html</span>-webpack-plugin -D<br></code></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>引入插件<br>const HtmlWebpackPlugin = require(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br>...<br> plugins: [<br> <span class="hljs-regexp">//</span> 配置<br>    new HtmlWebpackPlugin(&#123;<br>      filename: <span class="hljs-string">&#x27;index.html&#x27;</span>,  <span class="hljs-regexp">//</span>输出文件名<br>      <span class="hljs-regexp">//</span>以当前目录下的index.html文件为模板生成dist/index.html文件<br>      template: <span class="hljs-string">&#x27;./index.html&#x27;</span>,<br>      inject: <span class="hljs-string">&#x27;body&#x27;</span> <span class="hljs-regexp">//</span>js文件自动注入body结束的位置<br>    &#125;),<br>    new CleanWebpackPlugin(), <span class="hljs-regexp">//</span>删除目录<br>  ]<br></code></pre></td></tr></table></figure></li></ul><h1 id="打包图片、字体、图标等资源文件"><a href="#打包图片、字体、图标等资源文件" class="headerlink" title="打包图片、字体、图标等资源文件"></a>打包图片、字体、图标等资源文件</h1><p>webpack新增 Asset Modules 资源模块。</p><p>资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p><blockquote><p>指与css相关的资源，html中直接引入的图片需要使用后面提到的html-loader</p></blockquote><ul><li>在 webpack 5 之前，通常使用url-loader 、file-loader模块，并进行如下配置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**已废弃</span><br><span class="hljs-strong">rules: [</span><br><span class="hljs-strong">   &#123;</span><br><span class="hljs-strong">     test: /\.(png|jpg|gif)$/i,</span><br><span class="hljs-strong">     use: [</span><br><span class="hljs-strong">       &#123;</span><br><span class="hljs-strong">         loader: &#x27;url-loader&#x27;,</span><br><span class="hljs-strong">         options: &#123;</span><br><span class="hljs-strong">           limit: 8192,</span><br><span class="hljs-strong">         &#125;,</span><br><span class="hljs-strong">       &#125;,</span><br><span class="hljs-strong">     ],</span><br><span class="hljs-strong">   &#125;,</span><br><span class="hljs-strong"> ],</span><br><span class="hljs-strong"></span><br></code></pre></td></tr></table></figure><ul><li><p>webpack5默认可以正确打包图片、字体、图标等资源</p><blockquote><p> 如果需要自定义配置，可以定义资源模块类型</p></blockquote></li></ul><p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">asset/resource 发送一个单独的文件并导出 URL。之前通过使用 `file-loader` 实现。<br>asset/inline 导出一个资源的 data URI。之前通过使用 `url-loader` 实现。<br>asset/source 导出资源的源代码。之前通过使用 `raw-loader` 实现。<br>asset 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 `url-loader`，并且配置资源体积限制实现。<br></code></pre></td></tr></table></figure><ul><li>举例 (针对css中引入的背景图片)</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>  test: <span class="hljs-regexp">/\.(png|jpg)$/i</span>,  <span class="hljs-regexp">//</span> 加载图片<br>  type: <span class="hljs-string">&#x27;asset&#x27;</span>,<br>  generator: &#123;<br>  <span class="hljs-regexp">//</span> 打包后图片存放在img文件夹，<br>  <span class="hljs-regexp">//</span> [name]原始文件名  <br>  <span class="hljs-regexp">//</span> [hash:<span class="hljs-number">6</span>] 六个hash算法后的字符<br>  <span class="hljs-regexp">//</span> [ext] 扩展名<br>    filename: <span class="hljs-string">&quot;img/[name].[hash:6][ext]&quot;</span><br>  &#125;,<br>  parser: &#123;<br>    <span class="hljs-regexp">//</span> 如果文件小于<span class="hljs-number">30</span>k,则自动转为base64编码，减少http请求。<br>    <span class="hljs-regexp">//</span> 如果大于<span class="hljs-number">30</span>k,则打包存入img文件夹<br>    dataUrlCondition: &#123;<br>      maxSize: <span class="hljs-number">30</span> * <span class="hljs-number">1024</span><br>    &#125;<br>  &#125;<br>&#125;,<br><br></code></pre></td></tr></table></figure><h1 id="配置开发服务器"><a href="#配置开发服务器" class="headerlink" title="配置开发服务器"></a>配置开发服务器</h1><ul><li>安装 ：</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">cnpm i webpack-dev-<span class="hljs-keyword">server</span> -D<br></code></pre></td></tr></table></figure><p>devServer: 用来自动化（自动编译，自动打开浏览器，自动刷新浏览器)</p><p>特点： 只会在内存中编译打包，不会有任何输出。</p><ul><li>配置</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">module.exports = &#123;<br>...<br> devServer: &#123;<br>    hot: true,<span class="hljs-regexp">//</span>热更新，即代码更改并保存后，立即编译，自动刷新浏览器<br>    static: &#123;<br>      directory: path.join(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),  <span class="hljs-regexp">//</span>服务启动后自动打开的index.html所在的位置 <br>    &#125;,<span class="hljs-regexp">//</span>开发服务运行时的文件根目录<br>    host: <span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-regexp">//</span>主机地址<br>    port: <span class="hljs-number">9090</span>,<span class="hljs-regexp">//</span>端口号<br>    compress: true,<span class="hljs-regexp">//</span>开发服务器是否启动gzip等压缩,<br>    open: true <span class="hljs-regexp">//</span>服务启动后自动打开浏览器预览<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在package.json中更改dev命令：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack-dev-server --config webpack.config.js --mode development&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><ul><li>执行 npm run dev命令</li></ul><h1 id="解析-vue文件"><a href="#解析-vue文件" class="headerlink" title="解析*.vue文件"></a>解析*.vue文件</h1><p>vue-loader：解析和转换 .vue 文件，提取出其中的逻辑代码 script、样式代码 style、以及 HTML 模版 template，再分别把它们交给对应的 Loader 去处理。</p><p>vue-loader的目的在于提取。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cnpm</span> i vue-loader@<span class="hljs-number">15</span>.<span class="hljs-number">9</span>.<span class="hljs-number">8</span> -D<br><span class="hljs-attribute">cnpm</span> i vue-template-compiler@<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">14</span> -D<br><span class="hljs-attribute">cnpm</span> i vue@<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">14</span> -S<br><br></code></pre></td></tr></table></figure><p>注意把入口文件改为：main.js<br>把模板改为 .&#x2F;public&#x2F;index.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">VueLoaderPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vue-loader/lib/plugin&#x27;</span>)<br><br>......<br><br>在rules中添加规则：<br><br><span class="hljs-comment">//处理vue</span><br>&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.vue$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;vue-loader&#x27;</span>]<br>&#125;<br><br>在plugins中添加：<br><br><span class="hljs-comment">// 请确保引入这个插件！</span><br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueLoaderPlugin</span>()<br><br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">v-header</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">v-header</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>main<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> vHeader <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/header/vheader.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery"> <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;app&#x27;</span>,</span><br><span class="language-xquery">  components: &#123;</span><br><span class="language-xquery">    vHeader</span><br><span class="language-xquery">  &#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>components&#x2F;vheader.vue</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        my header<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;header&#x27;</span>);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>:&#123;&#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">components</span>: &#123;&#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="参考各个依赖的版本"><a href="#参考各个依赖的版本" class="headerlink" title="参考各个依赖的版本"></a>参考各个依赖的版本</h1><ul><li>webpack所需依赖的版本</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs stata">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;</span><span class="hljs-keyword">Error</span>: <span class="hljs-keyword">no</span> <span class="hljs-keyword">test</span> specified\<span class="hljs-string">&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --config webpack.config.js&quot;</span>,<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --config webpack.config.js --mode development&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;autoprefixer&quot;</span>: <span class="hljs-string">&quot;^10.4.8&quot;</span>,<br>    <span class="hljs-string">&quot;clean-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^4.0.0&quot;</span>,<br>    <span class="hljs-string">&quot;css-loader&quot;</span>: <span class="hljs-string">&quot;^6.7.1&quot;</span>,<br>    <span class="hljs-string">&quot;html-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^5.5.0&quot;</span>,<br>    <span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>: <span class="hljs-string">&quot;^2.6.1&quot;</span>,<br>    <span class="hljs-string">&quot;postcss-loader&quot;</span>: <span class="hljs-string">&quot;^7.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;sass&quot;</span>: <span class="hljs-string">&quot;^1.54.5&quot;</span>,<br>    <span class="hljs-string">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^13.0.2&quot;</span>,<br>    <span class="hljs-string">&quot;style-loader&quot;</span>: <span class="hljs-string">&quot;^3.3.1&quot;</span>,<br>    <span class="hljs-string">&quot;vue-loader&quot;</span>: <span class="hljs-string">&quot;^15.9.8&quot;</span>,<br>    <span class="hljs-string">&quot;vue-template-compiler&quot;</span>: <span class="hljs-string">&quot;^2.6.14&quot;</span>,<br>    <span class="hljs-string">&quot;webpack&quot;</span>: <span class="hljs-string">&quot;^5.74.0&quot;</span>,<br>    <span class="hljs-string">&quot;webpack-cli&quot;</span>: <span class="hljs-string">&quot;^4.10.0&quot;</span>,<br>    <span class="hljs-string">&quot;webpack-dev-server&quot;</span>: <span class="hljs-string">&quot;^4.10.0&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.6.14&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>npm i <a href="mailto:&#x77;&#x65;&#98;&#x70;&#x61;&#99;&#107;&#64;&#53;&#46;&#54;&#x32;&#x2e;&#49;">&#x77;&#x65;&#98;&#x70;&#x61;&#99;&#107;&#64;&#53;&#46;&#54;&#x32;&#x2e;&#49;</a> <a href="mailto:&#x77;&#101;&#98;&#x70;&#97;&#99;&#107;&#45;&#x63;&#108;&#105;&#64;&#x34;&#x2e;&#x39;&#46;&#49;">&#x77;&#101;&#98;&#x70;&#97;&#99;&#107;&#45;&#x63;&#108;&#105;&#64;&#x34;&#x2e;&#x39;&#46;&#49;</a>  <a href="mailto:&#119;&#x65;&#x62;&#112;&#97;&#99;&#107;&#x2d;&#x64;&#101;&#118;&#45;&#x73;&#x65;&#x72;&#118;&#101;&#x72;&#64;&#x34;&#x2e;&#x34;&#46;&#48;">&#119;&#x65;&#x62;&#112;&#97;&#99;&#107;&#x2d;&#x64;&#101;&#118;&#45;&#x73;&#x65;&#x72;&#118;&#101;&#x72;&#64;&#x34;&#x2e;&#x34;&#46;&#48;</a> -D</p></li><li><p>npm  i <a href="mailto:&#x63;&#x73;&#x73;&#45;&#x6c;&#111;&#x61;&#100;&#101;&#x72;&#x40;&#x36;&#46;&#53;&#x2e;&#49;">&#x63;&#x73;&#x73;&#45;&#x6c;&#111;&#x61;&#100;&#101;&#x72;&#x40;&#x36;&#46;&#53;&#x2e;&#49;</a> <a href="mailto:&#115;&#97;&#x73;&#115;&#x40;&#x31;&#x2e;&#x34;&#51;&#x2e;&#x34;">&#115;&#97;&#x73;&#115;&#x40;&#x31;&#x2e;&#x34;&#51;&#x2e;&#x34;</a> <a href="mailto:&#x73;&#97;&#x73;&#115;&#45;&#108;&#111;&#97;&#x64;&#101;&#x72;&#x40;&#x31;&#x32;&#x2e;&#51;&#46;&#48;">&#x73;&#97;&#x73;&#115;&#45;&#108;&#111;&#97;&#x64;&#101;&#x72;&#x40;&#x31;&#x32;&#x2e;&#51;&#46;&#48;</a> -S</p></li><li><p>npm  i  <a href="mailto:&#97;&#x75;&#x74;&#x6f;&#112;&#x72;&#x65;&#x66;&#105;&#x78;&#x65;&#x72;&#x40;&#49;&#48;&#46;&#x34;&#x2e;&#48;">&#97;&#x75;&#x74;&#x6f;&#112;&#x72;&#x65;&#x66;&#105;&#x78;&#x65;&#x72;&#x40;&#49;&#48;&#46;&#x34;&#x2e;&#48;</a> <a href="mailto:&#99;&#x6c;&#101;&#97;&#x6e;&#x2d;&#119;&#x65;&#98;&#112;&#97;&#x63;&#107;&#x2d;&#112;&#108;&#117;&#103;&#105;&#110;&#64;&#x34;&#x2e;&#48;&#46;&#48;">&#99;&#x6c;&#101;&#97;&#x6e;&#x2d;&#119;&#x65;&#98;&#112;&#97;&#x63;&#107;&#x2d;&#112;&#108;&#117;&#103;&#105;&#110;&#64;&#x34;&#x2e;&#48;&#46;&#48;</a> <a href="mailto:&#x68;&#x74;&#109;&#x6c;&#45;&#119;&#x65;&#98;&#112;&#x61;&#99;&#x6b;&#x2d;&#112;&#x6c;&#x75;&#x67;&#105;&#110;&#64;&#x35;&#x2e;&#53;&#46;&#48;">&#x68;&#x74;&#109;&#x6c;&#45;&#119;&#x65;&#98;&#112;&#x61;&#99;&#x6b;&#x2d;&#112;&#x6c;&#x75;&#x67;&#105;&#110;&#64;&#x35;&#x2e;&#53;&#46;&#48;</a> -S</p></li><li><p>npm i <a href="mailto:&#109;&#105;&#x6e;&#x69;&#45;&#99;&#115;&#115;&#x2d;&#101;&#120;&#116;&#114;&#97;&#x63;&#x74;&#45;&#112;&#108;&#117;&#103;&#105;&#110;&#x40;&#50;&#46;&#52;&#x2e;&#x34;">&#109;&#105;&#x6e;&#x69;&#45;&#99;&#115;&#115;&#x2d;&#101;&#120;&#116;&#114;&#97;&#x63;&#x74;&#45;&#112;&#108;&#117;&#103;&#105;&#110;&#x40;&#50;&#46;&#52;&#x2e;&#x34;</a>  <a href="mailto:&#112;&#111;&#x73;&#x74;&#99;&#115;&#x73;&#45;&#108;&#x6f;&#x61;&#100;&#101;&#x72;&#x40;&#x36;&#x2e;&#x32;&#46;&#x30;">&#112;&#111;&#x73;&#x74;&#99;&#115;&#x73;&#45;&#108;&#x6f;&#x61;&#100;&#101;&#x72;&#x40;&#x36;&#x2e;&#x32;&#46;&#x30;</a> <a href="mailto:&#112;&#111;&#115;&#x74;&#x63;&#115;&#115;&#45;&#112;&#114;&#101;&#115;&#x65;&#x74;&#45;&#x65;&#110;&#x76;&#64;&#x36;&#x2e;&#x37;&#46;&#x30;">&#112;&#111;&#115;&#x74;&#x63;&#115;&#115;&#45;&#112;&#114;&#101;&#115;&#x65;&#x74;&#45;&#x65;&#110;&#x76;&#64;&#x36;&#x2e;&#x37;&#46;&#x30;</a></p></li><li><p>解析vue文件所需的依赖</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;clean-webpack-plugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;html-webpack-plugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.5.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-loader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^15.9.8&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-template-compiler&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.6.14&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;webpack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.62.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;webpack-cli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.9.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.6.14&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
